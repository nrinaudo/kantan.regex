Index.PACKAGES = {"kantan.regex.literals" : [{"name" : "kantan.regex.literals.RegexLiteral", "shortDescription" : "", "object" : "kantan\/regex\/literals\/RegexLiteral$.html", "members_class" : [{"label" : "rx", "tail" : "(args: Any*): java.util.regex.Pattern", "member" : "kantan.regex.literals.RegexLiteral.rx", "link" : "kantan\/regex\/literals\/RegexLiteral.html#rx(args:Any*):java.util.regex.Pattern", "kind" : "macro def"}, {"member" : "kantan.regex.literals.RegexLiteral#<init>", "error" : "unsupported entity"}, {"label" : "sc", "tail" : ": StringContext", "member" : "kantan.regex.literals.RegexLiteral.sc", "link" : "kantan\/regex\/literals\/RegexLiteral.html#sc:StringContext", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "kantan\/regex\/literals\/RegexLiteral.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "kantan\/regex\/literals\/RegexLiteral.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/literals\/RegexLiteral.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/literals\/RegexLiteral.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "kantan\/regex\/literals\/RegexLiteral.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "kantan\/regex\/literals\/RegexLiteral.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "kantan\/regex\/literals\/RegexLiteral.html#==(x$1:Any):Boolean", "kind" : "final def"}], "members_object" : [{"label" : "rxImpl", "tail" : "(c: Context)(args: scala.reflect.macros.blackbox.Context.Expr[Any]*): scala.reflect.macros.blackbox.Context.Expr[java.util.regex.Pattern]", "member" : "kantan.regex.literals.RegexLiteral.rxImpl", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#rxImpl(c:scala.reflect.macros.blackbox.Context)(args:c.Expr[Any]*):c.Expr[java.util.regex.Pattern]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/literals\/RegexLiteral$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/literals\/RegexLiteral$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/regex\/literals\/RegexLiteral.html", "kind" : "class"}, {"name" : "kantan.regex.literals.RegexLiteralMacro", "trait" : "kantan\/regex\/literals\/RegexLiteralMacro.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "rxImpl", "tail" : "(c: Context)(args: scala.reflect.macros.blackbox.Context.Expr[Any]*): scala.reflect.macros.blackbox.Context.Expr[java.util.regex.Pattern]", "member" : "kantan.regex.literals.RegexLiteralMacro.rxImpl", "link" : "kantan\/regex\/literals\/RegexLiteralMacro.html#rxImpl(c:scala.reflect.macros.blackbox.Context)(args:c.Expr[Any]*):c.Expr[java.util.regex.Pattern]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "kantan.regex.literals.ToRegexLiteral", "trait" : "kantan\/regex\/literals\/ToRegexLiteral.html", "kind" : "trait", "members_trait" : [{"label" : "toRegexLiteral", "tail" : "(sc: StringContext): RegexLiteral", "member" : "kantan.regex.literals.ToRegexLiteral.toRegexLiteral", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#toRegexLiteral(sc:StringContext):kantan.regex.literals.RegexLiteral", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/literals\/ToRegexLiteral.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.regex.generic" : [{"name" : "kantan.regex.generic.DerivedMatchDecoder", "object" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html", "members_object" : [{"label" : "apply", "tail" : "(ev: DerivedMatchDecoder[A]): DerivedMatchDecoder[A]", "member" : "kantan.regex.generic.DerivedMatchDecoder.apply", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#apply[A](implicitev:kantan.regex.generic.DerivedMatchDecoder[A]):kantan.regex.generic.DerivedMatchDecoder[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/regex\/generic\/DerivedMatchDecoder.html", "kind" : "trait", "members_trait" : [{"label" : "decode", "tail" : "(e: Match): DecodeResult[A]", "member" : "kantan.regex.generic.DerivedMatchDecoder.decode", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#decode(e:kantan.regex.Match):kantan.regex.DecodeResult[A]", "kind" : "def"}, {"label" : "product", "tail" : "(decoder: Decoder[Match, DD, DecodeError, codecs.type]): Decoder[Match, (A, DD), DecodeError, codecs.type]", "member" : "kantan.codecs.Decoder.product", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#product[DD](decoder:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,(D,DD),F,T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => Decoder[Match, DD, DecodeError, codecs.type]): Decoder[Match, DD, DecodeError, codecs.type]", "member" : "kantan.codecs.Decoder.flatMap", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#flatMap[DD](f:D=>kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "tag", "tail" : "(): Decoder[Match, A, DecodeError, TT]", "member" : "kantan.codecs.Decoder.tag", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#tag[TT]:kantan.codecs.Decoder[E,D,F,TT]", "kind" : "def"}, {"label" : "contramapEncoded", "tail" : "(f: (EE) => Match): Decoder[EE, A, DecodeError, codecs.type]", "member" : "kantan.codecs.Decoder.contramapEncoded", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#contramapEncoded[EE](f:EE=>E):kantan.codecs.Decoder[EE,D,F,T]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (DecodeError) => FF): Decoder[Match, A, FF, codecs.type]", "member" : "kantan.codecs.Decoder.leftMap", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#leftMap[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (DecodeError) => FF): Decoder[Match, A, FF, codecs.type]", "member" : "kantan.codecs.Decoder.mapError", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#mapError[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (A) => Boolean)(t: IsError[DecodeError]): Decoder[Match, A, DecodeError, codecs.type]", "member" : "kantan.codecs.Decoder.filter", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#filter(f:D=>Boolean)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[A, DD])(t: IsError[DecodeError]): Decoder[Match, DD, DecodeError, codecs.type]", "member" : "kantan.codecs.Decoder.collect", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#collect[DD](f:PartialFunction[D,DD])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (A) => Either[DecodeError, DD]): Decoder[Match, DD, DecodeError, codecs.type]", "member" : "kantan.codecs.Decoder.emap", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#emap[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (A) => Either[DecodeError, DD]): Decoder[Match, DD, DecodeError, codecs.type]", "member" : "kantan.codecs.Decoder.mapResult", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#mapResult[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => DD): Decoder[Match, DD, DecodeError, codecs.type]", "member" : "kantan.codecs.Decoder.map", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#map[DD](f:D=>DD):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (DecodeError) => Decoder[Match, A, DecodeError, codecs.type]): Decoder[Match, A, DecodeError, codecs.type]", "member" : "kantan.codecs.Decoder.handleErrorWith", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#handleErrorWith(f:F=>kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[DecodeError, Either[FF, DD]]): Decoder[Match, DD, FF, codecs.type]", "member" : "kantan.codecs.Decoder.recoverWith", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#recoverWith[DD>:D,FF>:F](pf:PartialFunction[F,Either[FF,DD]]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[DecodeError, DD]): Decoder[Match, DD, DecodeError, codecs.type]", "member" : "kantan.codecs.Decoder.recover", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#recover[DD>:D](pf:PartialFunction[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: (Either[DecodeError, A]) => Either[FF, DD]): Decoder[Match, DD, FF, codecs.type]", "member" : "kantan.codecs.Decoder.andThen", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#andThen[FF,DD](f:Either[F,D]=>Either[FF,DD]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "orElse", "tail" : "(d: Decoder[Match, DD, DecodeError, codecs.type]): Decoder[Match, DD, DecodeError, codecs.type]", "member" : "kantan.codecs.Decoder.orElse", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#orElse[DD>:D](d:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "unsafeDecode", "tail" : "(e: Match): A", "member" : "kantan.codecs.Decoder.unsafeDecode", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#unsafeDecode(e:E):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decodeFrom", "tail" : "(e: Match, index: Int): DecodeResult[A]", "member" : "kantan.regex.generic.DerivedMatchDecoder.decodeFrom", "link" : "kantan\/regex\/generic\/DerivedMatchDecoder.html#decodeFrom(e:kantan.regex.Match,index:Int):kantan.regex.DecodeResult[A]", "kind" : "abstract def"}], "shortDescription" : "Custom MatchDecoder implementation for decoding HList."}, {"name" : "kantan.regex.generic.GenericInstances", "trait" : "kantan\/regex\/generic\/GenericInstances.html", "kind" : "trait", "members_trait" : [{"label" : "hlistGroupDecoder", "tail" : "(arg0: GroupDecoder[H]): GroupDecoder[::[H, HNil]]", "member" : "kantan.regex.generic.GenericInstances.hlistGroupDecoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#hlistGroupDecoder[H](implicitevidence$4:kantan.regex.GroupDecoder[H]):kantan.regex.GroupDecoder[H::shapeless.HNil]", "kind" : "implicit def"}, {"label" : "hnilMatchDecoder", "tail" : ": DerivedMatchDecoder[HNil]", "member" : "kantan.regex.generic.GenericInstances.hnilMatchDecoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#hnilMatchDecoder:kantan.regex.generic.DerivedMatchDecoder[shapeless.HNil]", "kind" : "implicit val"}, {"label" : "hlistMatchDecoder", "tail" : "(arg0: GroupDecoder[H], arg1: DerivedMatchDecoder[T]): DerivedMatchDecoder[::[H, T]]", "member" : "kantan.regex.generic.GenericInstances.hlistMatchDecoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#hlistMatchDecoder[H,T<:shapeless.HList](implicitevidence$2:kantan.regex.GroupDecoder[H],implicitevidence$3:kantan.regex.generic.DerivedMatchDecoder[T]):kantan.regex.generic.DerivedMatchDecoder[H::T]", "kind" : "implicit def"}, {"label" : "hlistSingletonMatchDecoder", "tail" : "(arg0: MatchDecoder[H]): MatchDecoder[::[H, HNil]]", "member" : "kantan.regex.generic.LowPrirityGenericInstances.hlistSingletonMatchDecoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#hlistSingletonMatchDecoder[H](implicitevidence$1:kantan.regex.MatchDecoder[H]):kantan.regex.MatchDecoder[H::shapeless.HNil]", "kind" : "implicit def"}, {"label" : "coproductEncoder", "tail" : "(eh: Encoder[E, H, T], ed: Encoder[E, D, T]): Encoder[E, :+:[H, D], T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.coproductEncoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#coproductEncoder[E,H,D<:shapeless.Coproduct,T](impliciteh:kantan.codecs.Encoder[E,H,T],implicited:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,H:+:D,T]", "kind" : "implicit def"}, {"label" : "cnilEncoder", "tail" : "(): Encoder[E, CNil, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.cnilEncoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#cnilEncoder[E,D,T]:kantan.codecs.Encoder[E,shapeless.CNil,T]", "kind" : "implicit def"}, {"label" : "coproductDecoder", "tail" : "(dh: Decoder[E, H, F, T], dt: Decoder[E, D, F, T]): Decoder[E, :+:[H, D], F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.coproductDecoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#coproductDecoder[E,H,D<:shapeless.Coproduct,F,T](implicitdh:kantan.codecs.Decoder[E,H,F,T],implicitdt:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,H:+:D,F,T]", "kind" : "implicit def"}, {"label" : "cnilDecoder", "tail" : "(arg0: IsError[F]): Decoder[E, CNil, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.cnilDecoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#cnilDecoder[E,F,T](implicitevidence$1:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,shapeless.CNil,F,T]", "kind" : "implicit def"}, {"label" : "sumTypeDecoder", "tail" : "(gen: Aux[D, C], dr: Lazy[Decoder[E, C, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.sumTypeDecoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#sumTypeDecoder[E,D,F,T,C<:shapeless.Coproduct](implicitgen:shapeless.Generic.Aux[D,C],implicitdr:shapeless.Lazy[kantan.codecs.Decoder[E,C,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "sumTypeEncoder", "tail" : "(gen: Aux[D, C], er: Lazy[Encoder[E, C, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.sumTypeEncoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#sumTypeEncoder[E,D,T,C<:shapeless.Coproduct](implicitgen:shapeless.Generic.Aux[D,C],impliciter:shapeless.Lazy[kantan.codecs.Encoder[E,C,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "caseClassDecoderFromLabelled", "tail" : "(generic: Aux[D, H], hDecoder: Lazy[Decoder[E, H, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassDecoderFromLabelled", "link" : "kantan\/regex\/generic\/GenericInstances.html#caseClassDecoderFromLabelled[E,D,F,T,H<:shapeless.HList](implicitgeneric:shapeless.LabelledGeneric.Aux[D,H],implicithDecoder:shapeless.Lazy[kantan.codecs.Decoder[E,H,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "caseClassDecoder", "tail" : "(gen: Aux[D, H], dr: Lazy[Decoder[E, H, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassDecoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#caseClassDecoder[E,D,F,T,H<:shapeless.HList](implicitgen:shapeless.Generic.Aux[D,H],implicitdr:shapeless.Lazy[kantan.codecs.Decoder[E,H,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "caseClassEncoderFromLabelled", "tail" : "(generic: Aux[D, H], hEncoder: Lazy[Encoder[E, H, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassEncoderFromLabelled", "link" : "kantan\/regex\/generic\/GenericInstances.html#caseClassEncoderFromLabelled[E,D,T,H<:shapeless.HList](implicitgeneric:shapeless.LabelledGeneric.Aux[D,H],implicithEncoder:shapeless.Lazy[kantan.codecs.Encoder[E,H,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "caseClassEncoder", "tail" : "(gen: Aux[D, H], er: Lazy[Encoder[E, H, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassEncoder", "link" : "kantan\/regex\/generic\/GenericInstances.html#caseClassEncoder[E,D,T,H<:shapeless.HList](implicitgen:shapeless.Generic.Aux[D,H],impliciter:shapeless.Lazy[kantan.codecs.Encoder[E,H,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/generic\/GenericInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/generic\/GenericInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/generic\/GenericInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/generic\/GenericInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/generic\/GenericInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/generic\/GenericInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/generic\/GenericInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/GenericInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/GenericInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/GenericInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/generic\/GenericInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/generic\/GenericInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/generic\/GenericInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/generic\/GenericInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/generic\/GenericInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/generic\/GenericInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/generic\/GenericInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/generic\/GenericInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/generic\/GenericInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.regex.generic.LowPrirityGenericInstances", "trait" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html", "kind" : "trait", "members_trait" : [{"label" : "hlistSingletonMatchDecoder", "tail" : "(arg0: MatchDecoder[H]): MatchDecoder[::[H, HNil]]", "member" : "kantan.regex.generic.LowPrirityGenericInstances.hlistSingletonMatchDecoder", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#hlistSingletonMatchDecoder[H](implicitevidence$1:kantan.regex.MatchDecoder[H]):kantan.regex.MatchDecoder[H::shapeless.HNil]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/generic\/LowPrirityGenericInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.regex.laws" : [], "kantan" : [], "libra" : [], "kantan.regex" : [{"name" : "kantan.regex.codecs", "shortDescription" : "Acts as a type tag for regex-specific kantan.codecs.Decoder instances.", "object" : "kantan\/regex\/codecs$.html", "members_object" : [{"label" : "tuple22", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17], arg17: GroupDecoder[I18], arg18: GroupDecoder[I19], arg19: GroupDecoder[I20], arg20: GroupDecoder[I21], arg21: GroupDecoder[I22]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]", "member" : "kantan.regex.TupleDecoders.tuple22", "link" : "kantan\/regex\/codecs$.html#tuple22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](implicitevidence$232:kantan.regex.GroupDecoder[I1],implicitevidence$233:kantan.regex.GroupDecoder[I2],implicitevidence$234:kantan.regex.GroupDecoder[I3],implicitevidence$235:kantan.regex.GroupDecoder[I4],implicitevidence$236:kantan.regex.GroupDecoder[I5],implicitevidence$237:kantan.regex.GroupDecoder[I6],implicitevidence$238:kantan.regex.GroupDecoder[I7],implicitevidence$239:kantan.regex.GroupDecoder[I8],implicitevidence$240:kantan.regex.GroupDecoder[I9],implicitevidence$241:kantan.regex.GroupDecoder[I10],implicitevidence$242:kantan.regex.GroupDecoder[I11],implicitevidence$243:kantan.regex.GroupDecoder[I12],implicitevidence$244:kantan.regex.GroupDecoder[I13],implicitevidence$245:kantan.regex.GroupDecoder[I14],implicitevidence$246:kantan.regex.GroupDecoder[I15],implicitevidence$247:kantan.regex.GroupDecoder[I16],implicitevidence$248:kantan.regex.GroupDecoder[I17],implicitevidence$249:kantan.regex.GroupDecoder[I18],implicitevidence$250:kantan.regex.GroupDecoder[I19],implicitevidence$251:kantan.regex.GroupDecoder[I20],implicitevidence$252:kantan.regex.GroupDecoder[I21],implicitevidence$253:kantan.regex.GroupDecoder[I22]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]", "kind" : "implicit def"}, {"label" : "tuple21", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17], arg17: GroupDecoder[I18], arg18: GroupDecoder[I19], arg19: GroupDecoder[I20], arg20: GroupDecoder[I21]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]", "member" : "kantan.regex.TupleDecoders.tuple21", "link" : "kantan\/regex\/codecs$.html#tuple21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](implicitevidence$211:kantan.regex.GroupDecoder[I1],implicitevidence$212:kantan.regex.GroupDecoder[I2],implicitevidence$213:kantan.regex.GroupDecoder[I3],implicitevidence$214:kantan.regex.GroupDecoder[I4],implicitevidence$215:kantan.regex.GroupDecoder[I5],implicitevidence$216:kantan.regex.GroupDecoder[I6],implicitevidence$217:kantan.regex.GroupDecoder[I7],implicitevidence$218:kantan.regex.GroupDecoder[I8],implicitevidence$219:kantan.regex.GroupDecoder[I9],implicitevidence$220:kantan.regex.GroupDecoder[I10],implicitevidence$221:kantan.regex.GroupDecoder[I11],implicitevidence$222:kantan.regex.GroupDecoder[I12],implicitevidence$223:kantan.regex.GroupDecoder[I13],implicitevidence$224:kantan.regex.GroupDecoder[I14],implicitevidence$225:kantan.regex.GroupDecoder[I15],implicitevidence$226:kantan.regex.GroupDecoder[I16],implicitevidence$227:kantan.regex.GroupDecoder[I17],implicitevidence$228:kantan.regex.GroupDecoder[I18],implicitevidence$229:kantan.regex.GroupDecoder[I19],implicitevidence$230:kantan.regex.GroupDecoder[I20],implicitevidence$231:kantan.regex.GroupDecoder[I21]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]", "kind" : "implicit def"}, {"label" : "tuple20", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17], arg17: GroupDecoder[I18], arg18: GroupDecoder[I19], arg19: GroupDecoder[I20]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]", "member" : "kantan.regex.TupleDecoders.tuple20", "link" : "kantan\/regex\/codecs$.html#tuple20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](implicitevidence$191:kantan.regex.GroupDecoder[I1],implicitevidence$192:kantan.regex.GroupDecoder[I2],implicitevidence$193:kantan.regex.GroupDecoder[I3],implicitevidence$194:kantan.regex.GroupDecoder[I4],implicitevidence$195:kantan.regex.GroupDecoder[I5],implicitevidence$196:kantan.regex.GroupDecoder[I6],implicitevidence$197:kantan.regex.GroupDecoder[I7],implicitevidence$198:kantan.regex.GroupDecoder[I8],implicitevidence$199:kantan.regex.GroupDecoder[I9],implicitevidence$200:kantan.regex.GroupDecoder[I10],implicitevidence$201:kantan.regex.GroupDecoder[I11],implicitevidence$202:kantan.regex.GroupDecoder[I12],implicitevidence$203:kantan.regex.GroupDecoder[I13],implicitevidence$204:kantan.regex.GroupDecoder[I14],implicitevidence$205:kantan.regex.GroupDecoder[I15],implicitevidence$206:kantan.regex.GroupDecoder[I16],implicitevidence$207:kantan.regex.GroupDecoder[I17],implicitevidence$208:kantan.regex.GroupDecoder[I18],implicitevidence$209:kantan.regex.GroupDecoder[I19],implicitevidence$210:kantan.regex.GroupDecoder[I20]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]", "kind" : "implicit def"}, {"label" : "tuple19", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17], arg17: GroupDecoder[I18], arg18: GroupDecoder[I19]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]", "member" : "kantan.regex.TupleDecoders.tuple19", "link" : "kantan\/regex\/codecs$.html#tuple19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](implicitevidence$172:kantan.regex.GroupDecoder[I1],implicitevidence$173:kantan.regex.GroupDecoder[I2],implicitevidence$174:kantan.regex.GroupDecoder[I3],implicitevidence$175:kantan.regex.GroupDecoder[I4],implicitevidence$176:kantan.regex.GroupDecoder[I5],implicitevidence$177:kantan.regex.GroupDecoder[I6],implicitevidence$178:kantan.regex.GroupDecoder[I7],implicitevidence$179:kantan.regex.GroupDecoder[I8],implicitevidence$180:kantan.regex.GroupDecoder[I9],implicitevidence$181:kantan.regex.GroupDecoder[I10],implicitevidence$182:kantan.regex.GroupDecoder[I11],implicitevidence$183:kantan.regex.GroupDecoder[I12],implicitevidence$184:kantan.regex.GroupDecoder[I13],implicitevidence$185:kantan.regex.GroupDecoder[I14],implicitevidence$186:kantan.regex.GroupDecoder[I15],implicitevidence$187:kantan.regex.GroupDecoder[I16],implicitevidence$188:kantan.regex.GroupDecoder[I17],implicitevidence$189:kantan.regex.GroupDecoder[I18],implicitevidence$190:kantan.regex.GroupDecoder[I19]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]", "kind" : "implicit def"}, {"label" : "tuple18", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17], arg17: GroupDecoder[I18]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]", "member" : "kantan.regex.TupleDecoders.tuple18", "link" : "kantan\/regex\/codecs$.html#tuple18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](implicitevidence$154:kantan.regex.GroupDecoder[I1],implicitevidence$155:kantan.regex.GroupDecoder[I2],implicitevidence$156:kantan.regex.GroupDecoder[I3],implicitevidence$157:kantan.regex.GroupDecoder[I4],implicitevidence$158:kantan.regex.GroupDecoder[I5],implicitevidence$159:kantan.regex.GroupDecoder[I6],implicitevidence$160:kantan.regex.GroupDecoder[I7],implicitevidence$161:kantan.regex.GroupDecoder[I8],implicitevidence$162:kantan.regex.GroupDecoder[I9],implicitevidence$163:kantan.regex.GroupDecoder[I10],implicitevidence$164:kantan.regex.GroupDecoder[I11],implicitevidence$165:kantan.regex.GroupDecoder[I12],implicitevidence$166:kantan.regex.GroupDecoder[I13],implicitevidence$167:kantan.regex.GroupDecoder[I14],implicitevidence$168:kantan.regex.GroupDecoder[I15],implicitevidence$169:kantan.regex.GroupDecoder[I16],implicitevidence$170:kantan.regex.GroupDecoder[I17],implicitevidence$171:kantan.regex.GroupDecoder[I18]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]", "kind" : "implicit def"}, {"label" : "tuple17", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]", "member" : "kantan.regex.TupleDecoders.tuple17", "link" : "kantan\/regex\/codecs$.html#tuple17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](implicitevidence$137:kantan.regex.GroupDecoder[I1],implicitevidence$138:kantan.regex.GroupDecoder[I2],implicitevidence$139:kantan.regex.GroupDecoder[I3],implicitevidence$140:kantan.regex.GroupDecoder[I4],implicitevidence$141:kantan.regex.GroupDecoder[I5],implicitevidence$142:kantan.regex.GroupDecoder[I6],implicitevidence$143:kantan.regex.GroupDecoder[I7],implicitevidence$144:kantan.regex.GroupDecoder[I8],implicitevidence$145:kantan.regex.GroupDecoder[I9],implicitevidence$146:kantan.regex.GroupDecoder[I10],implicitevidence$147:kantan.regex.GroupDecoder[I11],implicitevidence$148:kantan.regex.GroupDecoder[I12],implicitevidence$149:kantan.regex.GroupDecoder[I13],implicitevidence$150:kantan.regex.GroupDecoder[I14],implicitevidence$151:kantan.regex.GroupDecoder[I15],implicitevidence$152:kantan.regex.GroupDecoder[I16],implicitevidence$153:kantan.regex.GroupDecoder[I17]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]", "kind" : "implicit def"}, {"label" : "tuple16", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]", "member" : "kantan.regex.TupleDecoders.tuple16", "link" : "kantan\/regex\/codecs$.html#tuple16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](implicitevidence$121:kantan.regex.GroupDecoder[I1],implicitevidence$122:kantan.regex.GroupDecoder[I2],implicitevidence$123:kantan.regex.GroupDecoder[I3],implicitevidence$124:kantan.regex.GroupDecoder[I4],implicitevidence$125:kantan.regex.GroupDecoder[I5],implicitevidence$126:kantan.regex.GroupDecoder[I6],implicitevidence$127:kantan.regex.GroupDecoder[I7],implicitevidence$128:kantan.regex.GroupDecoder[I8],implicitevidence$129:kantan.regex.GroupDecoder[I9],implicitevidence$130:kantan.regex.GroupDecoder[I10],implicitevidence$131:kantan.regex.GroupDecoder[I11],implicitevidence$132:kantan.regex.GroupDecoder[I12],implicitevidence$133:kantan.regex.GroupDecoder[I13],implicitevidence$134:kantan.regex.GroupDecoder[I14],implicitevidence$135:kantan.regex.GroupDecoder[I15],implicitevidence$136:kantan.regex.GroupDecoder[I16]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]", "kind" : "implicit def"}, {"label" : "tuple15", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]", "member" : "kantan.regex.TupleDecoders.tuple15", "link" : "kantan\/regex\/codecs$.html#tuple15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](implicitevidence$106:kantan.regex.GroupDecoder[I1],implicitevidence$107:kantan.regex.GroupDecoder[I2],implicitevidence$108:kantan.regex.GroupDecoder[I3],implicitevidence$109:kantan.regex.GroupDecoder[I4],implicitevidence$110:kantan.regex.GroupDecoder[I5],implicitevidence$111:kantan.regex.GroupDecoder[I6],implicitevidence$112:kantan.regex.GroupDecoder[I7],implicitevidence$113:kantan.regex.GroupDecoder[I8],implicitevidence$114:kantan.regex.GroupDecoder[I9],implicitevidence$115:kantan.regex.GroupDecoder[I10],implicitevidence$116:kantan.regex.GroupDecoder[I11],implicitevidence$117:kantan.regex.GroupDecoder[I12],implicitevidence$118:kantan.regex.GroupDecoder[I13],implicitevidence$119:kantan.regex.GroupDecoder[I14],implicitevidence$120:kantan.regex.GroupDecoder[I15]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]", "kind" : "implicit def"}, {"label" : "tuple14", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]", "member" : "kantan.regex.TupleDecoders.tuple14", "link" : "kantan\/regex\/codecs$.html#tuple14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](implicitevidence$92:kantan.regex.GroupDecoder[I1],implicitevidence$93:kantan.regex.GroupDecoder[I2],implicitevidence$94:kantan.regex.GroupDecoder[I3],implicitevidence$95:kantan.regex.GroupDecoder[I4],implicitevidence$96:kantan.regex.GroupDecoder[I5],implicitevidence$97:kantan.regex.GroupDecoder[I6],implicitevidence$98:kantan.regex.GroupDecoder[I7],implicitevidence$99:kantan.regex.GroupDecoder[I8],implicitevidence$100:kantan.regex.GroupDecoder[I9],implicitevidence$101:kantan.regex.GroupDecoder[I10],implicitevidence$102:kantan.regex.GroupDecoder[I11],implicitevidence$103:kantan.regex.GroupDecoder[I12],implicitevidence$104:kantan.regex.GroupDecoder[I13],implicitevidence$105:kantan.regex.GroupDecoder[I14]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]", "kind" : "implicit def"}, {"label" : "tuple13", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]", "member" : "kantan.regex.TupleDecoders.tuple13", "link" : "kantan\/regex\/codecs$.html#tuple13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](implicitevidence$79:kantan.regex.GroupDecoder[I1],implicitevidence$80:kantan.regex.GroupDecoder[I2],implicitevidence$81:kantan.regex.GroupDecoder[I3],implicitevidence$82:kantan.regex.GroupDecoder[I4],implicitevidence$83:kantan.regex.GroupDecoder[I5],implicitevidence$84:kantan.regex.GroupDecoder[I6],implicitevidence$85:kantan.regex.GroupDecoder[I7],implicitevidence$86:kantan.regex.GroupDecoder[I8],implicitevidence$87:kantan.regex.GroupDecoder[I9],implicitevidence$88:kantan.regex.GroupDecoder[I10],implicitevidence$89:kantan.regex.GroupDecoder[I11],implicitevidence$90:kantan.regex.GroupDecoder[I12],implicitevidence$91:kantan.regex.GroupDecoder[I13]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]", "kind" : "implicit def"}, {"label" : "tuple12", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]", "member" : "kantan.regex.TupleDecoders.tuple12", "link" : "kantan\/regex\/codecs$.html#tuple12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](implicitevidence$67:kantan.regex.GroupDecoder[I1],implicitevidence$68:kantan.regex.GroupDecoder[I2],implicitevidence$69:kantan.regex.GroupDecoder[I3],implicitevidence$70:kantan.regex.GroupDecoder[I4],implicitevidence$71:kantan.regex.GroupDecoder[I5],implicitevidence$72:kantan.regex.GroupDecoder[I6],implicitevidence$73:kantan.regex.GroupDecoder[I7],implicitevidence$74:kantan.regex.GroupDecoder[I8],implicitevidence$75:kantan.regex.GroupDecoder[I9],implicitevidence$76:kantan.regex.GroupDecoder[I10],implicitevidence$77:kantan.regex.GroupDecoder[I11],implicitevidence$78:kantan.regex.GroupDecoder[I12]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]", "kind" : "implicit def"}, {"label" : "tuple11", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]", "member" : "kantan.regex.TupleDecoders.tuple11", "link" : "kantan\/regex\/codecs$.html#tuple11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](implicitevidence$56:kantan.regex.GroupDecoder[I1],implicitevidence$57:kantan.regex.GroupDecoder[I2],implicitevidence$58:kantan.regex.GroupDecoder[I3],implicitevidence$59:kantan.regex.GroupDecoder[I4],implicitevidence$60:kantan.regex.GroupDecoder[I5],implicitevidence$61:kantan.regex.GroupDecoder[I6],implicitevidence$62:kantan.regex.GroupDecoder[I7],implicitevidence$63:kantan.regex.GroupDecoder[I8],implicitevidence$64:kantan.regex.GroupDecoder[I9],implicitevidence$65:kantan.regex.GroupDecoder[I10],implicitevidence$66:kantan.regex.GroupDecoder[I11]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]", "kind" : "implicit def"}, {"label" : "tuple10", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]", "member" : "kantan.regex.TupleDecoders.tuple10", "link" : "kantan\/regex\/codecs$.html#tuple10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](implicitevidence$46:kantan.regex.GroupDecoder[I1],implicitevidence$47:kantan.regex.GroupDecoder[I2],implicitevidence$48:kantan.regex.GroupDecoder[I3],implicitevidence$49:kantan.regex.GroupDecoder[I4],implicitevidence$50:kantan.regex.GroupDecoder[I5],implicitevidence$51:kantan.regex.GroupDecoder[I6],implicitevidence$52:kantan.regex.GroupDecoder[I7],implicitevidence$53:kantan.regex.GroupDecoder[I8],implicitevidence$54:kantan.regex.GroupDecoder[I9],implicitevidence$55:kantan.regex.GroupDecoder[I10]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]", "kind" : "implicit def"}, {"label" : "tuple9", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]", "member" : "kantan.regex.TupleDecoders.tuple9", "link" : "kantan\/regex\/codecs$.html#tuple9[I1,I2,I3,I4,I5,I6,I7,I8,I9](implicitevidence$37:kantan.regex.GroupDecoder[I1],implicitevidence$38:kantan.regex.GroupDecoder[I2],implicitevidence$39:kantan.regex.GroupDecoder[I3],implicitevidence$40:kantan.regex.GroupDecoder[I4],implicitevidence$41:kantan.regex.GroupDecoder[I5],implicitevidence$42:kantan.regex.GroupDecoder[I6],implicitevidence$43:kantan.regex.GroupDecoder[I7],implicitevidence$44:kantan.regex.GroupDecoder[I8],implicitevidence$45:kantan.regex.GroupDecoder[I9]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]", "kind" : "implicit def"}, {"label" : "tuple8", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8)]", "member" : "kantan.regex.TupleDecoders.tuple8", "link" : "kantan\/regex\/codecs$.html#tuple8[I1,I2,I3,I4,I5,I6,I7,I8](implicitevidence$29:kantan.regex.GroupDecoder[I1],implicitevidence$30:kantan.regex.GroupDecoder[I2],implicitevidence$31:kantan.regex.GroupDecoder[I3],implicitevidence$32:kantan.regex.GroupDecoder[I4],implicitevidence$33:kantan.regex.GroupDecoder[I5],implicitevidence$34:kantan.regex.GroupDecoder[I6],implicitevidence$35:kantan.regex.GroupDecoder[I7],implicitevidence$36:kantan.regex.GroupDecoder[I8]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8)]", "kind" : "implicit def"}, {"label" : "tuple7", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7)]", "member" : "kantan.regex.TupleDecoders.tuple7", "link" : "kantan\/regex\/codecs$.html#tuple7[I1,I2,I3,I4,I5,I6,I7](implicitevidence$22:kantan.regex.GroupDecoder[I1],implicitevidence$23:kantan.regex.GroupDecoder[I2],implicitevidence$24:kantan.regex.GroupDecoder[I3],implicitevidence$25:kantan.regex.GroupDecoder[I4],implicitevidence$26:kantan.regex.GroupDecoder[I5],implicitevidence$27:kantan.regex.GroupDecoder[I6],implicitevidence$28:kantan.regex.GroupDecoder[I7]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7)]", "kind" : "implicit def"}, {"label" : "tuple6", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6]): MatchDecoder[(I1, I2, I3, I4, I5, I6)]", "member" : "kantan.regex.TupleDecoders.tuple6", "link" : "kantan\/regex\/codecs$.html#tuple6[I1,I2,I3,I4,I5,I6](implicitevidence$16:kantan.regex.GroupDecoder[I1],implicitevidence$17:kantan.regex.GroupDecoder[I2],implicitevidence$18:kantan.regex.GroupDecoder[I3],implicitevidence$19:kantan.regex.GroupDecoder[I4],implicitevidence$20:kantan.regex.GroupDecoder[I5],implicitevidence$21:kantan.regex.GroupDecoder[I6]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6)]", "kind" : "implicit def"}, {"label" : "tuple5", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5]): MatchDecoder[(I1, I2, I3, I4, I5)]", "member" : "kantan.regex.TupleDecoders.tuple5", "link" : "kantan\/regex\/codecs$.html#tuple5[I1,I2,I3,I4,I5](implicitevidence$11:kantan.regex.GroupDecoder[I1],implicitevidence$12:kantan.regex.GroupDecoder[I2],implicitevidence$13:kantan.regex.GroupDecoder[I3],implicitevidence$14:kantan.regex.GroupDecoder[I4],implicitevidence$15:kantan.regex.GroupDecoder[I5]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5)]", "kind" : "implicit def"}, {"label" : "tuple4", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4]): MatchDecoder[(I1, I2, I3, I4)]", "member" : "kantan.regex.TupleDecoders.tuple4", "link" : "kantan\/regex\/codecs$.html#tuple4[I1,I2,I3,I4](implicitevidence$7:kantan.regex.GroupDecoder[I1],implicitevidence$8:kantan.regex.GroupDecoder[I2],implicitevidence$9:kantan.regex.GroupDecoder[I3],implicitevidence$10:kantan.regex.GroupDecoder[I4]):kantan.regex.MatchDecoder[(I1,I2,I3,I4)]", "kind" : "implicit def"}, {"label" : "tuple3", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3]): MatchDecoder[(I1, I2, I3)]", "member" : "kantan.regex.TupleDecoders.tuple3", "link" : "kantan\/regex\/codecs$.html#tuple3[I1,I2,I3](implicitevidence$4:kantan.regex.GroupDecoder[I1],implicitevidence$5:kantan.regex.GroupDecoder[I2],implicitevidence$6:kantan.regex.GroupDecoder[I3]):kantan.regex.MatchDecoder[(I1,I2,I3)]", "kind" : "implicit def"}, {"label" : "tuple2", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2]): MatchDecoder[(I1, I2)]", "member" : "kantan.regex.TupleDecoders.tuple2", "link" : "kantan\/regex\/codecs$.html#tuple2[I1,I2](implicitevidence$2:kantan.regex.GroupDecoder[I1],implicitevidence$3:kantan.regex.GroupDecoder[I2]):kantan.regex.MatchDecoder[(I1,I2)]", "kind" : "implicit def"}, {"label" : "tuple1", "tail" : "(arg0: GroupDecoder[I1]): MatchDecoder[(I1)]", "member" : "kantan.regex.TupleDecoders.tuple1", "link" : "kantan\/regex\/codecs$.html#tuple1[I1](implicitevidence$1:kantan.regex.GroupDecoder[I1]):kantan.regex.MatchDecoder[(I1,)]", "kind" : "implicit def"}, {"label" : "fromCbf", "tail" : "(da: GroupDecoder[Option[A]], cbf: Factory[A, F[A]]): MatchDecoder[F[A]]", "member" : "kantan.regex.MatchDecoderInstances.fromCbf", "link" : "kantan\/regex\/codecs$.html#fromCbf[F[_],A](implicitda:kantan.regex.GroupDecoder[Option[A]],implicitcbf:kantan.codecs.collection.Factory[A,F[A]]):kantan.regex.MatchDecoder[F[A]]", "kind" : "implicit def"}, {"label" : "optMatch", "tail" : "(da: GroupDecoder[Option[A]]): MatchDecoder[Option[A]]", "member" : "kantan.regex.MatchDecoderInstances.optMatch", "link" : "kantan\/regex\/codecs$.html#optMatch[A](implicitda:kantan.regex.GroupDecoder[Option[A]]):kantan.regex.MatchDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "eitherMatch", "tail" : "(arg0: MatchDecoder[A], arg1: MatchDecoder[B]): MatchDecoder[Either[A, B]]", "member" : "kantan.regex.MatchDecoderInstances.eitherMatch", "link" : "kantan\/regex\/codecs$.html#eitherMatch[A,B](implicitevidence$3:kantan.regex.MatchDecoder[A],implicitevidence$4:kantan.regex.MatchDecoder[B]):kantan.regex.MatchDecoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "fromGroup", "tail" : "(arg0: GroupDecoder[A]): MatchDecoder[A]", "member" : "kantan.regex.MatchDecoderInstances.fromGroup", "link" : "kantan\/regex\/codecs$.html#fromGroup[A](implicitevidence$2:kantan.regex.GroupDecoder[A]):kantan.regex.MatchDecoder[A]", "kind" : "implicit def"}, {"label" : "eitherGroupDecoder", "tail" : "(arg0: GroupDecoder[A], arg1: GroupDecoder[B]): GroupDecoder[Either[A, B]]", "member" : "kantan.regex.GroupDecoderInstances.eitherGroupDecoder", "link" : "kantan\/regex\/codecs$.html#eitherGroupDecoder[A,B](implicitevidence$3:kantan.regex.GroupDecoder[A],implicitevidence$4:kantan.regex.GroupDecoder[B]):kantan.regex.GroupDecoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "optGroupDecoder", "tail" : "(arg0: GroupDecoder[A]): GroupDecoder[Option[A]]", "member" : "kantan.regex.GroupDecoderInstances.optGroupDecoder", "link" : "kantan\/regex\/codecs$.html#optGroupDecoder[A](implicitevidence$2:kantan.regex.GroupDecoder[A]):kantan.regex.GroupDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "fromString", "tail" : "(arg0: StringDecoder[A]): GroupDecoder[A]", "member" : "kantan.regex.GroupDecoderInstances.fromString", "link" : "kantan\/regex\/codecs$.html#fromString[A](implicitevidence$1:kantan.codecs.strings.StringDecoder[A]):kantan.regex.GroupDecoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/codecs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/codecs$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/codecs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/codecs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/codecs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/codecs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/codecs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/codecs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/codecs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/codecs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/codecs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/codecs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/codecs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/codecs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/codecs$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/codecs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/codecs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/codecs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/codecs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.regex.CompileError", "shortDescription" : "Describes errors that occur while compiling a regular expression.", "object" : "kantan\/regex\/CompileError$.html", "members_object" : [{"label" : "apply", "tail" : "(msg: String): CompileError", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/regex\/CompileError$.html#apply(msg:String):T", "kind" : "def"}, {"label" : "apply", "tail" : "(cause: Throwable): CompileError", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/regex\/CompileError$.html#apply(cause:Throwable):T", "kind" : "def"}, {"label" : "apply", "tail" : "(msg: String, cause: Throwable): CompileError", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/regex\/CompileError$.html#apply(msg:String,cause:Throwable):T", "kind" : "def"}, {"label" : "safe", "tail" : "(a: => A): Either[CompileError, A]", "member" : "kantan.codecs.error.ErrorCompanion.safe", "link" : "kantan\/regex\/CompileError$.html#safe[A](a:=>A):Either[T,A]", "kind" : "def"}, {"label" : "isError", "tail" : ": IsError[CompileError]", "member" : "kantan.codecs.error.ErrorCompanion.isError", "link" : "kantan\/regex\/CompileError$.html#isError:kantan.codecs.error.IsError[T]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/CompileError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/CompileError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/CompileError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/CompileError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/CompileError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/CompileError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/CompileError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/CompileError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/CompileError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/CompileError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/CompileError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/CompileError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/CompileError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/CompileError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/CompileError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/CompileError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/CompileError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/CompileError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/CompileError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "kantan.regex.CompileError#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "kantan.regex.CompileError.message", "link" : "kantan\/regex\/CompileError.html#message:String", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/regex\/CompileError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/regex\/CompileError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/regex\/CompileError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/regex\/CompileError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/regex\/CompileError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/regex\/CompileError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/regex\/CompileError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/regex\/CompileError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/regex\/CompileError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/regex\/CompileError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/regex\/CompileError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/regex\/CompileError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/regex\/CompileError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/regex\/CompileError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/CompileError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/CompileError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/CompileError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/CompileError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/CompileError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/CompileError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/CompileError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/CompileError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/CompileError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/CompileError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/CompileError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/CompileError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/CompileError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/CompileError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/CompileError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/CompileError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/regex\/CompileError.html", "kind" : "case class"}, {"name" : "kantan.regex.Compiler", "object" : "kantan\/regex\/Compiler$.html", "members_object" : [{"label" : "string", "tail" : ": Compiler[String]", "member" : "kantan.regex.Compiler.string", "link" : "kantan\/regex\/Compiler$.html#string:kantan.regex.Compiler[String]", "kind" : "implicit val"}, {"label" : "pattern", "tail" : ": Compiler[Pattern]", "member" : "kantan.regex.Compiler.pattern", "link" : "kantan\/regex\/Compiler$.html#pattern:kantan.regex.Compiler[kantan.regex.Pattern]", "kind" : "implicit val"}, {"label" : "scalaRegex", "tail" : ": Compiler[scala.util.matching.Regex]", "member" : "kantan.regex.Compiler.scalaRegex", "link" : "kantan\/regex\/Compiler$.html#scalaRegex:kantan.regex.Compiler[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "fromPattern", "tail" : "(f: (A) => CompileResult[Pattern]): Compiler[A]", "member" : "kantan.regex.Compiler.fromPattern", "link" : "kantan\/regex\/Compiler$.html#fromPattern[A](f:A=>kantan.regex.CompileResult[kantan.regex.Pattern]):kantan.regex.Compiler[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Compiler[A]): Compiler[A]", "member" : "kantan.regex.Compiler.apply", "link" : "kantan\/regex\/Compiler$.html#apply[A](implicitev:kantan.regex.Compiler[A]):kantan.regex.Compiler[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/Compiler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/Compiler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/Compiler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/Compiler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/Compiler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/Compiler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/Compiler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Compiler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Compiler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Compiler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/Compiler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/Compiler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/Compiler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/Compiler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/Compiler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/Compiler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/Compiler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/Compiler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/Compiler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/regex\/Compiler.html", "kind" : "trait", "members_trait" : [{"label" : "unsafeCompile", "tail" : "(expr: E, group: Int)(arg0: GroupDecoder[A]): Regex[DecodeResult[A]]", "member" : "kantan.regex.Compiler.unsafeCompile", "link" : "kantan\/regex\/Compiler.html#unsafeCompile[A](expr:E,group:Int)(implicitevidence$3:kantan.regex.GroupDecoder[A]):kantan.regex.Regex[kantan.regex.DecodeResult[A]]", "kind" : "def"}, {"label" : "unsafeCompile", "tail" : "(expr: E)(arg0: MatchDecoder[A]): Regex[DecodeResult[A]]", "member" : "kantan.regex.Compiler.unsafeCompile", "link" : "kantan\/regex\/Compiler.html#unsafeCompile[A](expr:E)(implicitevidence$2:kantan.regex.MatchDecoder[A]):kantan.regex.Regex[kantan.regex.DecodeResult[A]]", "kind" : "def"}, {"label" : "compile", "tail" : "(expr: E, group: Int)(arg0: GroupDecoder[A]): CompileResult[Regex[DecodeResult[A]]]", "member" : "kantan.regex.Compiler.compile", "link" : "kantan\/regex\/Compiler.html#compile[A](expr:E,group:Int)(implicitevidence$1:kantan.regex.GroupDecoder[A]):kantan.regex.CompileResult[kantan.regex.Regex[kantan.regex.DecodeResult[A]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/Compiler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/Compiler.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/Compiler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/Compiler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/Compiler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/Compiler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/Compiler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Compiler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Compiler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Compiler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/Compiler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/Compiler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/Compiler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/Compiler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/Compiler.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/Compiler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/Compiler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/Compiler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/Compiler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compile", "tail" : "(expr: E)(db: MatchDecoder[A]): CompileResult[Regex[DecodeResult[A]]]", "member" : "kantan.regex.Compiler.compile", "link" : "kantan\/regex\/Compiler.html#compile[A](expr:E)(implicitdb:kantan.regex.MatchDecoder[A]):kantan.regex.CompileResult[kantan.regex.Regex[kantan.regex.DecodeResult[A]]]", "kind" : "abstract def"}], "shortDescription" : "Type class for types that can be compiled to instances of Regex."}, {"name" : "kantan.regex.CompileResult", "shortDescription" : "Provides creation methods for CompileResult.", "object" : "kantan\/regex\/CompileResult$.html", "members_object" : [{"label" : "fromThrowable", "tail" : "(t: Throwable): CompileError", "member" : "kantan.codecs.ResultCompanion.WithError.fromThrowable", "link" : "kantan\/regex\/CompileResult$.html#fromThrowable(t:Throwable):F", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Either[CompileError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/regex\/CompileResult$.html#fromTry[S](t:scala.util.Try[S]):Either[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: => S): Either[CompileError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/regex\/CompileResult$.html#apply[S](s:=>S):Either[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: CompileError): Either[CompileError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/regex\/CompileResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[CompileError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/regex\/CompileResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[CompileError, S]])(bf: BuildFrom[M[Either[CompileError, S]], S, M[S]]): Either[CompileError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/regex\/CompileResult$.html#sequence[S,M<:<?>](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/CompileResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/CompileResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/CompileResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/CompileResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/CompileResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/CompileResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/CompileResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/CompileResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/CompileResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/CompileResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/CompileResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/CompileResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/CompileResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/CompileResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/CompileResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/CompileResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/CompileResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/CompileResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/CompileResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "toTry", "tail" : "(ev: <:<[A, Throwable]): Try[B]", "member" : "scala.util.Either.toTry", "link" : "kantan\/regex\/package$$CompileResult.html#toTry(implicitev:A<:<Throwable):scala.util.Try[B]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[B]", "member" : "scala.util.Either.toOption", "link" : "kantan\/regex\/package$$CompileResult.html#toOption:Option[B]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.util.Either.toSeq", "link" : "kantan\/regex\/package$$CompileResult.html#toSeq:Seq[B]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (B) => Boolean, zero: => A1): Either[A1, B]", "member" : "scala.util.Either.filterOrElse", "link" : "kantan\/regex\/package$$CompileResult.html#filterOrElse[A1>:A](p:B=>Boolean,zero:=>A1):scala.util.Either[A1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B1): Either[A, B1]", "member" : "scala.util.Either.map", "link" : "kantan\/regex\/package$$CompileResult.html#map[B1](f:B=>B1):scala.util.Either[A,B1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[B, Either[A1, B1]]): Either[A1, B1]", "member" : "scala.util.Either.flatten", "link" : "kantan\/regex\/package$$CompileResult.html#flatten[A1>:A,B1](implicitev:B<:<scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.flatMap", "link" : "kantan\/regex\/package$$CompileResult.html#flatMap[A1>:A,B1](f:B=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.util.Either.exists", "link" : "kantan\/regex\/package$$CompileResult.html#exists(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (B) => Boolean): Boolean", "member" : "scala.util.Either.forall", "link" : "kantan\/regex\/package$$CompileResult.html#forall(f:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: B1): Boolean", "member" : "scala.util.Either.contains", "link" : "kantan\/regex\/package$$CompileResult.html#contains[B1>:B](elem:B1):Boolean", "kind" : "final def"}, {"label" : "orElse", "tail" : "(or: => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.orElse", "link" : "kantan\/regex\/package$$CompileResult.html#orElse[A1>:A,B1>:B](or:=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(or: => B1): B1", "member" : "scala.util.Either.getOrElse", "link" : "kantan\/regex\/package$$CompileResult.html#getOrElse[B1>:B](or:=>B1):B1", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.util.Either.foreach", "link" : "kantan\/regex\/package$$CompileResult.html#foreach[U](f:B=>U):Unit", "kind" : "def"}, {"label" : "joinLeft", "tail" : "(ev: <:<[A1, Either[C, B1]]): Either[C, B1]", "member" : "scala.util.Either.joinLeft", "link" : "kantan\/regex\/package$$CompileResult.html#joinLeft[A1>:A,B1>:B,C](implicitev:A1<:<scala.util.Either[C,B1]):scala.util.Either[C,B1]", "kind" : "def"}, {"label" : "joinRight", "tail" : "(ev: <:<[B1, Either[A1, C]]): Either[A1, C]", "member" : "scala.util.Either.joinRight", "link" : "kantan\/regex\/package$$CompileResult.html#joinRight[A1>:A,B1>:B,C](implicitev:B1<:<scala.util.Either[A1,C]):scala.util.Either[A1,C]", "kind" : "def"}, {"label" : "swap", "tail" : "(): Either[B, A]", "member" : "scala.util.Either.swap", "link" : "kantan\/regex\/package$$CompileResult.html#swap:scala.util.Either[B,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (A) => C, fb: (B) => C): C", "member" : "scala.util.Either.fold", "link" : "kantan\/regex\/package$$CompileResult.html#fold[C](fa:A=>C,fb:B=>C):C", "kind" : "def"}, {"label" : "right", "tail" : "(): RightProjection[A, B]", "member" : "scala.util.Either.right", "link" : "kantan\/regex\/package$$CompileResult.html#right:scala.util.Either.RightProjection[A,B]", "kind" : "def"}, {"label" : "left", "tail" : "(): LeftProjection[A, B]", "member" : "scala.util.Either.left", "link" : "kantan\/regex\/package$$CompileResult.html#left:scala.util.Either.LeftProjection[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/regex\/package$$CompileResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/regex\/package$$CompileResult.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/regex\/package$$CompileResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/regex\/package$$CompileResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/package$$CompileResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/package$$CompileResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/package$$CompileResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/package$$CompileResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/package$$CompileResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/package$$CompileResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/package$$CompileResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$CompileResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$CompileResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$CompileResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/package$$CompileResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/package$$CompileResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/package$$CompileResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/package$$CompileResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/package$$CompileResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/package$$CompileResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/package$$CompileResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/package$$CompileResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/package$$CompileResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isRight", "tail" : "(): Boolean", "member" : "scala.util.Either.isRight", "link" : "kantan\/regex\/package$$CompileResult.html#isRight:Boolean", "kind" : "abstract def"}, {"label" : "isLeft", "tail" : "(): Boolean", "member" : "scala.util.Either.isLeft", "link" : "kantan\/regex\/package$$CompileResult.html#isLeft:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/regex\/package$$CompileResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/regex\/package$$CompileResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/regex\/package$$CompileResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/regex\/package$$CompileResult.html"}, {"name" : "kantan.regex.DecodeError", "shortDescription" : "", "object" : "kantan\/regex\/DecodeError$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/regex\/DecodeError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/regex\/DecodeError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/regex\/DecodeError.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/regex\/DecodeError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/regex\/DecodeError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/regex\/DecodeError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/regex\/DecodeError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/regex\/DecodeError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/regex\/DecodeError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/regex\/DecodeError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/regex\/DecodeError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/regex\/DecodeError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/regex\/DecodeError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/regex\/DecodeError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/regex\/DecodeError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/regex\/DecodeError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/regex\/DecodeError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/DecodeError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/DecodeError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/DecodeError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/DecodeError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/DecodeError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/DecodeError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/DecodeError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/DecodeError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/DecodeError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/DecodeError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/DecodeError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/DecodeError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/DecodeError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/DecodeError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/DecodeError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/DecodeError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/DecodeError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/DecodeError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/regex\/DecodeError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/regex\/DecodeError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/regex\/DecodeError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "TypeError", "tail" : "", "member" : "kantan.regex.DecodeError.TypeError", "link" : "kantan\/regex\/DecodeError$.html#TypeError", "kind" : "object"}, {"label" : "TypeError", "tail" : "", "member" : "kantan.regex.DecodeError.TypeError", "link" : "kantan\/regex\/DecodeError$.html#TypeErrorextendsDecodeErrorwithProductwithSerializable", "kind" : "sealed case class"}, {"label" : "NoSuchGroupId", "tail" : "", "member" : "kantan.regex.DecodeError.NoSuchGroupId", "link" : "kantan\/regex\/DecodeError$.html#NoSuchGroupIdextendsDecodeErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "EmptyGroup", "tail" : "", "member" : "kantan.regex.DecodeError.EmptyGroup", "link" : "kantan\/regex\/DecodeError$.html#EmptyGroup", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/DecodeError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/DecodeError$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/DecodeError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/DecodeError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/DecodeError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/DecodeError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/DecodeError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/DecodeError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/DecodeError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/DecodeError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/DecodeError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/DecodeError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/DecodeError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/DecodeError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/DecodeError$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/DecodeError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/DecodeError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/DecodeError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/DecodeError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/regex\/DecodeError.html", "kind" : "class"}, {"name" : "kantan.regex.DecodeResult", "shortDescription" : "Provides construction methods for DecodeResult.", "object" : "kantan\/regex\/DecodeResult$.html", "members_object" : [{"label" : "emptyGroup", "tail" : ": DecodeResult[Nothing]", "member" : "kantan.regex.DecodeResult.emptyGroup", "link" : "kantan\/regex\/DecodeResult$.html#emptyGroup:kantan.regex.DecodeResult[Nothing]", "kind" : "val"}, {"label" : "noSuchGroupId", "tail" : "(id: Int): DecodeResult[Nothing]", "member" : "kantan.regex.DecodeResult.noSuchGroupId", "link" : "kantan\/regex\/DecodeResult$.html#noSuchGroupId(id:Int):kantan.regex.DecodeResult[Nothing]", "kind" : "def"}, {"label" : "typeError", "tail" : "(e: Exception): DecodeResult[Nothing]", "member" : "kantan.regex.DecodeResult.typeError", "link" : "kantan\/regex\/DecodeResult$.html#typeError(e:Exception):kantan.regex.DecodeResult[Nothing]", "kind" : "def"}, {"label" : "typeError", "tail" : "(str: String): DecodeResult[Nothing]", "member" : "kantan.regex.DecodeResult.typeError", "link" : "kantan\/regex\/DecodeResult$.html#typeError(str:String):kantan.regex.DecodeResult[Nothing]", "kind" : "def"}, {"label" : "fromThrowable", "tail" : "(t: Throwable): TypeError", "member" : "kantan.regex.DecodeResult.fromThrowable", "link" : "kantan\/regex\/DecodeResult$.html#fromThrowable(t:Throwable):kantan.regex.DecodeError.TypeError", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/regex\/DecodeResult$.html#fromTry[S](t:scala.util.Try[S]):Either[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: => S): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/regex\/DecodeResult$.html#apply[S](s:=>S):Either[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: DecodeError): Either[DecodeError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/regex\/DecodeResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[DecodeError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/regex\/DecodeResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[DecodeError, S]])(bf: BuildFrom[M[Either[DecodeError, S]], S, M[S]]): Either[DecodeError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/regex\/DecodeResult$.html#sequence[S,M<:<?>](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/DecodeResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/DecodeResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/DecodeResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/DecodeResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/DecodeResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/DecodeResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/DecodeResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/DecodeResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/DecodeResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/DecodeResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/DecodeResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/DecodeResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/DecodeResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/DecodeResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/DecodeResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/DecodeResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/DecodeResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/DecodeResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/DecodeResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "toTry", "tail" : "(ev: <:<[A, Throwable]): Try[B]", "member" : "scala.util.Either.toTry", "link" : "kantan\/regex\/package$$DecodeResult.html#toTry(implicitev:A<:<Throwable):scala.util.Try[B]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[B]", "member" : "scala.util.Either.toOption", "link" : "kantan\/regex\/package$$DecodeResult.html#toOption:Option[B]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.util.Either.toSeq", "link" : "kantan\/regex\/package$$DecodeResult.html#toSeq:Seq[B]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (B) => Boolean, zero: => A1): Either[A1, B]", "member" : "scala.util.Either.filterOrElse", "link" : "kantan\/regex\/package$$DecodeResult.html#filterOrElse[A1>:A](p:B=>Boolean,zero:=>A1):scala.util.Either[A1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B1): Either[A, B1]", "member" : "scala.util.Either.map", "link" : "kantan\/regex\/package$$DecodeResult.html#map[B1](f:B=>B1):scala.util.Either[A,B1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[B, Either[A1, B1]]): Either[A1, B1]", "member" : "scala.util.Either.flatten", "link" : "kantan\/regex\/package$$DecodeResult.html#flatten[A1>:A,B1](implicitev:B<:<scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.flatMap", "link" : "kantan\/regex\/package$$DecodeResult.html#flatMap[A1>:A,B1](f:B=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.util.Either.exists", "link" : "kantan\/regex\/package$$DecodeResult.html#exists(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (B) => Boolean): Boolean", "member" : "scala.util.Either.forall", "link" : "kantan\/regex\/package$$DecodeResult.html#forall(f:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: B1): Boolean", "member" : "scala.util.Either.contains", "link" : "kantan\/regex\/package$$DecodeResult.html#contains[B1>:B](elem:B1):Boolean", "kind" : "final def"}, {"label" : "orElse", "tail" : "(or: => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.orElse", "link" : "kantan\/regex\/package$$DecodeResult.html#orElse[A1>:A,B1>:B](or:=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(or: => B1): B1", "member" : "scala.util.Either.getOrElse", "link" : "kantan\/regex\/package$$DecodeResult.html#getOrElse[B1>:B](or:=>B1):B1", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.util.Either.foreach", "link" : "kantan\/regex\/package$$DecodeResult.html#foreach[U](f:B=>U):Unit", "kind" : "def"}, {"label" : "joinLeft", "tail" : "(ev: <:<[A1, Either[C, B1]]): Either[C, B1]", "member" : "scala.util.Either.joinLeft", "link" : "kantan\/regex\/package$$DecodeResult.html#joinLeft[A1>:A,B1>:B,C](implicitev:A1<:<scala.util.Either[C,B1]):scala.util.Either[C,B1]", "kind" : "def"}, {"label" : "joinRight", "tail" : "(ev: <:<[B1, Either[A1, C]]): Either[A1, C]", "member" : "scala.util.Either.joinRight", "link" : "kantan\/regex\/package$$DecodeResult.html#joinRight[A1>:A,B1>:B,C](implicitev:B1<:<scala.util.Either[A1,C]):scala.util.Either[A1,C]", "kind" : "def"}, {"label" : "swap", "tail" : "(): Either[B, A]", "member" : "scala.util.Either.swap", "link" : "kantan\/regex\/package$$DecodeResult.html#swap:scala.util.Either[B,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (A) => C, fb: (B) => C): C", "member" : "scala.util.Either.fold", "link" : "kantan\/regex\/package$$DecodeResult.html#fold[C](fa:A=>C,fb:B=>C):C", "kind" : "def"}, {"label" : "right", "tail" : "(): RightProjection[A, B]", "member" : "scala.util.Either.right", "link" : "kantan\/regex\/package$$DecodeResult.html#right:scala.util.Either.RightProjection[A,B]", "kind" : "def"}, {"label" : "left", "tail" : "(): LeftProjection[A, B]", "member" : "scala.util.Either.left", "link" : "kantan\/regex\/package$$DecodeResult.html#left:scala.util.Either.LeftProjection[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/regex\/package$$DecodeResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/regex\/package$$DecodeResult.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/regex\/package$$DecodeResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/regex\/package$$DecodeResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/package$$DecodeResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/package$$DecodeResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/package$$DecodeResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/package$$DecodeResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/package$$DecodeResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/package$$DecodeResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/package$$DecodeResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$DecodeResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$DecodeResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$DecodeResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/package$$DecodeResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/package$$DecodeResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/package$$DecodeResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/package$$DecodeResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/package$$DecodeResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/package$$DecodeResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/package$$DecodeResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/package$$DecodeResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/package$$DecodeResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isRight", "tail" : "(): Boolean", "member" : "scala.util.Either.isRight", "link" : "kantan\/regex\/package$$DecodeResult.html#isRight:Boolean", "kind" : "abstract def"}, {"label" : "isLeft", "tail" : "(): Boolean", "member" : "scala.util.Either.isLeft", "link" : "kantan\/regex\/package$$DecodeResult.html#isLeft:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/regex\/package$$DecodeResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/regex\/package$$DecodeResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/regex\/package$$DecodeResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/regex\/package$$DecodeResult.html"}, {"name" : "kantan.regex.GeneratedMatchDecoders", "trait" : "kantan\/regex\/GeneratedMatchDecoders.html", "kind" : "trait", "members_trait" : [{"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21], arg21: GroupDecoder[A22]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(implicitevidence$738:kantan.regex.GroupDecoder[A1],implicitevidence$739:kantan.regex.GroupDecoder[A2],implicitevidence$740:kantan.regex.GroupDecoder[A3],implicitevidence$741:kantan.regex.GroupDecoder[A4],implicitevidence$742:kantan.regex.GroupDecoder[A5],implicitevidence$743:kantan.regex.GroupDecoder[A6],implicitevidence$744:kantan.regex.GroupDecoder[A7],implicitevidence$745:kantan.regex.GroupDecoder[A8],implicitevidence$746:kantan.regex.GroupDecoder[A9],implicitevidence$747:kantan.regex.GroupDecoder[A10],implicitevidence$748:kantan.regex.GroupDecoder[A11],implicitevidence$749:kantan.regex.GroupDecoder[A12],implicitevidence$750:kantan.regex.GroupDecoder[A13],implicitevidence$751:kantan.regex.GroupDecoder[A14],implicitevidence$752:kantan.regex.GroupDecoder[A15],implicitevidence$753:kantan.regex.GroupDecoder[A16],implicitevidence$754:kantan.regex.GroupDecoder[A17],implicitevidence$755:kantan.regex.GroupDecoder[A18],implicitevidence$756:kantan.regex.GroupDecoder[A19],implicitevidence$757:kantan.regex.GroupDecoder[A20],implicitevidence$758:kantan.regex.GroupDecoder[A21],implicitevidence$759:kantan.regex.GroupDecoder[A22]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(implicitevidence$717:kantan.regex.GroupDecoder[A1],implicitevidence$718:kantan.regex.GroupDecoder[A2],implicitevidence$719:kantan.regex.GroupDecoder[A3],implicitevidence$720:kantan.regex.GroupDecoder[A4],implicitevidence$721:kantan.regex.GroupDecoder[A5],implicitevidence$722:kantan.regex.GroupDecoder[A6],implicitevidence$723:kantan.regex.GroupDecoder[A7],implicitevidence$724:kantan.regex.GroupDecoder[A8],implicitevidence$725:kantan.regex.GroupDecoder[A9],implicitevidence$726:kantan.regex.GroupDecoder[A10],implicitevidence$727:kantan.regex.GroupDecoder[A11],implicitevidence$728:kantan.regex.GroupDecoder[A12],implicitevidence$729:kantan.regex.GroupDecoder[A13],implicitevidence$730:kantan.regex.GroupDecoder[A14],implicitevidence$731:kantan.regex.GroupDecoder[A15],implicitevidence$732:kantan.regex.GroupDecoder[A16],implicitevidence$733:kantan.regex.GroupDecoder[A17],implicitevidence$734:kantan.regex.GroupDecoder[A18],implicitevidence$735:kantan.regex.GroupDecoder[A19],implicitevidence$736:kantan.regex.GroupDecoder[A20],implicitevidence$737:kantan.regex.GroupDecoder[A21]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(implicitevidence$697:kantan.regex.GroupDecoder[A1],implicitevidence$698:kantan.regex.GroupDecoder[A2],implicitevidence$699:kantan.regex.GroupDecoder[A3],implicitevidence$700:kantan.regex.GroupDecoder[A4],implicitevidence$701:kantan.regex.GroupDecoder[A5],implicitevidence$702:kantan.regex.GroupDecoder[A6],implicitevidence$703:kantan.regex.GroupDecoder[A7],implicitevidence$704:kantan.regex.GroupDecoder[A8],implicitevidence$705:kantan.regex.GroupDecoder[A9],implicitevidence$706:kantan.regex.GroupDecoder[A10],implicitevidence$707:kantan.regex.GroupDecoder[A11],implicitevidence$708:kantan.regex.GroupDecoder[A12],implicitevidence$709:kantan.regex.GroupDecoder[A13],implicitevidence$710:kantan.regex.GroupDecoder[A14],implicitevidence$711:kantan.regex.GroupDecoder[A15],implicitevidence$712:kantan.regex.GroupDecoder[A16],implicitevidence$713:kantan.regex.GroupDecoder[A17],implicitevidence$714:kantan.regex.GroupDecoder[A18],implicitevidence$715:kantan.regex.GroupDecoder[A19],implicitevidence$716:kantan.regex.GroupDecoder[A20]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(implicitevidence$678:kantan.regex.GroupDecoder[A1],implicitevidence$679:kantan.regex.GroupDecoder[A2],implicitevidence$680:kantan.regex.GroupDecoder[A3],implicitevidence$681:kantan.regex.GroupDecoder[A4],implicitevidence$682:kantan.regex.GroupDecoder[A5],implicitevidence$683:kantan.regex.GroupDecoder[A6],implicitevidence$684:kantan.regex.GroupDecoder[A7],implicitevidence$685:kantan.regex.GroupDecoder[A8],implicitevidence$686:kantan.regex.GroupDecoder[A9],implicitevidence$687:kantan.regex.GroupDecoder[A10],implicitevidence$688:kantan.regex.GroupDecoder[A11],implicitevidence$689:kantan.regex.GroupDecoder[A12],implicitevidence$690:kantan.regex.GroupDecoder[A13],implicitevidence$691:kantan.regex.GroupDecoder[A14],implicitevidence$692:kantan.regex.GroupDecoder[A15],implicitevidence$693:kantan.regex.GroupDecoder[A16],implicitevidence$694:kantan.regex.GroupDecoder[A17],implicitevidence$695:kantan.regex.GroupDecoder[A18],implicitevidence$696:kantan.regex.GroupDecoder[A19]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(implicitevidence$660:kantan.regex.GroupDecoder[A1],implicitevidence$661:kantan.regex.GroupDecoder[A2],implicitevidence$662:kantan.regex.GroupDecoder[A3],implicitevidence$663:kantan.regex.GroupDecoder[A4],implicitevidence$664:kantan.regex.GroupDecoder[A5],implicitevidence$665:kantan.regex.GroupDecoder[A6],implicitevidence$666:kantan.regex.GroupDecoder[A7],implicitevidence$667:kantan.regex.GroupDecoder[A8],implicitevidence$668:kantan.regex.GroupDecoder[A9],implicitevidence$669:kantan.regex.GroupDecoder[A10],implicitevidence$670:kantan.regex.GroupDecoder[A11],implicitevidence$671:kantan.regex.GroupDecoder[A12],implicitevidence$672:kantan.regex.GroupDecoder[A13],implicitevidence$673:kantan.regex.GroupDecoder[A14],implicitevidence$674:kantan.regex.GroupDecoder[A15],implicitevidence$675:kantan.regex.GroupDecoder[A16],implicitevidence$676:kantan.regex.GroupDecoder[A17],implicitevidence$677:kantan.regex.GroupDecoder[A18]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(implicitevidence$643:kantan.regex.GroupDecoder[A1],implicitevidence$644:kantan.regex.GroupDecoder[A2],implicitevidence$645:kantan.regex.GroupDecoder[A3],implicitevidence$646:kantan.regex.GroupDecoder[A4],implicitevidence$647:kantan.regex.GroupDecoder[A5],implicitevidence$648:kantan.regex.GroupDecoder[A6],implicitevidence$649:kantan.regex.GroupDecoder[A7],implicitevidence$650:kantan.regex.GroupDecoder[A8],implicitevidence$651:kantan.regex.GroupDecoder[A9],implicitevidence$652:kantan.regex.GroupDecoder[A10],implicitevidence$653:kantan.regex.GroupDecoder[A11],implicitevidence$654:kantan.regex.GroupDecoder[A12],implicitevidence$655:kantan.regex.GroupDecoder[A13],implicitevidence$656:kantan.regex.GroupDecoder[A14],implicitevidence$657:kantan.regex.GroupDecoder[A15],implicitevidence$658:kantan.regex.GroupDecoder[A16],implicitevidence$659:kantan.regex.GroupDecoder[A17]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(implicitevidence$627:kantan.regex.GroupDecoder[A1],implicitevidence$628:kantan.regex.GroupDecoder[A2],implicitevidence$629:kantan.regex.GroupDecoder[A3],implicitevidence$630:kantan.regex.GroupDecoder[A4],implicitevidence$631:kantan.regex.GroupDecoder[A5],implicitevidence$632:kantan.regex.GroupDecoder[A6],implicitevidence$633:kantan.regex.GroupDecoder[A7],implicitevidence$634:kantan.regex.GroupDecoder[A8],implicitevidence$635:kantan.regex.GroupDecoder[A9],implicitevidence$636:kantan.regex.GroupDecoder[A10],implicitevidence$637:kantan.regex.GroupDecoder[A11],implicitevidence$638:kantan.regex.GroupDecoder[A12],implicitevidence$639:kantan.regex.GroupDecoder[A13],implicitevidence$640:kantan.regex.GroupDecoder[A14],implicitevidence$641:kantan.regex.GroupDecoder[A15],implicitevidence$642:kantan.regex.GroupDecoder[A16]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(implicitevidence$612:kantan.regex.GroupDecoder[A1],implicitevidence$613:kantan.regex.GroupDecoder[A2],implicitevidence$614:kantan.regex.GroupDecoder[A3],implicitevidence$615:kantan.regex.GroupDecoder[A4],implicitevidence$616:kantan.regex.GroupDecoder[A5],implicitevidence$617:kantan.regex.GroupDecoder[A6],implicitevidence$618:kantan.regex.GroupDecoder[A7],implicitevidence$619:kantan.regex.GroupDecoder[A8],implicitevidence$620:kantan.regex.GroupDecoder[A9],implicitevidence$621:kantan.regex.GroupDecoder[A10],implicitevidence$622:kantan.regex.GroupDecoder[A11],implicitevidence$623:kantan.regex.GroupDecoder[A12],implicitevidence$624:kantan.regex.GroupDecoder[A13],implicitevidence$625:kantan.regex.GroupDecoder[A14],implicitevidence$626:kantan.regex.GroupDecoder[A15]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(implicitevidence$598:kantan.regex.GroupDecoder[A1],implicitevidence$599:kantan.regex.GroupDecoder[A2],implicitevidence$600:kantan.regex.GroupDecoder[A3],implicitevidence$601:kantan.regex.GroupDecoder[A4],implicitevidence$602:kantan.regex.GroupDecoder[A5],implicitevidence$603:kantan.regex.GroupDecoder[A6],implicitevidence$604:kantan.regex.GroupDecoder[A7],implicitevidence$605:kantan.regex.GroupDecoder[A8],implicitevidence$606:kantan.regex.GroupDecoder[A9],implicitevidence$607:kantan.regex.GroupDecoder[A10],implicitevidence$608:kantan.regex.GroupDecoder[A11],implicitevidence$609:kantan.regex.GroupDecoder[A12],implicitevidence$610:kantan.regex.GroupDecoder[A13],implicitevidence$611:kantan.regex.GroupDecoder[A14]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(implicitevidence$585:kantan.regex.GroupDecoder[A1],implicitevidence$586:kantan.regex.GroupDecoder[A2],implicitevidence$587:kantan.regex.GroupDecoder[A3],implicitevidence$588:kantan.regex.GroupDecoder[A4],implicitevidence$589:kantan.regex.GroupDecoder[A5],implicitevidence$590:kantan.regex.GroupDecoder[A6],implicitevidence$591:kantan.regex.GroupDecoder[A7],implicitevidence$592:kantan.regex.GroupDecoder[A8],implicitevidence$593:kantan.regex.GroupDecoder[A9],implicitevidence$594:kantan.regex.GroupDecoder[A10],implicitevidence$595:kantan.regex.GroupDecoder[A11],implicitevidence$596:kantan.regex.GroupDecoder[A12],implicitevidence$597:kantan.regex.GroupDecoder[A13]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(implicitevidence$573:kantan.regex.GroupDecoder[A1],implicitevidence$574:kantan.regex.GroupDecoder[A2],implicitevidence$575:kantan.regex.GroupDecoder[A3],implicitevidence$576:kantan.regex.GroupDecoder[A4],implicitevidence$577:kantan.regex.GroupDecoder[A5],implicitevidence$578:kantan.regex.GroupDecoder[A6],implicitevidence$579:kantan.regex.GroupDecoder[A7],implicitevidence$580:kantan.regex.GroupDecoder[A8],implicitevidence$581:kantan.regex.GroupDecoder[A9],implicitevidence$582:kantan.regex.GroupDecoder[A10],implicitevidence$583:kantan.regex.GroupDecoder[A11],implicitevidence$584:kantan.regex.GroupDecoder[A12]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(implicitevidence$562:kantan.regex.GroupDecoder[A1],implicitevidence$563:kantan.regex.GroupDecoder[A2],implicitevidence$564:kantan.regex.GroupDecoder[A3],implicitevidence$565:kantan.regex.GroupDecoder[A4],implicitevidence$566:kantan.regex.GroupDecoder[A5],implicitevidence$567:kantan.regex.GroupDecoder[A6],implicitevidence$568:kantan.regex.GroupDecoder[A7],implicitevidence$569:kantan.regex.GroupDecoder[A8],implicitevidence$570:kantan.regex.GroupDecoder[A9],implicitevidence$571:kantan.regex.GroupDecoder[A10],implicitevidence$572:kantan.regex.GroupDecoder[A11]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(implicitevidence$552:kantan.regex.GroupDecoder[A1],implicitevidence$553:kantan.regex.GroupDecoder[A2],implicitevidence$554:kantan.regex.GroupDecoder[A3],implicitevidence$555:kantan.regex.GroupDecoder[A4],implicitevidence$556:kantan.regex.GroupDecoder[A5],implicitevidence$557:kantan.regex.GroupDecoder[A6],implicitevidence$558:kantan.regex.GroupDecoder[A7],implicitevidence$559:kantan.regex.GroupDecoder[A8],implicitevidence$560:kantan.regex.GroupDecoder[A9],implicitevidence$561:kantan.regex.GroupDecoder[A10]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(implicitevidence$543:kantan.regex.GroupDecoder[A1],implicitevidence$544:kantan.regex.GroupDecoder[A2],implicitevidence$545:kantan.regex.GroupDecoder[A3],implicitevidence$546:kantan.regex.GroupDecoder[A4],implicitevidence$547:kantan.regex.GroupDecoder[A5],implicitevidence$548:kantan.regex.GroupDecoder[A6],implicitevidence$549:kantan.regex.GroupDecoder[A7],implicitevidence$550:kantan.regex.GroupDecoder[A8],implicitevidence$551:kantan.regex.GroupDecoder[A9]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(implicitevidence$535:kantan.regex.GroupDecoder[A1],implicitevidence$536:kantan.regex.GroupDecoder[A2],implicitevidence$537:kantan.regex.GroupDecoder[A3],implicitevidence$538:kantan.regex.GroupDecoder[A4],implicitevidence$539:kantan.regex.GroupDecoder[A5],implicitevidence$540:kantan.regex.GroupDecoder[A6],implicitevidence$541:kantan.regex.GroupDecoder[A7],implicitevidence$542:kantan.regex.GroupDecoder[A8]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6,A7](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(implicitevidence$528:kantan.regex.GroupDecoder[A1],implicitevidence$529:kantan.regex.GroupDecoder[A2],implicitevidence$530:kantan.regex.GroupDecoder[A3],implicitevidence$531:kantan.regex.GroupDecoder[A4],implicitevidence$532:kantan.regex.GroupDecoder[A5],implicitevidence$533:kantan.regex.GroupDecoder[A6],implicitevidence$534:kantan.regex.GroupDecoder[A7]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6]): MatchDecoder[(A1, A2, A3, A4, A5, A6)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5,A6](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(implicitevidence$522:kantan.regex.GroupDecoder[A1],implicitevidence$523:kantan.regex.GroupDecoder[A2],implicitevidence$524:kantan.regex.GroupDecoder[A3],implicitevidence$525:kantan.regex.GroupDecoder[A4],implicitevidence$526:kantan.regex.GroupDecoder[A5],implicitevidence$527:kantan.regex.GroupDecoder[A6]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5]): MatchDecoder[(A1, A2, A3, A4, A5)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4,A5](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(implicitevidence$517:kantan.regex.GroupDecoder[A1],implicitevidence$518:kantan.regex.GroupDecoder[A2],implicitevidence$519:kantan.regex.GroupDecoder[A3],implicitevidence$520:kantan.regex.GroupDecoder[A4],implicitevidence$521:kantan.regex.GroupDecoder[A5]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4]): MatchDecoder[(A1, A2, A3, A4)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3,A4](i1:Int,i2:Int,i3:Int,i4:Int)(implicitevidence$513:kantan.regex.GroupDecoder[A1],implicitevidence$514:kantan.regex.GroupDecoder[A2],implicitevidence$515:kantan.regex.GroupDecoder[A3],implicitevidence$516:kantan.regex.GroupDecoder[A4]):kantan.regex.MatchDecoder[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3]): MatchDecoder[(A1, A2, A3)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2,A3](i1:Int,i2:Int,i3:Int)(implicitevidence$510:kantan.regex.GroupDecoder[A1],implicitevidence$511:kantan.regex.GroupDecoder[A2],implicitevidence$512:kantan.regex.GroupDecoder[A3]):kantan.regex.MatchDecoder[(A1,A2,A3)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2]): MatchDecoder[(A1, A2)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1,A2](i1:Int,i2:Int)(implicitevidence$508:kantan.regex.GroupDecoder[A1],implicitevidence$509:kantan.regex.GroupDecoder[A2]):kantan.regex.MatchDecoder[(A1,A2)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int)(arg0: GroupDecoder[A1]): MatchDecoder[(A1)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#tuple[A1](i1:Int)(implicitevidence$507:kantan.regex.GroupDecoder[A1]):kantan.regex.MatchDecoder[(A1,)]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21], arg21: GroupDecoder[A22]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>O)(implicitevidence$485:kantan.regex.GroupDecoder[A1],implicitevidence$486:kantan.regex.GroupDecoder[A2],implicitevidence$487:kantan.regex.GroupDecoder[A3],implicitevidence$488:kantan.regex.GroupDecoder[A4],implicitevidence$489:kantan.regex.GroupDecoder[A5],implicitevidence$490:kantan.regex.GroupDecoder[A6],implicitevidence$491:kantan.regex.GroupDecoder[A7],implicitevidence$492:kantan.regex.GroupDecoder[A8],implicitevidence$493:kantan.regex.GroupDecoder[A9],implicitevidence$494:kantan.regex.GroupDecoder[A10],implicitevidence$495:kantan.regex.GroupDecoder[A11],implicitevidence$496:kantan.regex.GroupDecoder[A12],implicitevidence$497:kantan.regex.GroupDecoder[A13],implicitevidence$498:kantan.regex.GroupDecoder[A14],implicitevidence$499:kantan.regex.GroupDecoder[A15],implicitevidence$500:kantan.regex.GroupDecoder[A16],implicitevidence$501:kantan.regex.GroupDecoder[A17],implicitevidence$502:kantan.regex.GroupDecoder[A18],implicitevidence$503:kantan.regex.GroupDecoder[A19],implicitevidence$504:kantan.regex.GroupDecoder[A20],implicitevidence$505:kantan.regex.GroupDecoder[A21],implicitevidence$506:kantan.regex.GroupDecoder[A22]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21], arg21: GroupDecoder[A22]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>O)(implicitevidence$463:kantan.regex.GroupDecoder[A1],implicitevidence$464:kantan.regex.GroupDecoder[A2],implicitevidence$465:kantan.regex.GroupDecoder[A3],implicitevidence$466:kantan.regex.GroupDecoder[A4],implicitevidence$467:kantan.regex.GroupDecoder[A5],implicitevidence$468:kantan.regex.GroupDecoder[A6],implicitevidence$469:kantan.regex.GroupDecoder[A7],implicitevidence$470:kantan.regex.GroupDecoder[A8],implicitevidence$471:kantan.regex.GroupDecoder[A9],implicitevidence$472:kantan.regex.GroupDecoder[A10],implicitevidence$473:kantan.regex.GroupDecoder[A11],implicitevidence$474:kantan.regex.GroupDecoder[A12],implicitevidence$475:kantan.regex.GroupDecoder[A13],implicitevidence$476:kantan.regex.GroupDecoder[A14],implicitevidence$477:kantan.regex.GroupDecoder[A15],implicitevidence$478:kantan.regex.GroupDecoder[A16],implicitevidence$479:kantan.regex.GroupDecoder[A17],implicitevidence$480:kantan.regex.GroupDecoder[A18],implicitevidence$481:kantan.regex.GroupDecoder[A19],implicitevidence$482:kantan.regex.GroupDecoder[A20],implicitevidence$483:kantan.regex.GroupDecoder[A21],implicitevidence$484:kantan.regex.GroupDecoder[A22]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>O)(implicitevidence$442:kantan.regex.GroupDecoder[A1],implicitevidence$443:kantan.regex.GroupDecoder[A2],implicitevidence$444:kantan.regex.GroupDecoder[A3],implicitevidence$445:kantan.regex.GroupDecoder[A4],implicitevidence$446:kantan.regex.GroupDecoder[A5],implicitevidence$447:kantan.regex.GroupDecoder[A6],implicitevidence$448:kantan.regex.GroupDecoder[A7],implicitevidence$449:kantan.regex.GroupDecoder[A8],implicitevidence$450:kantan.regex.GroupDecoder[A9],implicitevidence$451:kantan.regex.GroupDecoder[A10],implicitevidence$452:kantan.regex.GroupDecoder[A11],implicitevidence$453:kantan.regex.GroupDecoder[A12],implicitevidence$454:kantan.regex.GroupDecoder[A13],implicitevidence$455:kantan.regex.GroupDecoder[A14],implicitevidence$456:kantan.regex.GroupDecoder[A15],implicitevidence$457:kantan.regex.GroupDecoder[A16],implicitevidence$458:kantan.regex.GroupDecoder[A17],implicitevidence$459:kantan.regex.GroupDecoder[A18],implicitevidence$460:kantan.regex.GroupDecoder[A19],implicitevidence$461:kantan.regex.GroupDecoder[A20],implicitevidence$462:kantan.regex.GroupDecoder[A21]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>O)(implicitevidence$421:kantan.regex.GroupDecoder[A1],implicitevidence$422:kantan.regex.GroupDecoder[A2],implicitevidence$423:kantan.regex.GroupDecoder[A3],implicitevidence$424:kantan.regex.GroupDecoder[A4],implicitevidence$425:kantan.regex.GroupDecoder[A5],implicitevidence$426:kantan.regex.GroupDecoder[A6],implicitevidence$427:kantan.regex.GroupDecoder[A7],implicitevidence$428:kantan.regex.GroupDecoder[A8],implicitevidence$429:kantan.regex.GroupDecoder[A9],implicitevidence$430:kantan.regex.GroupDecoder[A10],implicitevidence$431:kantan.regex.GroupDecoder[A11],implicitevidence$432:kantan.regex.GroupDecoder[A12],implicitevidence$433:kantan.regex.GroupDecoder[A13],implicitevidence$434:kantan.regex.GroupDecoder[A14],implicitevidence$435:kantan.regex.GroupDecoder[A15],implicitevidence$436:kantan.regex.GroupDecoder[A16],implicitevidence$437:kantan.regex.GroupDecoder[A17],implicitevidence$438:kantan.regex.GroupDecoder[A18],implicitevidence$439:kantan.regex.GroupDecoder[A19],implicitevidence$440:kantan.regex.GroupDecoder[A20],implicitevidence$441:kantan.regex.GroupDecoder[A21]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>O)(implicitevidence$401:kantan.regex.GroupDecoder[A1],implicitevidence$402:kantan.regex.GroupDecoder[A2],implicitevidence$403:kantan.regex.GroupDecoder[A3],implicitevidence$404:kantan.regex.GroupDecoder[A4],implicitevidence$405:kantan.regex.GroupDecoder[A5],implicitevidence$406:kantan.regex.GroupDecoder[A6],implicitevidence$407:kantan.regex.GroupDecoder[A7],implicitevidence$408:kantan.regex.GroupDecoder[A8],implicitevidence$409:kantan.regex.GroupDecoder[A9],implicitevidence$410:kantan.regex.GroupDecoder[A10],implicitevidence$411:kantan.regex.GroupDecoder[A11],implicitevidence$412:kantan.regex.GroupDecoder[A12],implicitevidence$413:kantan.regex.GroupDecoder[A13],implicitevidence$414:kantan.regex.GroupDecoder[A14],implicitevidence$415:kantan.regex.GroupDecoder[A15],implicitevidence$416:kantan.regex.GroupDecoder[A16],implicitevidence$417:kantan.regex.GroupDecoder[A17],implicitevidence$418:kantan.regex.GroupDecoder[A18],implicitevidence$419:kantan.regex.GroupDecoder[A19],implicitevidence$420:kantan.regex.GroupDecoder[A20]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>O)(implicitevidence$381:kantan.regex.GroupDecoder[A1],implicitevidence$382:kantan.regex.GroupDecoder[A2],implicitevidence$383:kantan.regex.GroupDecoder[A3],implicitevidence$384:kantan.regex.GroupDecoder[A4],implicitevidence$385:kantan.regex.GroupDecoder[A5],implicitevidence$386:kantan.regex.GroupDecoder[A6],implicitevidence$387:kantan.regex.GroupDecoder[A7],implicitevidence$388:kantan.regex.GroupDecoder[A8],implicitevidence$389:kantan.regex.GroupDecoder[A9],implicitevidence$390:kantan.regex.GroupDecoder[A10],implicitevidence$391:kantan.regex.GroupDecoder[A11],implicitevidence$392:kantan.regex.GroupDecoder[A12],implicitevidence$393:kantan.regex.GroupDecoder[A13],implicitevidence$394:kantan.regex.GroupDecoder[A14],implicitevidence$395:kantan.regex.GroupDecoder[A15],implicitevidence$396:kantan.regex.GroupDecoder[A16],implicitevidence$397:kantan.regex.GroupDecoder[A17],implicitevidence$398:kantan.regex.GroupDecoder[A18],implicitevidence$399:kantan.regex.GroupDecoder[A19],implicitevidence$400:kantan.regex.GroupDecoder[A20]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>O)(implicitevidence$362:kantan.regex.GroupDecoder[A1],implicitevidence$363:kantan.regex.GroupDecoder[A2],implicitevidence$364:kantan.regex.GroupDecoder[A3],implicitevidence$365:kantan.regex.GroupDecoder[A4],implicitevidence$366:kantan.regex.GroupDecoder[A5],implicitevidence$367:kantan.regex.GroupDecoder[A6],implicitevidence$368:kantan.regex.GroupDecoder[A7],implicitevidence$369:kantan.regex.GroupDecoder[A8],implicitevidence$370:kantan.regex.GroupDecoder[A9],implicitevidence$371:kantan.regex.GroupDecoder[A10],implicitevidence$372:kantan.regex.GroupDecoder[A11],implicitevidence$373:kantan.regex.GroupDecoder[A12],implicitevidence$374:kantan.regex.GroupDecoder[A13],implicitevidence$375:kantan.regex.GroupDecoder[A14],implicitevidence$376:kantan.regex.GroupDecoder[A15],implicitevidence$377:kantan.regex.GroupDecoder[A16],implicitevidence$378:kantan.regex.GroupDecoder[A17],implicitevidence$379:kantan.regex.GroupDecoder[A18],implicitevidence$380:kantan.regex.GroupDecoder[A19]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>O)(implicitevidence$343:kantan.regex.GroupDecoder[A1],implicitevidence$344:kantan.regex.GroupDecoder[A2],implicitevidence$345:kantan.regex.GroupDecoder[A3],implicitevidence$346:kantan.regex.GroupDecoder[A4],implicitevidence$347:kantan.regex.GroupDecoder[A5],implicitevidence$348:kantan.regex.GroupDecoder[A6],implicitevidence$349:kantan.regex.GroupDecoder[A7],implicitevidence$350:kantan.regex.GroupDecoder[A8],implicitevidence$351:kantan.regex.GroupDecoder[A9],implicitevidence$352:kantan.regex.GroupDecoder[A10],implicitevidence$353:kantan.regex.GroupDecoder[A11],implicitevidence$354:kantan.regex.GroupDecoder[A12],implicitevidence$355:kantan.regex.GroupDecoder[A13],implicitevidence$356:kantan.regex.GroupDecoder[A14],implicitevidence$357:kantan.regex.GroupDecoder[A15],implicitevidence$358:kantan.regex.GroupDecoder[A16],implicitevidence$359:kantan.regex.GroupDecoder[A17],implicitevidence$360:kantan.regex.GroupDecoder[A18],implicitevidence$361:kantan.regex.GroupDecoder[A19]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>O)(implicitevidence$325:kantan.regex.GroupDecoder[A1],implicitevidence$326:kantan.regex.GroupDecoder[A2],implicitevidence$327:kantan.regex.GroupDecoder[A3],implicitevidence$328:kantan.regex.GroupDecoder[A4],implicitevidence$329:kantan.regex.GroupDecoder[A5],implicitevidence$330:kantan.regex.GroupDecoder[A6],implicitevidence$331:kantan.regex.GroupDecoder[A7],implicitevidence$332:kantan.regex.GroupDecoder[A8],implicitevidence$333:kantan.regex.GroupDecoder[A9],implicitevidence$334:kantan.regex.GroupDecoder[A10],implicitevidence$335:kantan.regex.GroupDecoder[A11],implicitevidence$336:kantan.regex.GroupDecoder[A12],implicitevidence$337:kantan.regex.GroupDecoder[A13],implicitevidence$338:kantan.regex.GroupDecoder[A14],implicitevidence$339:kantan.regex.GroupDecoder[A15],implicitevidence$340:kantan.regex.GroupDecoder[A16],implicitevidence$341:kantan.regex.GroupDecoder[A17],implicitevidence$342:kantan.regex.GroupDecoder[A18]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>O)(implicitevidence$307:kantan.regex.GroupDecoder[A1],implicitevidence$308:kantan.regex.GroupDecoder[A2],implicitevidence$309:kantan.regex.GroupDecoder[A3],implicitevidence$310:kantan.regex.GroupDecoder[A4],implicitevidence$311:kantan.regex.GroupDecoder[A5],implicitevidence$312:kantan.regex.GroupDecoder[A6],implicitevidence$313:kantan.regex.GroupDecoder[A7],implicitevidence$314:kantan.regex.GroupDecoder[A8],implicitevidence$315:kantan.regex.GroupDecoder[A9],implicitevidence$316:kantan.regex.GroupDecoder[A10],implicitevidence$317:kantan.regex.GroupDecoder[A11],implicitevidence$318:kantan.regex.GroupDecoder[A12],implicitevidence$319:kantan.regex.GroupDecoder[A13],implicitevidence$320:kantan.regex.GroupDecoder[A14],implicitevidence$321:kantan.regex.GroupDecoder[A15],implicitevidence$322:kantan.regex.GroupDecoder[A16],implicitevidence$323:kantan.regex.GroupDecoder[A17],implicitevidence$324:kantan.regex.GroupDecoder[A18]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>O)(implicitevidence$290:kantan.regex.GroupDecoder[A1],implicitevidence$291:kantan.regex.GroupDecoder[A2],implicitevidence$292:kantan.regex.GroupDecoder[A3],implicitevidence$293:kantan.regex.GroupDecoder[A4],implicitevidence$294:kantan.regex.GroupDecoder[A5],implicitevidence$295:kantan.regex.GroupDecoder[A6],implicitevidence$296:kantan.regex.GroupDecoder[A7],implicitevidence$297:kantan.regex.GroupDecoder[A8],implicitevidence$298:kantan.regex.GroupDecoder[A9],implicitevidence$299:kantan.regex.GroupDecoder[A10],implicitevidence$300:kantan.regex.GroupDecoder[A11],implicitevidence$301:kantan.regex.GroupDecoder[A12],implicitevidence$302:kantan.regex.GroupDecoder[A13],implicitevidence$303:kantan.regex.GroupDecoder[A14],implicitevidence$304:kantan.regex.GroupDecoder[A15],implicitevidence$305:kantan.regex.GroupDecoder[A16],implicitevidence$306:kantan.regex.GroupDecoder[A17]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>O)(implicitevidence$273:kantan.regex.GroupDecoder[A1],implicitevidence$274:kantan.regex.GroupDecoder[A2],implicitevidence$275:kantan.regex.GroupDecoder[A3],implicitevidence$276:kantan.regex.GroupDecoder[A4],implicitevidence$277:kantan.regex.GroupDecoder[A5],implicitevidence$278:kantan.regex.GroupDecoder[A6],implicitevidence$279:kantan.regex.GroupDecoder[A7],implicitevidence$280:kantan.regex.GroupDecoder[A8],implicitevidence$281:kantan.regex.GroupDecoder[A9],implicitevidence$282:kantan.regex.GroupDecoder[A10],implicitevidence$283:kantan.regex.GroupDecoder[A11],implicitevidence$284:kantan.regex.GroupDecoder[A12],implicitevidence$285:kantan.regex.GroupDecoder[A13],implicitevidence$286:kantan.regex.GroupDecoder[A14],implicitevidence$287:kantan.regex.GroupDecoder[A15],implicitevidence$288:kantan.regex.GroupDecoder[A16],implicitevidence$289:kantan.regex.GroupDecoder[A17]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>O)(implicitevidence$257:kantan.regex.GroupDecoder[A1],implicitevidence$258:kantan.regex.GroupDecoder[A2],implicitevidence$259:kantan.regex.GroupDecoder[A3],implicitevidence$260:kantan.regex.GroupDecoder[A4],implicitevidence$261:kantan.regex.GroupDecoder[A5],implicitevidence$262:kantan.regex.GroupDecoder[A6],implicitevidence$263:kantan.regex.GroupDecoder[A7],implicitevidence$264:kantan.regex.GroupDecoder[A8],implicitevidence$265:kantan.regex.GroupDecoder[A9],implicitevidence$266:kantan.regex.GroupDecoder[A10],implicitevidence$267:kantan.regex.GroupDecoder[A11],implicitevidence$268:kantan.regex.GroupDecoder[A12],implicitevidence$269:kantan.regex.GroupDecoder[A13],implicitevidence$270:kantan.regex.GroupDecoder[A14],implicitevidence$271:kantan.regex.GroupDecoder[A15],implicitevidence$272:kantan.regex.GroupDecoder[A16]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>O)(implicitevidence$241:kantan.regex.GroupDecoder[A1],implicitevidence$242:kantan.regex.GroupDecoder[A2],implicitevidence$243:kantan.regex.GroupDecoder[A3],implicitevidence$244:kantan.regex.GroupDecoder[A4],implicitevidence$245:kantan.regex.GroupDecoder[A5],implicitevidence$246:kantan.regex.GroupDecoder[A6],implicitevidence$247:kantan.regex.GroupDecoder[A7],implicitevidence$248:kantan.regex.GroupDecoder[A8],implicitevidence$249:kantan.regex.GroupDecoder[A9],implicitevidence$250:kantan.regex.GroupDecoder[A10],implicitevidence$251:kantan.regex.GroupDecoder[A11],implicitevidence$252:kantan.regex.GroupDecoder[A12],implicitevidence$253:kantan.regex.GroupDecoder[A13],implicitevidence$254:kantan.regex.GroupDecoder[A14],implicitevidence$255:kantan.regex.GroupDecoder[A15],implicitevidence$256:kantan.regex.GroupDecoder[A16]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>O)(implicitevidence$226:kantan.regex.GroupDecoder[A1],implicitevidence$227:kantan.regex.GroupDecoder[A2],implicitevidence$228:kantan.regex.GroupDecoder[A3],implicitevidence$229:kantan.regex.GroupDecoder[A4],implicitevidence$230:kantan.regex.GroupDecoder[A5],implicitevidence$231:kantan.regex.GroupDecoder[A6],implicitevidence$232:kantan.regex.GroupDecoder[A7],implicitevidence$233:kantan.regex.GroupDecoder[A8],implicitevidence$234:kantan.regex.GroupDecoder[A9],implicitevidence$235:kantan.regex.GroupDecoder[A10],implicitevidence$236:kantan.regex.GroupDecoder[A11],implicitevidence$237:kantan.regex.GroupDecoder[A12],implicitevidence$238:kantan.regex.GroupDecoder[A13],implicitevidence$239:kantan.regex.GroupDecoder[A14],implicitevidence$240:kantan.regex.GroupDecoder[A15]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>O)(implicitevidence$211:kantan.regex.GroupDecoder[A1],implicitevidence$212:kantan.regex.GroupDecoder[A2],implicitevidence$213:kantan.regex.GroupDecoder[A3],implicitevidence$214:kantan.regex.GroupDecoder[A4],implicitevidence$215:kantan.regex.GroupDecoder[A5],implicitevidence$216:kantan.regex.GroupDecoder[A6],implicitevidence$217:kantan.regex.GroupDecoder[A7],implicitevidence$218:kantan.regex.GroupDecoder[A8],implicitevidence$219:kantan.regex.GroupDecoder[A9],implicitevidence$220:kantan.regex.GroupDecoder[A10],implicitevidence$221:kantan.regex.GroupDecoder[A11],implicitevidence$222:kantan.regex.GroupDecoder[A12],implicitevidence$223:kantan.regex.GroupDecoder[A13],implicitevidence$224:kantan.regex.GroupDecoder[A14],implicitevidence$225:kantan.regex.GroupDecoder[A15]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>O)(implicitevidence$197:kantan.regex.GroupDecoder[A1],implicitevidence$198:kantan.regex.GroupDecoder[A2],implicitevidence$199:kantan.regex.GroupDecoder[A3],implicitevidence$200:kantan.regex.GroupDecoder[A4],implicitevidence$201:kantan.regex.GroupDecoder[A5],implicitevidence$202:kantan.regex.GroupDecoder[A6],implicitevidence$203:kantan.regex.GroupDecoder[A7],implicitevidence$204:kantan.regex.GroupDecoder[A8],implicitevidence$205:kantan.regex.GroupDecoder[A9],implicitevidence$206:kantan.regex.GroupDecoder[A10],implicitevidence$207:kantan.regex.GroupDecoder[A11],implicitevidence$208:kantan.regex.GroupDecoder[A12],implicitevidence$209:kantan.regex.GroupDecoder[A13],implicitevidence$210:kantan.regex.GroupDecoder[A14]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>O)(implicitevidence$183:kantan.regex.GroupDecoder[A1],implicitevidence$184:kantan.regex.GroupDecoder[A2],implicitevidence$185:kantan.regex.GroupDecoder[A3],implicitevidence$186:kantan.regex.GroupDecoder[A4],implicitevidence$187:kantan.regex.GroupDecoder[A5],implicitevidence$188:kantan.regex.GroupDecoder[A6],implicitevidence$189:kantan.regex.GroupDecoder[A7],implicitevidence$190:kantan.regex.GroupDecoder[A8],implicitevidence$191:kantan.regex.GroupDecoder[A9],implicitevidence$192:kantan.regex.GroupDecoder[A10],implicitevidence$193:kantan.regex.GroupDecoder[A11],implicitevidence$194:kantan.regex.GroupDecoder[A12],implicitevidence$195:kantan.regex.GroupDecoder[A13],implicitevidence$196:kantan.regex.GroupDecoder[A14]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>O)(implicitevidence$170:kantan.regex.GroupDecoder[A1],implicitevidence$171:kantan.regex.GroupDecoder[A2],implicitevidence$172:kantan.regex.GroupDecoder[A3],implicitevidence$173:kantan.regex.GroupDecoder[A4],implicitevidence$174:kantan.regex.GroupDecoder[A5],implicitevidence$175:kantan.regex.GroupDecoder[A6],implicitevidence$176:kantan.regex.GroupDecoder[A7],implicitevidence$177:kantan.regex.GroupDecoder[A8],implicitevidence$178:kantan.regex.GroupDecoder[A9],implicitevidence$179:kantan.regex.GroupDecoder[A10],implicitevidence$180:kantan.regex.GroupDecoder[A11],implicitevidence$181:kantan.regex.GroupDecoder[A12],implicitevidence$182:kantan.regex.GroupDecoder[A13]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>O)(implicitevidence$157:kantan.regex.GroupDecoder[A1],implicitevidence$158:kantan.regex.GroupDecoder[A2],implicitevidence$159:kantan.regex.GroupDecoder[A3],implicitevidence$160:kantan.regex.GroupDecoder[A4],implicitevidence$161:kantan.regex.GroupDecoder[A5],implicitevidence$162:kantan.regex.GroupDecoder[A6],implicitevidence$163:kantan.regex.GroupDecoder[A7],implicitevidence$164:kantan.regex.GroupDecoder[A8],implicitevidence$165:kantan.regex.GroupDecoder[A9],implicitevidence$166:kantan.regex.GroupDecoder[A10],implicitevidence$167:kantan.regex.GroupDecoder[A11],implicitevidence$168:kantan.regex.GroupDecoder[A12],implicitevidence$169:kantan.regex.GroupDecoder[A13]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>O)(implicitevidence$145:kantan.regex.GroupDecoder[A1],implicitevidence$146:kantan.regex.GroupDecoder[A2],implicitevidence$147:kantan.regex.GroupDecoder[A3],implicitevidence$148:kantan.regex.GroupDecoder[A4],implicitevidence$149:kantan.regex.GroupDecoder[A5],implicitevidence$150:kantan.regex.GroupDecoder[A6],implicitevidence$151:kantan.regex.GroupDecoder[A7],implicitevidence$152:kantan.regex.GroupDecoder[A8],implicitevidence$153:kantan.regex.GroupDecoder[A9],implicitevidence$154:kantan.regex.GroupDecoder[A10],implicitevidence$155:kantan.regex.GroupDecoder[A11],implicitevidence$156:kantan.regex.GroupDecoder[A12]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>O)(implicitevidence$133:kantan.regex.GroupDecoder[A1],implicitevidence$134:kantan.regex.GroupDecoder[A2],implicitevidence$135:kantan.regex.GroupDecoder[A3],implicitevidence$136:kantan.regex.GroupDecoder[A4],implicitevidence$137:kantan.regex.GroupDecoder[A5],implicitevidence$138:kantan.regex.GroupDecoder[A6],implicitevidence$139:kantan.regex.GroupDecoder[A7],implicitevidence$140:kantan.regex.GroupDecoder[A8],implicitevidence$141:kantan.regex.GroupDecoder[A9],implicitevidence$142:kantan.regex.GroupDecoder[A10],implicitevidence$143:kantan.regex.GroupDecoder[A11],implicitevidence$144:kantan.regex.GroupDecoder[A12]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>O)(implicitevidence$122:kantan.regex.GroupDecoder[A1],implicitevidence$123:kantan.regex.GroupDecoder[A2],implicitevidence$124:kantan.regex.GroupDecoder[A3],implicitevidence$125:kantan.regex.GroupDecoder[A4],implicitevidence$126:kantan.regex.GroupDecoder[A5],implicitevidence$127:kantan.regex.GroupDecoder[A6],implicitevidence$128:kantan.regex.GroupDecoder[A7],implicitevidence$129:kantan.regex.GroupDecoder[A8],implicitevidence$130:kantan.regex.GroupDecoder[A9],implicitevidence$131:kantan.regex.GroupDecoder[A10],implicitevidence$132:kantan.regex.GroupDecoder[A11]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>O)(implicitevidence$111:kantan.regex.GroupDecoder[A1],implicitevidence$112:kantan.regex.GroupDecoder[A2],implicitevidence$113:kantan.regex.GroupDecoder[A3],implicitevidence$114:kantan.regex.GroupDecoder[A4],implicitevidence$115:kantan.regex.GroupDecoder[A5],implicitevidence$116:kantan.regex.GroupDecoder[A6],implicitevidence$117:kantan.regex.GroupDecoder[A7],implicitevidence$118:kantan.regex.GroupDecoder[A8],implicitevidence$119:kantan.regex.GroupDecoder[A9],implicitevidence$120:kantan.regex.GroupDecoder[A10],implicitevidence$121:kantan.regex.GroupDecoder[A11]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>O)(implicitevidence$101:kantan.regex.GroupDecoder[A1],implicitevidence$102:kantan.regex.GroupDecoder[A2],implicitevidence$103:kantan.regex.GroupDecoder[A3],implicitevidence$104:kantan.regex.GroupDecoder[A4],implicitevidence$105:kantan.regex.GroupDecoder[A5],implicitevidence$106:kantan.regex.GroupDecoder[A6],implicitevidence$107:kantan.regex.GroupDecoder[A7],implicitevidence$108:kantan.regex.GroupDecoder[A8],implicitevidence$109:kantan.regex.GroupDecoder[A9],implicitevidence$110:kantan.regex.GroupDecoder[A10]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>O)(implicitevidence$91:kantan.regex.GroupDecoder[A1],implicitevidence$92:kantan.regex.GroupDecoder[A2],implicitevidence$93:kantan.regex.GroupDecoder[A3],implicitevidence$94:kantan.regex.GroupDecoder[A4],implicitevidence$95:kantan.regex.GroupDecoder[A5],implicitevidence$96:kantan.regex.GroupDecoder[A6],implicitevidence$97:kantan.regex.GroupDecoder[A7],implicitevidence$98:kantan.regex.GroupDecoder[A8],implicitevidence$99:kantan.regex.GroupDecoder[A9],implicitevidence$100:kantan.regex.GroupDecoder[A10]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>O)(implicitevidence$82:kantan.regex.GroupDecoder[A1],implicitevidence$83:kantan.regex.GroupDecoder[A2],implicitevidence$84:kantan.regex.GroupDecoder[A3],implicitevidence$85:kantan.regex.GroupDecoder[A4],implicitevidence$86:kantan.regex.GroupDecoder[A5],implicitevidence$87:kantan.regex.GroupDecoder[A6],implicitevidence$88:kantan.regex.GroupDecoder[A7],implicitevidence$89:kantan.regex.GroupDecoder[A8],implicitevidence$90:kantan.regex.GroupDecoder[A9]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>O)(implicitevidence$73:kantan.regex.GroupDecoder[A1],implicitevidence$74:kantan.regex.GroupDecoder[A2],implicitevidence$75:kantan.regex.GroupDecoder[A3],implicitevidence$76:kantan.regex.GroupDecoder[A4],implicitevidence$77:kantan.regex.GroupDecoder[A5],implicitevidence$78:kantan.regex.GroupDecoder[A6],implicitevidence$79:kantan.regex.GroupDecoder[A7],implicitevidence$80:kantan.regex.GroupDecoder[A8],implicitevidence$81:kantan.regex.GroupDecoder[A9]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,O](f:(A1,A2,A3,A4,A5,A6,A7,A8)=>O)(implicitevidence$65:kantan.regex.GroupDecoder[A1],implicitevidence$66:kantan.regex.GroupDecoder[A2],implicitevidence$67:kantan.regex.GroupDecoder[A3],implicitevidence$68:kantan.regex.GroupDecoder[A4],implicitevidence$69:kantan.regex.GroupDecoder[A5],implicitevidence$70:kantan.regex.GroupDecoder[A6],implicitevidence$71:kantan.regex.GroupDecoder[A7],implicitevidence$72:kantan.regex.GroupDecoder[A8]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>O)(implicitevidence$57:kantan.regex.GroupDecoder[A1],implicitevidence$58:kantan.regex.GroupDecoder[A2],implicitevidence$59:kantan.regex.GroupDecoder[A3],implicitevidence$60:kantan.regex.GroupDecoder[A4],implicitevidence$61:kantan.regex.GroupDecoder[A5],implicitevidence$62:kantan.regex.GroupDecoder[A6],implicitevidence$63:kantan.regex.GroupDecoder[A7],implicitevidence$64:kantan.regex.GroupDecoder[A8]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,A7,O](f:(A1,A2,A3,A4,A5,A6,A7)=>O)(implicitevidence$50:kantan.regex.GroupDecoder[A1],implicitevidence$51:kantan.regex.GroupDecoder[A2],implicitevidence$52:kantan.regex.GroupDecoder[A3],implicitevidence$53:kantan.regex.GroupDecoder[A4],implicitevidence$54:kantan.regex.GroupDecoder[A5],implicitevidence$55:kantan.regex.GroupDecoder[A6],implicitevidence$56:kantan.regex.GroupDecoder[A7]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (A1, A2, A3, A4, A5, A6, A7) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:(A1,A2,A3,A4,A5,A6,A7)=>O)(implicitevidence$43:kantan.regex.GroupDecoder[A1],implicitevidence$44:kantan.regex.GroupDecoder[A2],implicitevidence$45:kantan.regex.GroupDecoder[A3],implicitevidence$46:kantan.regex.GroupDecoder[A4],implicitevidence$47:kantan.regex.GroupDecoder[A5],implicitevidence$48:kantan.regex.GroupDecoder[A6],implicitevidence$49:kantan.regex.GroupDecoder[A7]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,A6,O](f:(A1,A2,A3,A4,A5,A6)=>O)(implicitevidence$37:kantan.regex.GroupDecoder[A1],implicitevidence$38:kantan.regex.GroupDecoder[A2],implicitevidence$39:kantan.regex.GroupDecoder[A3],implicitevidence$40:kantan.regex.GroupDecoder[A4],implicitevidence$41:kantan.regex.GroupDecoder[A5],implicitevidence$42:kantan.regex.GroupDecoder[A6]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (A1, A2, A3, A4, A5, A6) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,A6,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:(A1,A2,A3,A4,A5,A6)=>O)(implicitevidence$31:kantan.regex.GroupDecoder[A1],implicitevidence$32:kantan.regex.GroupDecoder[A2],implicitevidence$33:kantan.regex.GroupDecoder[A3],implicitevidence$34:kantan.regex.GroupDecoder[A4],implicitevidence$35:kantan.regex.GroupDecoder[A5],implicitevidence$36:kantan.regex.GroupDecoder[A6]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,A5,O](f:(A1,A2,A3,A4,A5)=>O)(implicitevidence$26:kantan.regex.GroupDecoder[A1],implicitevidence$27:kantan.regex.GroupDecoder[A2],implicitevidence$28:kantan.regex.GroupDecoder[A3],implicitevidence$29:kantan.regex.GroupDecoder[A4],implicitevidence$30:kantan.regex.GroupDecoder[A5]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (A1, A2, A3, A4, A5) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,A5,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:(A1,A2,A3,A4,A5)=>O)(implicitevidence$21:kantan.regex.GroupDecoder[A1],implicitevidence$22:kantan.regex.GroupDecoder[A2],implicitevidence$23:kantan.regex.GroupDecoder[A3],implicitevidence$24:kantan.regex.GroupDecoder[A4],implicitevidence$25:kantan.regex.GroupDecoder[A5]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,A4,O](f:(A1,A2,A3,A4)=>O)(implicitevidence$17:kantan.regex.GroupDecoder[A1],implicitevidence$18:kantan.regex.GroupDecoder[A2],implicitevidence$19:kantan.regex.GroupDecoder[A3],implicitevidence$20:kantan.regex.GroupDecoder[A4]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (A1, A2, A3, A4) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,A4,O](i1:Int,i2:Int,i3:Int,i4:Int)(f:(A1,A2,A3,A4)=>O)(implicitevidence$13:kantan.regex.GroupDecoder[A1],implicitevidence$14:kantan.regex.GroupDecoder[A2],implicitevidence$15:kantan.regex.GroupDecoder[A3],implicitevidence$16:kantan.regex.GroupDecoder[A4]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,A3,O](f:(A1,A2,A3)=>O)(implicitevidence$10:kantan.regex.GroupDecoder[A1],implicitevidence$11:kantan.regex.GroupDecoder[A2],implicitevidence$12:kantan.regex.GroupDecoder[A3]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (A1, A2, A3) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,A3,O](i1:Int,i2:Int,i3:Int)(f:(A1,A2,A3)=>O)(implicitevidence$7:kantan.regex.GroupDecoder[A1],implicitevidence$8:kantan.regex.GroupDecoder[A2],implicitevidence$9:kantan.regex.GroupDecoder[A3]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,A2,O](f:(A1,A2)=>O)(implicitevidence$5:kantan.regex.GroupDecoder[A1],implicitevidence$6:kantan.regex.GroupDecoder[A2]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int)(f: (A1, A2) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,A2,O](i1:Int,i2:Int)(f:(A1,A2)=>O)(implicitevidence$3:kantan.regex.GroupDecoder[A1],implicitevidence$4:kantan.regex.GroupDecoder[A2]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1) => O)(arg0: GroupDecoder[A1]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ordered[A1,O](f:A1=>O)(implicitevidence$2:kantan.regex.GroupDecoder[A1]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int)(f: (A1) => O)(arg0: GroupDecoder[A1]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#decoder[A1,O](i1:Int)(f:A1=>O)(implicitevidence$1:kantan.regex.GroupDecoder[A1]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/GeneratedMatchDecoders.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/GeneratedMatchDecoders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.regex.GroupDecoder", "shortDescription" : "Provides instance creation and summoning methods for GroupDecoder.", "object" : "kantan\/regex\/GroupDecoder$.html", "members_object" : [{"label" : "dateDecoder", "tail" : "(format: DateFormat): GroupDecoder[Date]", "member" : "kantan.regex.PlatformSpecificInstances.dateDecoder", "link" : "kantan\/regex\/GroupDecoder$.html#dateDecoder(format:java.text.DateFormat):kantan.regex.GroupDecoder[java.util.Date]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(ds: Decoder[Option[String], D, DecodeError, codecs.type]*)(i: IsError[DecodeError]): Decoder[Option[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.oneOf", "link" : "kantan\/regex\/GroupDecoder$.html#oneOf[D](ds:kantan.codecs.Decoder[E,D,F,T]*)(impliciti:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromPartial", "tail" : "(f: PartialFunction[Option[String], Either[DecodeError, D]])(t: IsError[DecodeError]): Decoder[Option[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromPartial", "link" : "kantan\/regex\/GroupDecoder$.html#fromPartial[D](f:PartialFunction[E,Either[F,D]])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromUnsafe", "tail" : "(f: (Option[String]) => D)(t: IsError[DecodeError]): Decoder[Option[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromUnsafe", "link" : "kantan\/regex\/GroupDecoder$.html#fromUnsafe[D](f:E=>D)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (Option[String]) => Either[DecodeError, D]): Decoder[Option[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.from", "link" : "kantan\/regex\/GroupDecoder$.html#from[D](f:E=>Either[F,D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Decoder[Option[String], D, DecodeError, codecs.type]): Decoder[Option[String], D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.apply", "link" : "kantan\/regex\/GroupDecoder$.html#apply[D](implicitev:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/GroupDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/GroupDecoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/GroupDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/GroupDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/GroupDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/GroupDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/GroupDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/GroupDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/GroupDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/GroupDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/GroupDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/GroupDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/GroupDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/GroupDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/GroupDecoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/GroupDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/GroupDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/GroupDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/GroupDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "product", "tail" : "(decoder: Decoder[E, DD, F, T]): Decoder[E, (D, DD), F, T]", "member" : "kantan.codecs.Decoder.product", "link" : "kantan\/regex\/package$$GroupDecoder.html#product[DD](decoder:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,(D,DD),F,T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (D) => Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.flatMap", "link" : "kantan\/regex\/package$$GroupDecoder.html#flatMap[DD](f:D=>kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "tag", "tail" : "(): Decoder[E, D, F, TT]", "member" : "kantan.codecs.Decoder.tag", "link" : "kantan\/regex\/package$$GroupDecoder.html#tag[TT]:kantan.codecs.Decoder[E,D,F,TT]", "kind" : "def"}, {"label" : "contramapEncoded", "tail" : "(f: (EE) => E): Decoder[EE, D, F, T]", "member" : "kantan.codecs.Decoder.contramapEncoded", "link" : "kantan\/regex\/package$$GroupDecoder.html#contramapEncoded[EE](f:EE=>E):kantan.codecs.Decoder[EE,D,F,T]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.leftMap", "link" : "kantan\/regex\/package$$GroupDecoder.html#leftMap[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.mapError", "link" : "kantan\/regex\/package$$GroupDecoder.html#mapError[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (D) => Boolean)(t: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.filter", "link" : "kantan\/regex\/package$$GroupDecoder.html#filter(f:D=>Boolean)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[D, DD])(t: IsError[F]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.collect", "link" : "kantan\/regex\/package$$GroupDecoder.html#collect[DD](f:PartialFunction[D,DD])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.emap", "link" : "kantan\/regex\/package$$GroupDecoder.html#emap[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.mapResult", "link" : "kantan\/regex\/package$$GroupDecoder.html#mapResult[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (D) => DD): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.map", "link" : "kantan\/regex\/package$$GroupDecoder.html#map[DD](f:D=>DD):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (F) => Decoder[E, D, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.handleErrorWith", "link" : "kantan\/regex\/package$$GroupDecoder.html#handleErrorWith(f:F=>kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[F, Either[FF, DD]]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.recoverWith", "link" : "kantan\/regex\/package$$GroupDecoder.html#recoverWith[DD>:D,FF>:F](pf:PartialFunction[F,Either[FF,DD]]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.recover", "link" : "kantan\/regex\/package$$GroupDecoder.html#recover[DD>:D](pf:PartialFunction[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: (Either[F, D]) => Either[FF, DD]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.andThen", "link" : "kantan\/regex\/package$$GroupDecoder.html#andThen[FF,DD](f:Either[F,D]=>Either[FF,DD]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "orElse", "tail" : "(d: Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.orElse", "link" : "kantan\/regex\/package$$GroupDecoder.html#orElse[DD>:D](d:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "unsafeDecode", "tail" : "(e: E): D", "member" : "kantan.codecs.Decoder.unsafeDecode", "link" : "kantan\/regex\/package$$GroupDecoder.html#unsafeDecode(e:E):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/package$$GroupDecoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/package$$GroupDecoder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/package$$GroupDecoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/package$$GroupDecoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/package$$GroupDecoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/package$$GroupDecoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/package$$GroupDecoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$GroupDecoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$GroupDecoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$GroupDecoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/package$$GroupDecoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/package$$GroupDecoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/package$$GroupDecoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/package$$GroupDecoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/package$$GroupDecoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/package$$GroupDecoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/package$$GroupDecoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/package$$GroupDecoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/package$$GroupDecoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decode", "tail" : "(e: E): Either[F, D]", "member" : "kantan.codecs.Decoder.decode", "link" : "kantan\/regex\/package$$GroupDecoder.html#decode(e:E):Either[F,D]", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/regex\/package$$GroupDecoder.html"}, {"name" : "kantan.regex.GroupDecoderInstances", "trait" : "kantan\/regex\/GroupDecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "eitherGroupDecoder", "tail" : "(arg0: GroupDecoder[A], arg1: GroupDecoder[B]): GroupDecoder[Either[A, B]]", "member" : "kantan.regex.GroupDecoderInstances.eitherGroupDecoder", "link" : "kantan\/regex\/GroupDecoderInstances.html#eitherGroupDecoder[A,B](implicitevidence$3:kantan.regex.GroupDecoder[A],implicitevidence$4:kantan.regex.GroupDecoder[B]):kantan.regex.GroupDecoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "optGroupDecoder", "tail" : "(arg0: GroupDecoder[A]): GroupDecoder[Option[A]]", "member" : "kantan.regex.GroupDecoderInstances.optGroupDecoder", "link" : "kantan\/regex\/GroupDecoderInstances.html#optGroupDecoder[A](implicitevidence$2:kantan.regex.GroupDecoder[A]):kantan.regex.GroupDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "fromString", "tail" : "(arg0: StringDecoder[A]): GroupDecoder[A]", "member" : "kantan.regex.GroupDecoderInstances.fromString", "link" : "kantan\/regex\/GroupDecoderInstances.html#fromString[A](implicitevidence$1:kantan.codecs.strings.StringDecoder[A]):kantan.regex.GroupDecoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/GroupDecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/GroupDecoderInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/GroupDecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/GroupDecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/GroupDecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/GroupDecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/GroupDecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/GroupDecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/GroupDecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/GroupDecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/GroupDecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/GroupDecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/GroupDecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/GroupDecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/GroupDecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/GroupDecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/GroupDecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/GroupDecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/GroupDecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Declares all default GroupDecoder instances."}, {"name" : "kantan.regex.implicits", "shortDescription" : "Provides a convenient way to bring syntax and literals in scope with a single import.", "object" : "kantan\/regex\/implicits$.html", "members_object" : [{"label" : "toRegexCompilerOps", "tail" : "(a: A)(arg0: Compiler[A]): CompilerOps[A]", "member" : "kantan.regex.ops.ToCompilerOps.toRegexCompilerOps", "link" : "kantan\/regex\/implicits$.html#toRegexCompilerOps[A](a:A)(implicitevidence$6:kantan.regex.Compiler[A]):kantan.regex.ops.CompilerOps[A]", "kind" : "implicit def"}, {"label" : "toRegexStringOps", "tail" : "(str: String): StringOps", "member" : "kantan.regex.ops.ToStringOps.toRegexStringOps", "link" : "kantan\/regex\/implicits$.html#toRegexStringOps(str:String):kantan.regex.ops.StringOps", "kind" : "implicit def"}, {"label" : "toRegexLiteral", "tail" : "(sc: StringContext): RegexLiteral", "member" : "kantan.regex.literals.ToRegexLiteral.toRegexLiteral", "link" : "kantan\/regex\/implicits$.html#toRegexLiteral(sc:StringContext):kantan.regex.literals.RegexLiteral", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/implicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/implicits$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/implicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/implicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/implicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/implicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/implicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/implicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/implicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/implicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/implicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/implicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/implicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/implicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/implicits$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/implicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/implicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/implicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/implicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.regex.Match", "shortDescription" : "Represents a single match in a regular expression evaluation.", "members_class" : [{"label" : "pattern", "tail" : "(): Pattern", "member" : "kantan.regex.Match.pattern", "link" : "kantan\/regex\/Match.html#pattern():kantan.regex.Pattern", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "kantan.regex.Match.toString", "link" : "kantan\/regex\/Match.html#toString():String", "kind" : "def"}, {"label" : "decode", "tail" : "(index: Int)(arg0: GroupDecoder[A]): DecodeResult[A]", "member" : "kantan.regex.Match.decode", "link" : "kantan\/regex\/Match.html#decode[A](index:Int)(implicitevidence$1:kantan.regex.GroupDecoder[A]):kantan.regex.DecodeResult[A]", "kind" : "def"}, {"label" : "length", "tail" : ": Int", "member" : "kantan.regex.Match.length", "link" : "kantan\/regex\/Match.html#length:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/Match.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/Match.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/Match.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/Match.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/Match.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/Match.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/Match.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Match.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Match.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Match.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/Match.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/Match.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/Match.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/Match.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/Match.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/Match.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/Match.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/Match.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/regex\/Match.html", "kind" : "class"}, {"name" : "kantan.regex.MatchDecoder", "shortDescription" : "Provides useful methods for MatchDecoder instance summoning and creation.", "object" : "kantan\/regex\/MatchDecoder$.html", "members_object" : [{"label" : "fromGroup", "tail" : "(index: Int)(arg0: GroupDecoder[A]): MatchDecoder[A]", "member" : "kantan.regex.MatchDecoder.fromGroup", "link" : "kantan\/regex\/MatchDecoder$.html#fromGroup[A](index:Int)(implicitevidence$1:kantan.regex.GroupDecoder[A]):kantan.regex.MatchDecoder[A]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(ds: Decoder[Match, D, DecodeError, codecs.type]*)(i: IsError[DecodeError]): Decoder[Match, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.oneOf", "link" : "kantan\/regex\/MatchDecoder$.html#oneOf[D](ds:kantan.codecs.Decoder[E,D,F,T]*)(impliciti:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromPartial", "tail" : "(f: PartialFunction[Match, Either[DecodeError, D]])(t: IsError[DecodeError]): Decoder[Match, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromPartial", "link" : "kantan\/regex\/MatchDecoder$.html#fromPartial[D](f:PartialFunction[E,Either[F,D]])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromUnsafe", "tail" : "(f: (Match) => D)(t: IsError[DecodeError]): Decoder[Match, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromUnsafe", "link" : "kantan\/regex\/MatchDecoder$.html#fromUnsafe[D](f:E=>D)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (Match) => Either[DecodeError, D]): Decoder[Match, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.from", "link" : "kantan\/regex\/MatchDecoder$.html#from[D](f:E=>Either[F,D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Decoder[Match, D, DecodeError, codecs.type]): Decoder[Match, D, DecodeError, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.apply", "link" : "kantan\/regex\/MatchDecoder$.html#apply[D](implicitev:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "macro def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21], arg21: GroupDecoder[A22]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(implicitevidence$738:kantan.regex.GroupDecoder[A1],implicitevidence$739:kantan.regex.GroupDecoder[A2],implicitevidence$740:kantan.regex.GroupDecoder[A3],implicitevidence$741:kantan.regex.GroupDecoder[A4],implicitevidence$742:kantan.regex.GroupDecoder[A5],implicitevidence$743:kantan.regex.GroupDecoder[A6],implicitevidence$744:kantan.regex.GroupDecoder[A7],implicitevidence$745:kantan.regex.GroupDecoder[A8],implicitevidence$746:kantan.regex.GroupDecoder[A9],implicitevidence$747:kantan.regex.GroupDecoder[A10],implicitevidence$748:kantan.regex.GroupDecoder[A11],implicitevidence$749:kantan.regex.GroupDecoder[A12],implicitevidence$750:kantan.regex.GroupDecoder[A13],implicitevidence$751:kantan.regex.GroupDecoder[A14],implicitevidence$752:kantan.regex.GroupDecoder[A15],implicitevidence$753:kantan.regex.GroupDecoder[A16],implicitevidence$754:kantan.regex.GroupDecoder[A17],implicitevidence$755:kantan.regex.GroupDecoder[A18],implicitevidence$756:kantan.regex.GroupDecoder[A19],implicitevidence$757:kantan.regex.GroupDecoder[A20],implicitevidence$758:kantan.regex.GroupDecoder[A21],implicitevidence$759:kantan.regex.GroupDecoder[A22]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(implicitevidence$717:kantan.regex.GroupDecoder[A1],implicitevidence$718:kantan.regex.GroupDecoder[A2],implicitevidence$719:kantan.regex.GroupDecoder[A3],implicitevidence$720:kantan.regex.GroupDecoder[A4],implicitevidence$721:kantan.regex.GroupDecoder[A5],implicitevidence$722:kantan.regex.GroupDecoder[A6],implicitevidence$723:kantan.regex.GroupDecoder[A7],implicitevidence$724:kantan.regex.GroupDecoder[A8],implicitevidence$725:kantan.regex.GroupDecoder[A9],implicitevidence$726:kantan.regex.GroupDecoder[A10],implicitevidence$727:kantan.regex.GroupDecoder[A11],implicitevidence$728:kantan.regex.GroupDecoder[A12],implicitevidence$729:kantan.regex.GroupDecoder[A13],implicitevidence$730:kantan.regex.GroupDecoder[A14],implicitevidence$731:kantan.regex.GroupDecoder[A15],implicitevidence$732:kantan.regex.GroupDecoder[A16],implicitevidence$733:kantan.regex.GroupDecoder[A17],implicitevidence$734:kantan.regex.GroupDecoder[A18],implicitevidence$735:kantan.regex.GroupDecoder[A19],implicitevidence$736:kantan.regex.GroupDecoder[A20],implicitevidence$737:kantan.regex.GroupDecoder[A21]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(implicitevidence$697:kantan.regex.GroupDecoder[A1],implicitevidence$698:kantan.regex.GroupDecoder[A2],implicitevidence$699:kantan.regex.GroupDecoder[A3],implicitevidence$700:kantan.regex.GroupDecoder[A4],implicitevidence$701:kantan.regex.GroupDecoder[A5],implicitevidence$702:kantan.regex.GroupDecoder[A6],implicitevidence$703:kantan.regex.GroupDecoder[A7],implicitevidence$704:kantan.regex.GroupDecoder[A8],implicitevidence$705:kantan.regex.GroupDecoder[A9],implicitevidence$706:kantan.regex.GroupDecoder[A10],implicitevidence$707:kantan.regex.GroupDecoder[A11],implicitevidence$708:kantan.regex.GroupDecoder[A12],implicitevidence$709:kantan.regex.GroupDecoder[A13],implicitevidence$710:kantan.regex.GroupDecoder[A14],implicitevidence$711:kantan.regex.GroupDecoder[A15],implicitevidence$712:kantan.regex.GroupDecoder[A16],implicitevidence$713:kantan.regex.GroupDecoder[A17],implicitevidence$714:kantan.regex.GroupDecoder[A18],implicitevidence$715:kantan.regex.GroupDecoder[A19],implicitevidence$716:kantan.regex.GroupDecoder[A20]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(implicitevidence$678:kantan.regex.GroupDecoder[A1],implicitevidence$679:kantan.regex.GroupDecoder[A2],implicitevidence$680:kantan.regex.GroupDecoder[A3],implicitevidence$681:kantan.regex.GroupDecoder[A4],implicitevidence$682:kantan.regex.GroupDecoder[A5],implicitevidence$683:kantan.regex.GroupDecoder[A6],implicitevidence$684:kantan.regex.GroupDecoder[A7],implicitevidence$685:kantan.regex.GroupDecoder[A8],implicitevidence$686:kantan.regex.GroupDecoder[A9],implicitevidence$687:kantan.regex.GroupDecoder[A10],implicitevidence$688:kantan.regex.GroupDecoder[A11],implicitevidence$689:kantan.regex.GroupDecoder[A12],implicitevidence$690:kantan.regex.GroupDecoder[A13],implicitevidence$691:kantan.regex.GroupDecoder[A14],implicitevidence$692:kantan.regex.GroupDecoder[A15],implicitevidence$693:kantan.regex.GroupDecoder[A16],implicitevidence$694:kantan.regex.GroupDecoder[A17],implicitevidence$695:kantan.regex.GroupDecoder[A18],implicitevidence$696:kantan.regex.GroupDecoder[A19]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(implicitevidence$660:kantan.regex.GroupDecoder[A1],implicitevidence$661:kantan.regex.GroupDecoder[A2],implicitevidence$662:kantan.regex.GroupDecoder[A3],implicitevidence$663:kantan.regex.GroupDecoder[A4],implicitevidence$664:kantan.regex.GroupDecoder[A5],implicitevidence$665:kantan.regex.GroupDecoder[A6],implicitevidence$666:kantan.regex.GroupDecoder[A7],implicitevidence$667:kantan.regex.GroupDecoder[A8],implicitevidence$668:kantan.regex.GroupDecoder[A9],implicitevidence$669:kantan.regex.GroupDecoder[A10],implicitevidence$670:kantan.regex.GroupDecoder[A11],implicitevidence$671:kantan.regex.GroupDecoder[A12],implicitevidence$672:kantan.regex.GroupDecoder[A13],implicitevidence$673:kantan.regex.GroupDecoder[A14],implicitevidence$674:kantan.regex.GroupDecoder[A15],implicitevidence$675:kantan.regex.GroupDecoder[A16],implicitevidence$676:kantan.regex.GroupDecoder[A17],implicitevidence$677:kantan.regex.GroupDecoder[A18]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(implicitevidence$643:kantan.regex.GroupDecoder[A1],implicitevidence$644:kantan.regex.GroupDecoder[A2],implicitevidence$645:kantan.regex.GroupDecoder[A3],implicitevidence$646:kantan.regex.GroupDecoder[A4],implicitevidence$647:kantan.regex.GroupDecoder[A5],implicitevidence$648:kantan.regex.GroupDecoder[A6],implicitevidence$649:kantan.regex.GroupDecoder[A7],implicitevidence$650:kantan.regex.GroupDecoder[A8],implicitevidence$651:kantan.regex.GroupDecoder[A9],implicitevidence$652:kantan.regex.GroupDecoder[A10],implicitevidence$653:kantan.regex.GroupDecoder[A11],implicitevidence$654:kantan.regex.GroupDecoder[A12],implicitevidence$655:kantan.regex.GroupDecoder[A13],implicitevidence$656:kantan.regex.GroupDecoder[A14],implicitevidence$657:kantan.regex.GroupDecoder[A15],implicitevidence$658:kantan.regex.GroupDecoder[A16],implicitevidence$659:kantan.regex.GroupDecoder[A17]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(implicitevidence$627:kantan.regex.GroupDecoder[A1],implicitevidence$628:kantan.regex.GroupDecoder[A2],implicitevidence$629:kantan.regex.GroupDecoder[A3],implicitevidence$630:kantan.regex.GroupDecoder[A4],implicitevidence$631:kantan.regex.GroupDecoder[A5],implicitevidence$632:kantan.regex.GroupDecoder[A6],implicitevidence$633:kantan.regex.GroupDecoder[A7],implicitevidence$634:kantan.regex.GroupDecoder[A8],implicitevidence$635:kantan.regex.GroupDecoder[A9],implicitevidence$636:kantan.regex.GroupDecoder[A10],implicitevidence$637:kantan.regex.GroupDecoder[A11],implicitevidence$638:kantan.regex.GroupDecoder[A12],implicitevidence$639:kantan.regex.GroupDecoder[A13],implicitevidence$640:kantan.regex.GroupDecoder[A14],implicitevidence$641:kantan.regex.GroupDecoder[A15],implicitevidence$642:kantan.regex.GroupDecoder[A16]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(implicitevidence$612:kantan.regex.GroupDecoder[A1],implicitevidence$613:kantan.regex.GroupDecoder[A2],implicitevidence$614:kantan.regex.GroupDecoder[A3],implicitevidence$615:kantan.regex.GroupDecoder[A4],implicitevidence$616:kantan.regex.GroupDecoder[A5],implicitevidence$617:kantan.regex.GroupDecoder[A6],implicitevidence$618:kantan.regex.GroupDecoder[A7],implicitevidence$619:kantan.regex.GroupDecoder[A8],implicitevidence$620:kantan.regex.GroupDecoder[A9],implicitevidence$621:kantan.regex.GroupDecoder[A10],implicitevidence$622:kantan.regex.GroupDecoder[A11],implicitevidence$623:kantan.regex.GroupDecoder[A12],implicitevidence$624:kantan.regex.GroupDecoder[A13],implicitevidence$625:kantan.regex.GroupDecoder[A14],implicitevidence$626:kantan.regex.GroupDecoder[A15]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(implicitevidence$598:kantan.regex.GroupDecoder[A1],implicitevidence$599:kantan.regex.GroupDecoder[A2],implicitevidence$600:kantan.regex.GroupDecoder[A3],implicitevidence$601:kantan.regex.GroupDecoder[A4],implicitevidence$602:kantan.regex.GroupDecoder[A5],implicitevidence$603:kantan.regex.GroupDecoder[A6],implicitevidence$604:kantan.regex.GroupDecoder[A7],implicitevidence$605:kantan.regex.GroupDecoder[A8],implicitevidence$606:kantan.regex.GroupDecoder[A9],implicitevidence$607:kantan.regex.GroupDecoder[A10],implicitevidence$608:kantan.regex.GroupDecoder[A11],implicitevidence$609:kantan.regex.GroupDecoder[A12],implicitevidence$610:kantan.regex.GroupDecoder[A13],implicitevidence$611:kantan.regex.GroupDecoder[A14]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(implicitevidence$585:kantan.regex.GroupDecoder[A1],implicitevidence$586:kantan.regex.GroupDecoder[A2],implicitevidence$587:kantan.regex.GroupDecoder[A3],implicitevidence$588:kantan.regex.GroupDecoder[A4],implicitevidence$589:kantan.regex.GroupDecoder[A5],implicitevidence$590:kantan.regex.GroupDecoder[A6],implicitevidence$591:kantan.regex.GroupDecoder[A7],implicitevidence$592:kantan.regex.GroupDecoder[A8],implicitevidence$593:kantan.regex.GroupDecoder[A9],implicitevidence$594:kantan.regex.GroupDecoder[A10],implicitevidence$595:kantan.regex.GroupDecoder[A11],implicitevidence$596:kantan.regex.GroupDecoder[A12],implicitevidence$597:kantan.regex.GroupDecoder[A13]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(implicitevidence$573:kantan.regex.GroupDecoder[A1],implicitevidence$574:kantan.regex.GroupDecoder[A2],implicitevidence$575:kantan.regex.GroupDecoder[A3],implicitevidence$576:kantan.regex.GroupDecoder[A4],implicitevidence$577:kantan.regex.GroupDecoder[A5],implicitevidence$578:kantan.regex.GroupDecoder[A6],implicitevidence$579:kantan.regex.GroupDecoder[A7],implicitevidence$580:kantan.regex.GroupDecoder[A8],implicitevidence$581:kantan.regex.GroupDecoder[A9],implicitevidence$582:kantan.regex.GroupDecoder[A10],implicitevidence$583:kantan.regex.GroupDecoder[A11],implicitevidence$584:kantan.regex.GroupDecoder[A12]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(implicitevidence$562:kantan.regex.GroupDecoder[A1],implicitevidence$563:kantan.regex.GroupDecoder[A2],implicitevidence$564:kantan.regex.GroupDecoder[A3],implicitevidence$565:kantan.regex.GroupDecoder[A4],implicitevidence$566:kantan.regex.GroupDecoder[A5],implicitevidence$567:kantan.regex.GroupDecoder[A6],implicitevidence$568:kantan.regex.GroupDecoder[A7],implicitevidence$569:kantan.regex.GroupDecoder[A8],implicitevidence$570:kantan.regex.GroupDecoder[A9],implicitevidence$571:kantan.regex.GroupDecoder[A10],implicitevidence$572:kantan.regex.GroupDecoder[A11]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(implicitevidence$552:kantan.regex.GroupDecoder[A1],implicitevidence$553:kantan.regex.GroupDecoder[A2],implicitevidence$554:kantan.regex.GroupDecoder[A3],implicitevidence$555:kantan.regex.GroupDecoder[A4],implicitevidence$556:kantan.regex.GroupDecoder[A5],implicitevidence$557:kantan.regex.GroupDecoder[A6],implicitevidence$558:kantan.regex.GroupDecoder[A7],implicitevidence$559:kantan.regex.GroupDecoder[A8],implicitevidence$560:kantan.regex.GroupDecoder[A9],implicitevidence$561:kantan.regex.GroupDecoder[A10]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8,A9](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(implicitevidence$543:kantan.regex.GroupDecoder[A1],implicitevidence$544:kantan.regex.GroupDecoder[A2],implicitevidence$545:kantan.regex.GroupDecoder[A3],implicitevidence$546:kantan.regex.GroupDecoder[A4],implicitevidence$547:kantan.regex.GroupDecoder[A5],implicitevidence$548:kantan.regex.GroupDecoder[A6],implicitevidence$549:kantan.regex.GroupDecoder[A7],implicitevidence$550:kantan.regex.GroupDecoder[A8],implicitevidence$551:kantan.regex.GroupDecoder[A9]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7,A8](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(implicitevidence$535:kantan.regex.GroupDecoder[A1],implicitevidence$536:kantan.regex.GroupDecoder[A2],implicitevidence$537:kantan.regex.GroupDecoder[A3],implicitevidence$538:kantan.regex.GroupDecoder[A4],implicitevidence$539:kantan.regex.GroupDecoder[A5],implicitevidence$540:kantan.regex.GroupDecoder[A6],implicitevidence$541:kantan.regex.GroupDecoder[A7],implicitevidence$542:kantan.regex.GroupDecoder[A8]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7]): MatchDecoder[(A1, A2, A3, A4, A5, A6, A7)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6,A7](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(implicitevidence$528:kantan.regex.GroupDecoder[A1],implicitevidence$529:kantan.regex.GroupDecoder[A2],implicitevidence$530:kantan.regex.GroupDecoder[A3],implicitevidence$531:kantan.regex.GroupDecoder[A4],implicitevidence$532:kantan.regex.GroupDecoder[A5],implicitevidence$533:kantan.regex.GroupDecoder[A6],implicitevidence$534:kantan.regex.GroupDecoder[A7]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6]): MatchDecoder[(A1, A2, A3, A4, A5, A6)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5,A6](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(implicitevidence$522:kantan.regex.GroupDecoder[A1],implicitevidence$523:kantan.regex.GroupDecoder[A2],implicitevidence$524:kantan.regex.GroupDecoder[A3],implicitevidence$525:kantan.regex.GroupDecoder[A4],implicitevidence$526:kantan.regex.GroupDecoder[A5],implicitevidence$527:kantan.regex.GroupDecoder[A6]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5]): MatchDecoder[(A1, A2, A3, A4, A5)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4,A5](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(implicitevidence$517:kantan.regex.GroupDecoder[A1],implicitevidence$518:kantan.regex.GroupDecoder[A2],implicitevidence$519:kantan.regex.GroupDecoder[A3],implicitevidence$520:kantan.regex.GroupDecoder[A4],implicitevidence$521:kantan.regex.GroupDecoder[A5]):kantan.regex.MatchDecoder[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4]): MatchDecoder[(A1, A2, A3, A4)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3,A4](i1:Int,i2:Int,i3:Int,i4:Int)(implicitevidence$513:kantan.regex.GroupDecoder[A1],implicitevidence$514:kantan.regex.GroupDecoder[A2],implicitevidence$515:kantan.regex.GroupDecoder[A3],implicitevidence$516:kantan.regex.GroupDecoder[A4]):kantan.regex.MatchDecoder[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int, i3: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3]): MatchDecoder[(A1, A2, A3)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2,A3](i1:Int,i2:Int,i3:Int)(implicitevidence$510:kantan.regex.GroupDecoder[A1],implicitevidence$511:kantan.regex.GroupDecoder[A2],implicitevidence$512:kantan.regex.GroupDecoder[A3]):kantan.regex.MatchDecoder[(A1,A2,A3)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int, i2: Int)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2]): MatchDecoder[(A1, A2)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1,A2](i1:Int,i2:Int)(implicitevidence$508:kantan.regex.GroupDecoder[A1],implicitevidence$509:kantan.regex.GroupDecoder[A2]):kantan.regex.MatchDecoder[(A1,A2)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(i1: Int)(arg0: GroupDecoder[A1]): MatchDecoder[(A1)]", "member" : "kantan.regex.GeneratedMatchDecoders.tuple", "link" : "kantan\/regex\/MatchDecoder$.html#tuple[A1](i1:Int)(implicitevidence$507:kantan.regex.GroupDecoder[A1]):kantan.regex.MatchDecoder[(A1,)]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21], arg21: GroupDecoder[A22]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>O)(implicitevidence$485:kantan.regex.GroupDecoder[A1],implicitevidence$486:kantan.regex.GroupDecoder[A2],implicitevidence$487:kantan.regex.GroupDecoder[A3],implicitevidence$488:kantan.regex.GroupDecoder[A4],implicitevidence$489:kantan.regex.GroupDecoder[A5],implicitevidence$490:kantan.regex.GroupDecoder[A6],implicitevidence$491:kantan.regex.GroupDecoder[A7],implicitevidence$492:kantan.regex.GroupDecoder[A8],implicitevidence$493:kantan.regex.GroupDecoder[A9],implicitevidence$494:kantan.regex.GroupDecoder[A10],implicitevidence$495:kantan.regex.GroupDecoder[A11],implicitevidence$496:kantan.regex.GroupDecoder[A12],implicitevidence$497:kantan.regex.GroupDecoder[A13],implicitevidence$498:kantan.regex.GroupDecoder[A14],implicitevidence$499:kantan.regex.GroupDecoder[A15],implicitevidence$500:kantan.regex.GroupDecoder[A16],implicitevidence$501:kantan.regex.GroupDecoder[A17],implicitevidence$502:kantan.regex.GroupDecoder[A18],implicitevidence$503:kantan.regex.GroupDecoder[A19],implicitevidence$504:kantan.regex.GroupDecoder[A20],implicitevidence$505:kantan.regex.GroupDecoder[A21],implicitevidence$506:kantan.regex.GroupDecoder[A22]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int, i22: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21], arg21: GroupDecoder[A22]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int,i22:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>O)(implicitevidence$463:kantan.regex.GroupDecoder[A1],implicitevidence$464:kantan.regex.GroupDecoder[A2],implicitevidence$465:kantan.regex.GroupDecoder[A3],implicitevidence$466:kantan.regex.GroupDecoder[A4],implicitevidence$467:kantan.regex.GroupDecoder[A5],implicitevidence$468:kantan.regex.GroupDecoder[A6],implicitevidence$469:kantan.regex.GroupDecoder[A7],implicitevidence$470:kantan.regex.GroupDecoder[A8],implicitevidence$471:kantan.regex.GroupDecoder[A9],implicitevidence$472:kantan.regex.GroupDecoder[A10],implicitevidence$473:kantan.regex.GroupDecoder[A11],implicitevidence$474:kantan.regex.GroupDecoder[A12],implicitevidence$475:kantan.regex.GroupDecoder[A13],implicitevidence$476:kantan.regex.GroupDecoder[A14],implicitevidence$477:kantan.regex.GroupDecoder[A15],implicitevidence$478:kantan.regex.GroupDecoder[A16],implicitevidence$479:kantan.regex.GroupDecoder[A17],implicitevidence$480:kantan.regex.GroupDecoder[A18],implicitevidence$481:kantan.regex.GroupDecoder[A19],implicitevidence$482:kantan.regex.GroupDecoder[A20],implicitevidence$483:kantan.regex.GroupDecoder[A21],implicitevidence$484:kantan.regex.GroupDecoder[A22]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>O)(implicitevidence$442:kantan.regex.GroupDecoder[A1],implicitevidence$443:kantan.regex.GroupDecoder[A2],implicitevidence$444:kantan.regex.GroupDecoder[A3],implicitevidence$445:kantan.regex.GroupDecoder[A4],implicitevidence$446:kantan.regex.GroupDecoder[A5],implicitevidence$447:kantan.regex.GroupDecoder[A6],implicitevidence$448:kantan.regex.GroupDecoder[A7],implicitevidence$449:kantan.regex.GroupDecoder[A8],implicitevidence$450:kantan.regex.GroupDecoder[A9],implicitevidence$451:kantan.regex.GroupDecoder[A10],implicitevidence$452:kantan.regex.GroupDecoder[A11],implicitevidence$453:kantan.regex.GroupDecoder[A12],implicitevidence$454:kantan.regex.GroupDecoder[A13],implicitevidence$455:kantan.regex.GroupDecoder[A14],implicitevidence$456:kantan.regex.GroupDecoder[A15],implicitevidence$457:kantan.regex.GroupDecoder[A16],implicitevidence$458:kantan.regex.GroupDecoder[A17],implicitevidence$459:kantan.regex.GroupDecoder[A18],implicitevidence$460:kantan.regex.GroupDecoder[A19],implicitevidence$461:kantan.regex.GroupDecoder[A20],implicitevidence$462:kantan.regex.GroupDecoder[A21]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int, i21: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20], arg20: GroupDecoder[A21]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int,i21:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>O)(implicitevidence$421:kantan.regex.GroupDecoder[A1],implicitevidence$422:kantan.regex.GroupDecoder[A2],implicitevidence$423:kantan.regex.GroupDecoder[A3],implicitevidence$424:kantan.regex.GroupDecoder[A4],implicitevidence$425:kantan.regex.GroupDecoder[A5],implicitevidence$426:kantan.regex.GroupDecoder[A6],implicitevidence$427:kantan.regex.GroupDecoder[A7],implicitevidence$428:kantan.regex.GroupDecoder[A8],implicitevidence$429:kantan.regex.GroupDecoder[A9],implicitevidence$430:kantan.regex.GroupDecoder[A10],implicitevidence$431:kantan.regex.GroupDecoder[A11],implicitevidence$432:kantan.regex.GroupDecoder[A12],implicitevidence$433:kantan.regex.GroupDecoder[A13],implicitevidence$434:kantan.regex.GroupDecoder[A14],implicitevidence$435:kantan.regex.GroupDecoder[A15],implicitevidence$436:kantan.regex.GroupDecoder[A16],implicitevidence$437:kantan.regex.GroupDecoder[A17],implicitevidence$438:kantan.regex.GroupDecoder[A18],implicitevidence$439:kantan.regex.GroupDecoder[A19],implicitevidence$440:kantan.regex.GroupDecoder[A20],implicitevidence$441:kantan.regex.GroupDecoder[A21]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>O)(implicitevidence$401:kantan.regex.GroupDecoder[A1],implicitevidence$402:kantan.regex.GroupDecoder[A2],implicitevidence$403:kantan.regex.GroupDecoder[A3],implicitevidence$404:kantan.regex.GroupDecoder[A4],implicitevidence$405:kantan.regex.GroupDecoder[A5],implicitevidence$406:kantan.regex.GroupDecoder[A6],implicitevidence$407:kantan.regex.GroupDecoder[A7],implicitevidence$408:kantan.regex.GroupDecoder[A8],implicitevidence$409:kantan.regex.GroupDecoder[A9],implicitevidence$410:kantan.regex.GroupDecoder[A10],implicitevidence$411:kantan.regex.GroupDecoder[A11],implicitevidence$412:kantan.regex.GroupDecoder[A12],implicitevidence$413:kantan.regex.GroupDecoder[A13],implicitevidence$414:kantan.regex.GroupDecoder[A14],implicitevidence$415:kantan.regex.GroupDecoder[A15],implicitevidence$416:kantan.regex.GroupDecoder[A16],implicitevidence$417:kantan.regex.GroupDecoder[A17],implicitevidence$418:kantan.regex.GroupDecoder[A18],implicitevidence$419:kantan.regex.GroupDecoder[A19],implicitevidence$420:kantan.regex.GroupDecoder[A20]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int, i20: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19], arg19: GroupDecoder[A20]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int,i20:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>O)(implicitevidence$381:kantan.regex.GroupDecoder[A1],implicitevidence$382:kantan.regex.GroupDecoder[A2],implicitevidence$383:kantan.regex.GroupDecoder[A3],implicitevidence$384:kantan.regex.GroupDecoder[A4],implicitevidence$385:kantan.regex.GroupDecoder[A5],implicitevidence$386:kantan.regex.GroupDecoder[A6],implicitevidence$387:kantan.regex.GroupDecoder[A7],implicitevidence$388:kantan.regex.GroupDecoder[A8],implicitevidence$389:kantan.regex.GroupDecoder[A9],implicitevidence$390:kantan.regex.GroupDecoder[A10],implicitevidence$391:kantan.regex.GroupDecoder[A11],implicitevidence$392:kantan.regex.GroupDecoder[A12],implicitevidence$393:kantan.regex.GroupDecoder[A13],implicitevidence$394:kantan.regex.GroupDecoder[A14],implicitevidence$395:kantan.regex.GroupDecoder[A15],implicitevidence$396:kantan.regex.GroupDecoder[A16],implicitevidence$397:kantan.regex.GroupDecoder[A17],implicitevidence$398:kantan.regex.GroupDecoder[A18],implicitevidence$399:kantan.regex.GroupDecoder[A19],implicitevidence$400:kantan.regex.GroupDecoder[A20]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>O)(implicitevidence$362:kantan.regex.GroupDecoder[A1],implicitevidence$363:kantan.regex.GroupDecoder[A2],implicitevidence$364:kantan.regex.GroupDecoder[A3],implicitevidence$365:kantan.regex.GroupDecoder[A4],implicitevidence$366:kantan.regex.GroupDecoder[A5],implicitevidence$367:kantan.regex.GroupDecoder[A6],implicitevidence$368:kantan.regex.GroupDecoder[A7],implicitevidence$369:kantan.regex.GroupDecoder[A8],implicitevidence$370:kantan.regex.GroupDecoder[A9],implicitevidence$371:kantan.regex.GroupDecoder[A10],implicitevidence$372:kantan.regex.GroupDecoder[A11],implicitevidence$373:kantan.regex.GroupDecoder[A12],implicitevidence$374:kantan.regex.GroupDecoder[A13],implicitevidence$375:kantan.regex.GroupDecoder[A14],implicitevidence$376:kantan.regex.GroupDecoder[A15],implicitevidence$377:kantan.regex.GroupDecoder[A16],implicitevidence$378:kantan.regex.GroupDecoder[A17],implicitevidence$379:kantan.regex.GroupDecoder[A18],implicitevidence$380:kantan.regex.GroupDecoder[A19]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int, i19: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18], arg18: GroupDecoder[A19]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int,i19:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>O)(implicitevidence$343:kantan.regex.GroupDecoder[A1],implicitevidence$344:kantan.regex.GroupDecoder[A2],implicitevidence$345:kantan.regex.GroupDecoder[A3],implicitevidence$346:kantan.regex.GroupDecoder[A4],implicitevidence$347:kantan.regex.GroupDecoder[A5],implicitevidence$348:kantan.regex.GroupDecoder[A6],implicitevidence$349:kantan.regex.GroupDecoder[A7],implicitevidence$350:kantan.regex.GroupDecoder[A8],implicitevidence$351:kantan.regex.GroupDecoder[A9],implicitevidence$352:kantan.regex.GroupDecoder[A10],implicitevidence$353:kantan.regex.GroupDecoder[A11],implicitevidence$354:kantan.regex.GroupDecoder[A12],implicitevidence$355:kantan.regex.GroupDecoder[A13],implicitevidence$356:kantan.regex.GroupDecoder[A14],implicitevidence$357:kantan.regex.GroupDecoder[A15],implicitevidence$358:kantan.regex.GroupDecoder[A16],implicitevidence$359:kantan.regex.GroupDecoder[A17],implicitevidence$360:kantan.regex.GroupDecoder[A18],implicitevidence$361:kantan.regex.GroupDecoder[A19]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>O)(implicitevidence$325:kantan.regex.GroupDecoder[A1],implicitevidence$326:kantan.regex.GroupDecoder[A2],implicitevidence$327:kantan.regex.GroupDecoder[A3],implicitevidence$328:kantan.regex.GroupDecoder[A4],implicitevidence$329:kantan.regex.GroupDecoder[A5],implicitevidence$330:kantan.regex.GroupDecoder[A6],implicitevidence$331:kantan.regex.GroupDecoder[A7],implicitevidence$332:kantan.regex.GroupDecoder[A8],implicitevidence$333:kantan.regex.GroupDecoder[A9],implicitevidence$334:kantan.regex.GroupDecoder[A10],implicitevidence$335:kantan.regex.GroupDecoder[A11],implicitevidence$336:kantan.regex.GroupDecoder[A12],implicitevidence$337:kantan.regex.GroupDecoder[A13],implicitevidence$338:kantan.regex.GroupDecoder[A14],implicitevidence$339:kantan.regex.GroupDecoder[A15],implicitevidence$340:kantan.regex.GroupDecoder[A16],implicitevidence$341:kantan.regex.GroupDecoder[A17],implicitevidence$342:kantan.regex.GroupDecoder[A18]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int, i18: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17], arg17: GroupDecoder[A18]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int,i18:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>O)(implicitevidence$307:kantan.regex.GroupDecoder[A1],implicitevidence$308:kantan.regex.GroupDecoder[A2],implicitevidence$309:kantan.regex.GroupDecoder[A3],implicitevidence$310:kantan.regex.GroupDecoder[A4],implicitevidence$311:kantan.regex.GroupDecoder[A5],implicitevidence$312:kantan.regex.GroupDecoder[A6],implicitevidence$313:kantan.regex.GroupDecoder[A7],implicitevidence$314:kantan.regex.GroupDecoder[A8],implicitevidence$315:kantan.regex.GroupDecoder[A9],implicitevidence$316:kantan.regex.GroupDecoder[A10],implicitevidence$317:kantan.regex.GroupDecoder[A11],implicitevidence$318:kantan.regex.GroupDecoder[A12],implicitevidence$319:kantan.regex.GroupDecoder[A13],implicitevidence$320:kantan.regex.GroupDecoder[A14],implicitevidence$321:kantan.regex.GroupDecoder[A15],implicitevidence$322:kantan.regex.GroupDecoder[A16],implicitevidence$323:kantan.regex.GroupDecoder[A17],implicitevidence$324:kantan.regex.GroupDecoder[A18]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>O)(implicitevidence$290:kantan.regex.GroupDecoder[A1],implicitevidence$291:kantan.regex.GroupDecoder[A2],implicitevidence$292:kantan.regex.GroupDecoder[A3],implicitevidence$293:kantan.regex.GroupDecoder[A4],implicitevidence$294:kantan.regex.GroupDecoder[A5],implicitevidence$295:kantan.regex.GroupDecoder[A6],implicitevidence$296:kantan.regex.GroupDecoder[A7],implicitevidence$297:kantan.regex.GroupDecoder[A8],implicitevidence$298:kantan.regex.GroupDecoder[A9],implicitevidence$299:kantan.regex.GroupDecoder[A10],implicitevidence$300:kantan.regex.GroupDecoder[A11],implicitevidence$301:kantan.regex.GroupDecoder[A12],implicitevidence$302:kantan.regex.GroupDecoder[A13],implicitevidence$303:kantan.regex.GroupDecoder[A14],implicitevidence$304:kantan.regex.GroupDecoder[A15],implicitevidence$305:kantan.regex.GroupDecoder[A16],implicitevidence$306:kantan.regex.GroupDecoder[A17]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int, i17: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16], arg16: GroupDecoder[A17]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int,i17:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>O)(implicitevidence$273:kantan.regex.GroupDecoder[A1],implicitevidence$274:kantan.regex.GroupDecoder[A2],implicitevidence$275:kantan.regex.GroupDecoder[A3],implicitevidence$276:kantan.regex.GroupDecoder[A4],implicitevidence$277:kantan.regex.GroupDecoder[A5],implicitevidence$278:kantan.regex.GroupDecoder[A6],implicitevidence$279:kantan.regex.GroupDecoder[A7],implicitevidence$280:kantan.regex.GroupDecoder[A8],implicitevidence$281:kantan.regex.GroupDecoder[A9],implicitevidence$282:kantan.regex.GroupDecoder[A10],implicitevidence$283:kantan.regex.GroupDecoder[A11],implicitevidence$284:kantan.regex.GroupDecoder[A12],implicitevidence$285:kantan.regex.GroupDecoder[A13],implicitevidence$286:kantan.regex.GroupDecoder[A14],implicitevidence$287:kantan.regex.GroupDecoder[A15],implicitevidence$288:kantan.regex.GroupDecoder[A16],implicitevidence$289:kantan.regex.GroupDecoder[A17]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>O)(implicitevidence$257:kantan.regex.GroupDecoder[A1],implicitevidence$258:kantan.regex.GroupDecoder[A2],implicitevidence$259:kantan.regex.GroupDecoder[A3],implicitevidence$260:kantan.regex.GroupDecoder[A4],implicitevidence$261:kantan.regex.GroupDecoder[A5],implicitevidence$262:kantan.regex.GroupDecoder[A6],implicitevidence$263:kantan.regex.GroupDecoder[A7],implicitevidence$264:kantan.regex.GroupDecoder[A8],implicitevidence$265:kantan.regex.GroupDecoder[A9],implicitevidence$266:kantan.regex.GroupDecoder[A10],implicitevidence$267:kantan.regex.GroupDecoder[A11],implicitevidence$268:kantan.regex.GroupDecoder[A12],implicitevidence$269:kantan.regex.GroupDecoder[A13],implicitevidence$270:kantan.regex.GroupDecoder[A14],implicitevidence$271:kantan.regex.GroupDecoder[A15],implicitevidence$272:kantan.regex.GroupDecoder[A16]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int, i16: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15], arg15: GroupDecoder[A16]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int,i16:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>O)(implicitevidence$241:kantan.regex.GroupDecoder[A1],implicitevidence$242:kantan.regex.GroupDecoder[A2],implicitevidence$243:kantan.regex.GroupDecoder[A3],implicitevidence$244:kantan.regex.GroupDecoder[A4],implicitevidence$245:kantan.regex.GroupDecoder[A5],implicitevidence$246:kantan.regex.GroupDecoder[A6],implicitevidence$247:kantan.regex.GroupDecoder[A7],implicitevidence$248:kantan.regex.GroupDecoder[A8],implicitevidence$249:kantan.regex.GroupDecoder[A9],implicitevidence$250:kantan.regex.GroupDecoder[A10],implicitevidence$251:kantan.regex.GroupDecoder[A11],implicitevidence$252:kantan.regex.GroupDecoder[A12],implicitevidence$253:kantan.regex.GroupDecoder[A13],implicitevidence$254:kantan.regex.GroupDecoder[A14],implicitevidence$255:kantan.regex.GroupDecoder[A15],implicitevidence$256:kantan.regex.GroupDecoder[A16]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>O)(implicitevidence$226:kantan.regex.GroupDecoder[A1],implicitevidence$227:kantan.regex.GroupDecoder[A2],implicitevidence$228:kantan.regex.GroupDecoder[A3],implicitevidence$229:kantan.regex.GroupDecoder[A4],implicitevidence$230:kantan.regex.GroupDecoder[A5],implicitevidence$231:kantan.regex.GroupDecoder[A6],implicitevidence$232:kantan.regex.GroupDecoder[A7],implicitevidence$233:kantan.regex.GroupDecoder[A8],implicitevidence$234:kantan.regex.GroupDecoder[A9],implicitevidence$235:kantan.regex.GroupDecoder[A10],implicitevidence$236:kantan.regex.GroupDecoder[A11],implicitevidence$237:kantan.regex.GroupDecoder[A12],implicitevidence$238:kantan.regex.GroupDecoder[A13],implicitevidence$239:kantan.regex.GroupDecoder[A14],implicitevidence$240:kantan.regex.GroupDecoder[A15]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int, i15: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14], arg14: GroupDecoder[A15]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int,i15:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>O)(implicitevidence$211:kantan.regex.GroupDecoder[A1],implicitevidence$212:kantan.regex.GroupDecoder[A2],implicitevidence$213:kantan.regex.GroupDecoder[A3],implicitevidence$214:kantan.regex.GroupDecoder[A4],implicitevidence$215:kantan.regex.GroupDecoder[A5],implicitevidence$216:kantan.regex.GroupDecoder[A6],implicitevidence$217:kantan.regex.GroupDecoder[A7],implicitevidence$218:kantan.regex.GroupDecoder[A8],implicitevidence$219:kantan.regex.GroupDecoder[A9],implicitevidence$220:kantan.regex.GroupDecoder[A10],implicitevidence$221:kantan.regex.GroupDecoder[A11],implicitevidence$222:kantan.regex.GroupDecoder[A12],implicitevidence$223:kantan.regex.GroupDecoder[A13],implicitevidence$224:kantan.regex.GroupDecoder[A14],implicitevidence$225:kantan.regex.GroupDecoder[A15]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>O)(implicitevidence$197:kantan.regex.GroupDecoder[A1],implicitevidence$198:kantan.regex.GroupDecoder[A2],implicitevidence$199:kantan.regex.GroupDecoder[A3],implicitevidence$200:kantan.regex.GroupDecoder[A4],implicitevidence$201:kantan.regex.GroupDecoder[A5],implicitevidence$202:kantan.regex.GroupDecoder[A6],implicitevidence$203:kantan.regex.GroupDecoder[A7],implicitevidence$204:kantan.regex.GroupDecoder[A8],implicitevidence$205:kantan.regex.GroupDecoder[A9],implicitevidence$206:kantan.regex.GroupDecoder[A10],implicitevidence$207:kantan.regex.GroupDecoder[A11],implicitevidence$208:kantan.regex.GroupDecoder[A12],implicitevidence$209:kantan.regex.GroupDecoder[A13],implicitevidence$210:kantan.regex.GroupDecoder[A14]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int, i14: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13], arg13: GroupDecoder[A14]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int,i14:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>O)(implicitevidence$183:kantan.regex.GroupDecoder[A1],implicitevidence$184:kantan.regex.GroupDecoder[A2],implicitevidence$185:kantan.regex.GroupDecoder[A3],implicitevidence$186:kantan.regex.GroupDecoder[A4],implicitevidence$187:kantan.regex.GroupDecoder[A5],implicitevidence$188:kantan.regex.GroupDecoder[A6],implicitevidence$189:kantan.regex.GroupDecoder[A7],implicitevidence$190:kantan.regex.GroupDecoder[A8],implicitevidence$191:kantan.regex.GroupDecoder[A9],implicitevidence$192:kantan.regex.GroupDecoder[A10],implicitevidence$193:kantan.regex.GroupDecoder[A11],implicitevidence$194:kantan.regex.GroupDecoder[A12],implicitevidence$195:kantan.regex.GroupDecoder[A13],implicitevidence$196:kantan.regex.GroupDecoder[A14]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>O)(implicitevidence$170:kantan.regex.GroupDecoder[A1],implicitevidence$171:kantan.regex.GroupDecoder[A2],implicitevidence$172:kantan.regex.GroupDecoder[A3],implicitevidence$173:kantan.regex.GroupDecoder[A4],implicitevidence$174:kantan.regex.GroupDecoder[A5],implicitevidence$175:kantan.regex.GroupDecoder[A6],implicitevidence$176:kantan.regex.GroupDecoder[A7],implicitevidence$177:kantan.regex.GroupDecoder[A8],implicitevidence$178:kantan.regex.GroupDecoder[A9],implicitevidence$179:kantan.regex.GroupDecoder[A10],implicitevidence$180:kantan.regex.GroupDecoder[A11],implicitevidence$181:kantan.regex.GroupDecoder[A12],implicitevidence$182:kantan.regex.GroupDecoder[A13]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int, i13: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12], arg12: GroupDecoder[A13]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int,i13:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>O)(implicitevidence$157:kantan.regex.GroupDecoder[A1],implicitevidence$158:kantan.regex.GroupDecoder[A2],implicitevidence$159:kantan.regex.GroupDecoder[A3],implicitevidence$160:kantan.regex.GroupDecoder[A4],implicitevidence$161:kantan.regex.GroupDecoder[A5],implicitevidence$162:kantan.regex.GroupDecoder[A6],implicitevidence$163:kantan.regex.GroupDecoder[A7],implicitevidence$164:kantan.regex.GroupDecoder[A8],implicitevidence$165:kantan.regex.GroupDecoder[A9],implicitevidence$166:kantan.regex.GroupDecoder[A10],implicitevidence$167:kantan.regex.GroupDecoder[A11],implicitevidence$168:kantan.regex.GroupDecoder[A12],implicitevidence$169:kantan.regex.GroupDecoder[A13]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>O)(implicitevidence$145:kantan.regex.GroupDecoder[A1],implicitevidence$146:kantan.regex.GroupDecoder[A2],implicitevidence$147:kantan.regex.GroupDecoder[A3],implicitevidence$148:kantan.regex.GroupDecoder[A4],implicitevidence$149:kantan.regex.GroupDecoder[A5],implicitevidence$150:kantan.regex.GroupDecoder[A6],implicitevidence$151:kantan.regex.GroupDecoder[A7],implicitevidence$152:kantan.regex.GroupDecoder[A8],implicitevidence$153:kantan.regex.GroupDecoder[A9],implicitevidence$154:kantan.regex.GroupDecoder[A10],implicitevidence$155:kantan.regex.GroupDecoder[A11],implicitevidence$156:kantan.regex.GroupDecoder[A12]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int, i12: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11], arg11: GroupDecoder[A12]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int,i12:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>O)(implicitevidence$133:kantan.regex.GroupDecoder[A1],implicitevidence$134:kantan.regex.GroupDecoder[A2],implicitevidence$135:kantan.regex.GroupDecoder[A3],implicitevidence$136:kantan.regex.GroupDecoder[A4],implicitevidence$137:kantan.regex.GroupDecoder[A5],implicitevidence$138:kantan.regex.GroupDecoder[A6],implicitevidence$139:kantan.regex.GroupDecoder[A7],implicitevidence$140:kantan.regex.GroupDecoder[A8],implicitevidence$141:kantan.regex.GroupDecoder[A9],implicitevidence$142:kantan.regex.GroupDecoder[A10],implicitevidence$143:kantan.regex.GroupDecoder[A11],implicitevidence$144:kantan.regex.GroupDecoder[A12]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>O)(implicitevidence$122:kantan.regex.GroupDecoder[A1],implicitevidence$123:kantan.regex.GroupDecoder[A2],implicitevidence$124:kantan.regex.GroupDecoder[A3],implicitevidence$125:kantan.regex.GroupDecoder[A4],implicitevidence$126:kantan.regex.GroupDecoder[A5],implicitevidence$127:kantan.regex.GroupDecoder[A6],implicitevidence$128:kantan.regex.GroupDecoder[A7],implicitevidence$129:kantan.regex.GroupDecoder[A8],implicitevidence$130:kantan.regex.GroupDecoder[A9],implicitevidence$131:kantan.regex.GroupDecoder[A10],implicitevidence$132:kantan.regex.GroupDecoder[A11]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int, i11: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10], arg10: GroupDecoder[A11]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int,i11:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>O)(implicitevidence$111:kantan.regex.GroupDecoder[A1],implicitevidence$112:kantan.regex.GroupDecoder[A2],implicitevidence$113:kantan.regex.GroupDecoder[A3],implicitevidence$114:kantan.regex.GroupDecoder[A4],implicitevidence$115:kantan.regex.GroupDecoder[A5],implicitevidence$116:kantan.regex.GroupDecoder[A6],implicitevidence$117:kantan.regex.GroupDecoder[A7],implicitevidence$118:kantan.regex.GroupDecoder[A8],implicitevidence$119:kantan.regex.GroupDecoder[A9],implicitevidence$120:kantan.regex.GroupDecoder[A10],implicitevidence$121:kantan.regex.GroupDecoder[A11]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>O)(implicitevidence$101:kantan.regex.GroupDecoder[A1],implicitevidence$102:kantan.regex.GroupDecoder[A2],implicitevidence$103:kantan.regex.GroupDecoder[A3],implicitevidence$104:kantan.regex.GroupDecoder[A4],implicitevidence$105:kantan.regex.GroupDecoder[A5],implicitevidence$106:kantan.regex.GroupDecoder[A6],implicitevidence$107:kantan.regex.GroupDecoder[A7],implicitevidence$108:kantan.regex.GroupDecoder[A8],implicitevidence$109:kantan.regex.GroupDecoder[A9],implicitevidence$110:kantan.regex.GroupDecoder[A10]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int, i10: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9], arg9: GroupDecoder[A10]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int,i10:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>O)(implicitevidence$91:kantan.regex.GroupDecoder[A1],implicitevidence$92:kantan.regex.GroupDecoder[A2],implicitevidence$93:kantan.regex.GroupDecoder[A3],implicitevidence$94:kantan.regex.GroupDecoder[A4],implicitevidence$95:kantan.regex.GroupDecoder[A5],implicitevidence$96:kantan.regex.GroupDecoder[A6],implicitevidence$97:kantan.regex.GroupDecoder[A7],implicitevidence$98:kantan.regex.GroupDecoder[A8],implicitevidence$99:kantan.regex.GroupDecoder[A9],implicitevidence$100:kantan.regex.GroupDecoder[A10]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,A9,O](f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>O)(implicitevidence$82:kantan.regex.GroupDecoder[A1],implicitevidence$83:kantan.regex.GroupDecoder[A2],implicitevidence$84:kantan.regex.GroupDecoder[A3],implicitevidence$85:kantan.regex.GroupDecoder[A4],implicitevidence$86:kantan.regex.GroupDecoder[A5],implicitevidence$87:kantan.regex.GroupDecoder[A6],implicitevidence$88:kantan.regex.GroupDecoder[A7],implicitevidence$89:kantan.regex.GroupDecoder[A8],implicitevidence$90:kantan.regex.GroupDecoder[A9]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int, i9: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8], arg8: GroupDecoder[A9]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int,i9:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>O)(implicitevidence$73:kantan.regex.GroupDecoder[A1],implicitevidence$74:kantan.regex.GroupDecoder[A2],implicitevidence$75:kantan.regex.GroupDecoder[A3],implicitevidence$76:kantan.regex.GroupDecoder[A4],implicitevidence$77:kantan.regex.GroupDecoder[A5],implicitevidence$78:kantan.regex.GroupDecoder[A6],implicitevidence$79:kantan.regex.GroupDecoder[A7],implicitevidence$80:kantan.regex.GroupDecoder[A8],implicitevidence$81:kantan.regex.GroupDecoder[A9]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7, A8) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,A8,O](f:(A1,A2,A3,A4,A5,A6,A7,A8)=>O)(implicitevidence$65:kantan.regex.GroupDecoder[A1],implicitevidence$66:kantan.regex.GroupDecoder[A2],implicitevidence$67:kantan.regex.GroupDecoder[A3],implicitevidence$68:kantan.regex.GroupDecoder[A4],implicitevidence$69:kantan.regex.GroupDecoder[A5],implicitevidence$70:kantan.regex.GroupDecoder[A6],implicitevidence$71:kantan.regex.GroupDecoder[A7],implicitevidence$72:kantan.regex.GroupDecoder[A8]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int, i8: Int)(f: (A1, A2, A3, A4, A5, A6, A7, A8) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7], arg7: GroupDecoder[A8]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int,i8:Int)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>O)(implicitevidence$57:kantan.regex.GroupDecoder[A1],implicitevidence$58:kantan.regex.GroupDecoder[A2],implicitevidence$59:kantan.regex.GroupDecoder[A3],implicitevidence$60:kantan.regex.GroupDecoder[A4],implicitevidence$61:kantan.regex.GroupDecoder[A5],implicitevidence$62:kantan.regex.GroupDecoder[A6],implicitevidence$63:kantan.regex.GroupDecoder[A7],implicitevidence$64:kantan.regex.GroupDecoder[A8]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6, A7) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,A7,O](f:(A1,A2,A3,A4,A5,A6,A7)=>O)(implicitevidence$50:kantan.regex.GroupDecoder[A1],implicitevidence$51:kantan.regex.GroupDecoder[A2],implicitevidence$52:kantan.regex.GroupDecoder[A3],implicitevidence$53:kantan.regex.GroupDecoder[A4],implicitevidence$54:kantan.regex.GroupDecoder[A5],implicitevidence$55:kantan.regex.GroupDecoder[A6],implicitevidence$56:kantan.regex.GroupDecoder[A7]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int, i7: Int)(f: (A1, A2, A3, A4, A5, A6, A7) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6], arg6: GroupDecoder[A7]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int,i7:Int)(f:(A1,A2,A3,A4,A5,A6,A7)=>O)(implicitevidence$43:kantan.regex.GroupDecoder[A1],implicitevidence$44:kantan.regex.GroupDecoder[A2],implicitevidence$45:kantan.regex.GroupDecoder[A3],implicitevidence$46:kantan.regex.GroupDecoder[A4],implicitevidence$47:kantan.regex.GroupDecoder[A5],implicitevidence$48:kantan.regex.GroupDecoder[A6],implicitevidence$49:kantan.regex.GroupDecoder[A7]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5, A6) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,A6,O](f:(A1,A2,A3,A4,A5,A6)=>O)(implicitevidence$37:kantan.regex.GroupDecoder[A1],implicitevidence$38:kantan.regex.GroupDecoder[A2],implicitevidence$39:kantan.regex.GroupDecoder[A3],implicitevidence$40:kantan.regex.GroupDecoder[A4],implicitevidence$41:kantan.regex.GroupDecoder[A5],implicitevidence$42:kantan.regex.GroupDecoder[A6]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int, i6: Int)(f: (A1, A2, A3, A4, A5, A6) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5], arg5: GroupDecoder[A6]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int,i6:Int)(f:(A1,A2,A3,A4,A5,A6)=>O)(implicitevidence$31:kantan.regex.GroupDecoder[A1],implicitevidence$32:kantan.regex.GroupDecoder[A2],implicitevidence$33:kantan.regex.GroupDecoder[A3],implicitevidence$34:kantan.regex.GroupDecoder[A4],implicitevidence$35:kantan.regex.GroupDecoder[A5],implicitevidence$36:kantan.regex.GroupDecoder[A6]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4, A5) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,A5,O](f:(A1,A2,A3,A4,A5)=>O)(implicitevidence$26:kantan.regex.GroupDecoder[A1],implicitevidence$27:kantan.regex.GroupDecoder[A2],implicitevidence$28:kantan.regex.GroupDecoder[A3],implicitevidence$29:kantan.regex.GroupDecoder[A4],implicitevidence$30:kantan.regex.GroupDecoder[A5]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int, i5: Int)(f: (A1, A2, A3, A4, A5) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4], arg4: GroupDecoder[A5]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,A5,O](i1:Int,i2:Int,i3:Int,i4:Int,i5:Int)(f:(A1,A2,A3,A4,A5)=>O)(implicitevidence$21:kantan.regex.GroupDecoder[A1],implicitevidence$22:kantan.regex.GroupDecoder[A2],implicitevidence$23:kantan.regex.GroupDecoder[A3],implicitevidence$24:kantan.regex.GroupDecoder[A4],implicitevidence$25:kantan.regex.GroupDecoder[A5]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3, A4) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,A4,O](f:(A1,A2,A3,A4)=>O)(implicitevidence$17:kantan.regex.GroupDecoder[A1],implicitevidence$18:kantan.regex.GroupDecoder[A2],implicitevidence$19:kantan.regex.GroupDecoder[A3],implicitevidence$20:kantan.regex.GroupDecoder[A4]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int, i4: Int)(f: (A1, A2, A3, A4) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3], arg3: GroupDecoder[A4]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,A4,O](i1:Int,i2:Int,i3:Int,i4:Int)(f:(A1,A2,A3,A4)=>O)(implicitevidence$13:kantan.regex.GroupDecoder[A1],implicitevidence$14:kantan.regex.GroupDecoder[A2],implicitevidence$15:kantan.regex.GroupDecoder[A3],implicitevidence$16:kantan.regex.GroupDecoder[A4]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2, A3) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,A3,O](f:(A1,A2,A3)=>O)(implicitevidence$10:kantan.regex.GroupDecoder[A1],implicitevidence$11:kantan.regex.GroupDecoder[A2],implicitevidence$12:kantan.regex.GroupDecoder[A3]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int, i3: Int)(f: (A1, A2, A3) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2], arg2: GroupDecoder[A3]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,A3,O](i1:Int,i2:Int,i3:Int)(f:(A1,A2,A3)=>O)(implicitevidence$7:kantan.regex.GroupDecoder[A1],implicitevidence$8:kantan.regex.GroupDecoder[A2],implicitevidence$9:kantan.regex.GroupDecoder[A3]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1, A2) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,A2,O](f:(A1,A2)=>O)(implicitevidence$5:kantan.regex.GroupDecoder[A1],implicitevidence$6:kantan.regex.GroupDecoder[A2]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int, i2: Int)(f: (A1, A2) => O)(arg0: GroupDecoder[A1], arg1: GroupDecoder[A2]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,A2,O](i1:Int,i2:Int)(f:(A1,A2)=>O)(implicitevidence$3:kantan.regex.GroupDecoder[A1],implicitevidence$4:kantan.regex.GroupDecoder[A2]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "ordered", "tail" : "(f: (A1) => O)(arg0: GroupDecoder[A1]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.ordered", "link" : "kantan\/regex\/MatchDecoder$.html#ordered[A1,O](f:A1=>O)(implicitevidence$2:kantan.regex.GroupDecoder[A1]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "decoder", "tail" : "(i1: Int)(f: (A1) => O)(arg0: GroupDecoder[A1]): MatchDecoder[O]", "member" : "kantan.regex.GeneratedMatchDecoders.decoder", "link" : "kantan\/regex\/MatchDecoder$.html#decoder[A1,O](i1:Int)(f:A1=>O)(implicitevidence$1:kantan.regex.GroupDecoder[A1]):kantan.regex.MatchDecoder[O]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/MatchDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/MatchDecoder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/MatchDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/MatchDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/MatchDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/MatchDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/MatchDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/MatchDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/MatchDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/MatchDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/MatchDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/MatchDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/MatchDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/MatchDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/MatchDecoder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/MatchDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/MatchDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/MatchDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/MatchDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "product", "tail" : "(decoder: Decoder[E, DD, F, T]): Decoder[E, (D, DD), F, T]", "member" : "kantan.codecs.Decoder.product", "link" : "kantan\/regex\/package$$MatchDecoder.html#product[DD](decoder:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,(D,DD),F,T]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (D) => Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.flatMap", "link" : "kantan\/regex\/package$$MatchDecoder.html#flatMap[DD](f:D=>kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "tag", "tail" : "(): Decoder[E, D, F, TT]", "member" : "kantan.codecs.Decoder.tag", "link" : "kantan\/regex\/package$$MatchDecoder.html#tag[TT]:kantan.codecs.Decoder[E,D,F,TT]", "kind" : "def"}, {"label" : "contramapEncoded", "tail" : "(f: (EE) => E): Decoder[EE, D, F, T]", "member" : "kantan.codecs.Decoder.contramapEncoded", "link" : "kantan\/regex\/package$$MatchDecoder.html#contramapEncoded[EE](f:EE=>E):kantan.codecs.Decoder[EE,D,F,T]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.leftMap", "link" : "kantan\/regex\/package$$MatchDecoder.html#leftMap[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "mapError", "tail" : "(f: (F) => FF): Decoder[E, D, FF, T]", "member" : "kantan.codecs.Decoder.mapError", "link" : "kantan\/regex\/package$$MatchDecoder.html#mapError[FF](f:F=>FF):kantan.codecs.Decoder[E,D,FF,T]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (D) => Boolean)(t: IsError[F]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.filter", "link" : "kantan\/regex\/package$$MatchDecoder.html#filter(f:D=>Boolean)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[D, DD])(t: IsError[F]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.collect", "link" : "kantan\/regex\/package$$MatchDecoder.html#collect[DD](f:PartialFunction[D,DD])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "emap", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.emap", "link" : "kantan\/regex\/package$$MatchDecoder.html#emap[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "mapResult", "tail" : "(f: (D) => Either[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.mapResult", "link" : "kantan\/regex\/package$$MatchDecoder.html#mapResult[DD](f:D=>Either[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (D) => DD): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.map", "link" : "kantan\/regex\/package$$MatchDecoder.html#map[DD](f:D=>DD):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(f: (F) => Decoder[E, D, F, T]): Decoder[E, D, F, T]", "member" : "kantan.codecs.Decoder.handleErrorWith", "link" : "kantan\/regex\/package$$MatchDecoder.html#handleErrorWith(f:F=>kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(pf: PartialFunction[F, Either[FF, DD]]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.recoverWith", "link" : "kantan\/regex\/package$$MatchDecoder.html#recoverWith[DD>:D,FF>:F](pf:PartialFunction[F,Either[FF,DD]]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "recover", "tail" : "(pf: PartialFunction[F, DD]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.recover", "link" : "kantan\/regex\/package$$MatchDecoder.html#recover[DD>:D](pf:PartialFunction[F,DD]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: (Either[F, D]) => Either[FF, DD]): Decoder[E, DD, FF, T]", "member" : "kantan.codecs.Decoder.andThen", "link" : "kantan\/regex\/package$$MatchDecoder.html#andThen[FF,DD](f:Either[F,D]=>Either[FF,DD]):kantan.codecs.Decoder[E,DD,FF,T]", "kind" : "def"}, {"label" : "orElse", "tail" : "(d: Decoder[E, DD, F, T]): Decoder[E, DD, F, T]", "member" : "kantan.codecs.Decoder.orElse", "link" : "kantan\/regex\/package$$MatchDecoder.html#orElse[DD>:D](d:kantan.codecs.Decoder[E,DD,F,T]):kantan.codecs.Decoder[E,DD,F,T]", "kind" : "def"}, {"label" : "unsafeDecode", "tail" : "(e: E): D", "member" : "kantan.codecs.Decoder.unsafeDecode", "link" : "kantan\/regex\/package$$MatchDecoder.html#unsafeDecode(e:E):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/package$$MatchDecoder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/package$$MatchDecoder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/package$$MatchDecoder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/package$$MatchDecoder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/package$$MatchDecoder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/package$$MatchDecoder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/package$$MatchDecoder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$MatchDecoder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$MatchDecoder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$MatchDecoder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/package$$MatchDecoder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/package$$MatchDecoder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/package$$MatchDecoder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/package$$MatchDecoder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/package$$MatchDecoder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/package$$MatchDecoder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/package$$MatchDecoder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/package$$MatchDecoder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/package$$MatchDecoder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decode", "tail" : "(e: E): Either[F, D]", "member" : "kantan.codecs.Decoder.decode", "link" : "kantan\/regex\/package$$MatchDecoder.html#decode(e:E):Either[F,D]", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/regex\/package$$MatchDecoder.html"}, {"name" : "kantan.regex.MatchDecoderInstances", "trait" : "kantan\/regex\/MatchDecoderInstances.html", "kind" : "trait", "members_trait" : [{"label" : "fromCbf", "tail" : "(da: GroupDecoder[Option[A]], cbf: Factory[A, F[A]]): MatchDecoder[F[A]]", "member" : "kantan.regex.MatchDecoderInstances.fromCbf", "link" : "kantan\/regex\/MatchDecoderInstances.html#fromCbf[F[_],A](implicitda:kantan.regex.GroupDecoder[Option[A]],implicitcbf:kantan.codecs.collection.Factory[A,F[A]]):kantan.regex.MatchDecoder[F[A]]", "kind" : "implicit def"}, {"label" : "optMatch", "tail" : "(da: GroupDecoder[Option[A]]): MatchDecoder[Option[A]]", "member" : "kantan.regex.MatchDecoderInstances.optMatch", "link" : "kantan\/regex\/MatchDecoderInstances.html#optMatch[A](implicitda:kantan.regex.GroupDecoder[Option[A]]):kantan.regex.MatchDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "eitherMatch", "tail" : "(arg0: MatchDecoder[A], arg1: MatchDecoder[B]): MatchDecoder[Either[A, B]]", "member" : "kantan.regex.MatchDecoderInstances.eitherMatch", "link" : "kantan\/regex\/MatchDecoderInstances.html#eitherMatch[A,B](implicitevidence$3:kantan.regex.MatchDecoder[A],implicitevidence$4:kantan.regex.MatchDecoder[B]):kantan.regex.MatchDecoder[Either[A,B]]", "kind" : "implicit def"}, {"label" : "fromGroup", "tail" : "(arg0: GroupDecoder[A]): MatchDecoder[A]", "member" : "kantan.regex.MatchDecoderInstances.fromGroup", "link" : "kantan\/regex\/MatchDecoderInstances.html#fromGroup[A](implicitevidence$2:kantan.regex.GroupDecoder[A]):kantan.regex.MatchDecoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/MatchDecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/MatchDecoderInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/MatchDecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/MatchDecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/MatchDecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/MatchDecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/MatchDecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/MatchDecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/MatchDecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/MatchDecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/MatchDecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/MatchDecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/MatchDecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/MatchDecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/MatchDecoderInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/MatchDecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/MatchDecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/MatchDecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/MatchDecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Declares default MatchDecoder instances."}, {"name" : "kantan.regex.PlatformSpecificInstances", "trait" : "kantan\/regex\/PlatformSpecificInstances.html", "kind" : "trait", "members_trait" : [{"label" : "dateDecoder", "tail" : "(format: DateFormat): GroupDecoder[Date]", "member" : "kantan.regex.PlatformSpecificInstances.dateDecoder", "link" : "kantan\/regex\/PlatformSpecificInstances.html#dateDecoder(format:java.text.DateFormat):kantan.regex.GroupDecoder[java.util.Date]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/PlatformSpecificInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/PlatformSpecificInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/PlatformSpecificInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/PlatformSpecificInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/PlatformSpecificInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/PlatformSpecificInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/PlatformSpecificInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/PlatformSpecificInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/PlatformSpecificInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/PlatformSpecificInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/PlatformSpecificInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/PlatformSpecificInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/PlatformSpecificInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/PlatformSpecificInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/PlatformSpecificInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/PlatformSpecificInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/PlatformSpecificInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/PlatformSpecificInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/PlatformSpecificInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.regex.Regex", "object" : "kantan\/regex\/Regex$.html", "members_object" : [{"label" : "apply", "tail" : "(pattern: Pattern, group: Int)(arg0: GroupDecoder[A]): Regex[DecodeResult[A]]", "member" : "kantan.regex.Regex.apply", "link" : "kantan\/regex\/Regex$.html#apply[A](pattern:kantan.regex.Pattern,group:Int)(implicitevidence$2:kantan.regex.GroupDecoder[A]):kantan.regex.Regex[kantan.regex.DecodeResult[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(pattern: Pattern)(arg0: MatchDecoder[A]): Regex[DecodeResult[A]]", "member" : "kantan.regex.Regex.apply", "link" : "kantan\/regex\/Regex$.html#apply[A](pattern:kantan.regex.Pattern)(implicitevidence$1:kantan.regex.MatchDecoder[A]):kantan.regex.Regex[kantan.regex.DecodeResult[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/Regex$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/Regex$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/Regex$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/Regex$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/Regex$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/Regex$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/Regex$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Regex$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Regex$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Regex$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/Regex$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/Regex$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/Regex$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/Regex$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/Regex$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/Regex$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/Regex$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/Regex$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/Regex$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/regex\/Regex.html", "kind" : "trait", "members_trait" : [{"label" : "map", "tail" : "(f: (A) => B): Regex[B]", "member" : "kantan.regex.Regex.map", "link" : "kantan\/regex\/Regex.html#map[B](f:A=>B):kantan.regex.Regex[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/Regex.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/Regex.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/Regex.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/Regex.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/Regex.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/Regex.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/Regex.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Regex.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Regex.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/Regex.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/Regex.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/Regex.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/Regex.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/Regex.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/Regex.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/Regex.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/Regex.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/Regex.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/Regex.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "eval", "tail" : "(str: String): Iterator[A]", "member" : "kantan.regex.Regex.eval", "link" : "kantan\/regex\/Regex.html#eval(str:String):Iterator[A]", "kind" : "abstract def"}], "shortDescription" : "Compiled version of a regular expression."}, {"name" : "kantan.regex.RegexError", "shortDescription" : "Root class for all regular expression related errors.", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/regex\/RegexError.html#toString():String", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/regex\/RegexError.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/regex\/RegexError.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/regex\/RegexError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/regex\/RegexError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/regex\/RegexError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/regex\/RegexError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/regex\/RegexError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/regex\/RegexError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/regex\/RegexError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/regex\/RegexError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/regex\/RegexError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/regex\/RegexError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/regex\/RegexError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/regex\/RegexError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/regex\/RegexError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/regex\/RegexError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/RegexError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/RegexError.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/RegexError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/RegexError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/RegexError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/RegexError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/RegexError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/RegexError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/RegexError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/RegexError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/RegexError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/RegexError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/RegexError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/RegexError.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/RegexError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/RegexError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/RegexError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/RegexError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/regex\/RegexError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/regex\/RegexError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/regex\/RegexError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "class" : "kantan\/regex\/RegexError.html", "kind" : "class"}, {"name" : "kantan.regex.RegexResult", "shortDescription" : "", "object" : "kantan\/regex\/RegexResult$.html", "members_object" : [{"label" : "failure", "tail" : "(f: RegexError): Either[RegexError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/regex\/RegexResult$.html#failure(f:F):Either[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Either[RegexError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/regex\/RegexResult$.html#success[S](s:S):Either[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Either[RegexError, S]])(bf: BuildFrom[M[Either[RegexError, S]], S, M[S]]): Either[RegexError, M[S]]", "member" : "kantan.codecs.VersionSpecificResultCompanion.Simple.sequence", "link" : "kantan\/regex\/RegexResult$.html#sequence[S,M<:<?>](rs:M[Either[F,S]])(implicitbf:scala.collection.BuildFrom[M[Either[F,S]],S,M[S]]):Either[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/RegexResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/RegexResult$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/RegexResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/RegexResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/RegexResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/RegexResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/RegexResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/RegexResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/RegexResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/RegexResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/RegexResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/RegexResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/RegexResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/RegexResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/RegexResult$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/RegexResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/RegexResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/RegexResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/RegexResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_type" : [{"label" : "toTry", "tail" : "(ev: <:<[A, Throwable]): Try[B]", "member" : "scala.util.Either.toTry", "link" : "kantan\/regex\/package$$RegexResult.html#toTry(implicitev:A<:<Throwable):scala.util.Try[B]", "kind" : "def"}, {"label" : "toOption", "tail" : "(): Option[B]", "member" : "scala.util.Either.toOption", "link" : "kantan\/regex\/package$$RegexResult.html#toOption:Option[B]", "kind" : "def"}, {"label" : "toSeq", "tail" : "(): Seq[B]", "member" : "scala.util.Either.toSeq", "link" : "kantan\/regex\/package$$RegexResult.html#toSeq:Seq[B]", "kind" : "def"}, {"label" : "filterOrElse", "tail" : "(p: (B) => Boolean, zero: => A1): Either[A1, B]", "member" : "scala.util.Either.filterOrElse", "link" : "kantan\/regex\/package$$RegexResult.html#filterOrElse[A1>:A](p:B=>Boolean,zero:=>A1):scala.util.Either[A1,B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (B) => B1): Either[A, B1]", "member" : "scala.util.Either.map", "link" : "kantan\/regex\/package$$RegexResult.html#map[B1](f:B=>B1):scala.util.Either[A,B1]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[B, Either[A1, B1]]): Either[A1, B1]", "member" : "scala.util.Either.flatten", "link" : "kantan\/regex\/package$$RegexResult.html#flatten[A1>:A,B1](implicitev:B<:<scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (B) => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.flatMap", "link" : "kantan\/regex\/package$$RegexResult.html#flatMap[A1>:A,B1](f:B=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (B) => Boolean): Boolean", "member" : "scala.util.Either.exists", "link" : "kantan\/regex\/package$$RegexResult.html#exists(p:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (B) => Boolean): Boolean", "member" : "scala.util.Either.forall", "link" : "kantan\/regex\/package$$RegexResult.html#forall(f:B=>Boolean):Boolean", "kind" : "def"}, {"label" : "contains", "tail" : "(elem: B1): Boolean", "member" : "scala.util.Either.contains", "link" : "kantan\/regex\/package$$RegexResult.html#contains[B1>:B](elem:B1):Boolean", "kind" : "final def"}, {"label" : "orElse", "tail" : "(or: => Either[A1, B1]): Either[A1, B1]", "member" : "scala.util.Either.orElse", "link" : "kantan\/regex\/package$$RegexResult.html#orElse[A1>:A,B1>:B](or:=>scala.util.Either[A1,B1]):scala.util.Either[A1,B1]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(or: => B1): B1", "member" : "scala.util.Either.getOrElse", "link" : "kantan\/regex\/package$$RegexResult.html#getOrElse[B1>:B](or:=>B1):B1", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (B) => U): Unit", "member" : "scala.util.Either.foreach", "link" : "kantan\/regex\/package$$RegexResult.html#foreach[U](f:B=>U):Unit", "kind" : "def"}, {"label" : "joinLeft", "tail" : "(ev: <:<[A1, Either[C, B1]]): Either[C, B1]", "member" : "scala.util.Either.joinLeft", "link" : "kantan\/regex\/package$$RegexResult.html#joinLeft[A1>:A,B1>:B,C](implicitev:A1<:<scala.util.Either[C,B1]):scala.util.Either[C,B1]", "kind" : "def"}, {"label" : "joinRight", "tail" : "(ev: <:<[B1, Either[A1, C]]): Either[A1, C]", "member" : "scala.util.Either.joinRight", "link" : "kantan\/regex\/package$$RegexResult.html#joinRight[A1>:A,B1>:B,C](implicitev:B1<:<scala.util.Either[A1,C]):scala.util.Either[A1,C]", "kind" : "def"}, {"label" : "swap", "tail" : "(): Either[B, A]", "member" : "scala.util.Either.swap", "link" : "kantan\/regex\/package$$RegexResult.html#swap:scala.util.Either[B,A]", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (A) => C, fb: (B) => C): C", "member" : "scala.util.Either.fold", "link" : "kantan\/regex\/package$$RegexResult.html#fold[C](fa:A=>C,fb:B=>C):C", "kind" : "def"}, {"label" : "right", "tail" : "(): RightProjection[A, B]", "member" : "scala.util.Either.right", "link" : "kantan\/regex\/package$$RegexResult.html#right:scala.util.Either.RightProjection[A,B]", "kind" : "def"}, {"label" : "left", "tail" : "(): LeftProjection[A, B]", "member" : "scala.util.Either.left", "link" : "kantan\/regex\/package$$RegexResult.html#left:scala.util.Either.LeftProjection[A,B]", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "kantan\/regex\/package$$RegexResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "kantan\/regex\/package$$RegexResult.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/regex\/package$$RegexResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/regex\/package$$RegexResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/package$$RegexResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/package$$RegexResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/package$$RegexResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/package$$RegexResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/package$$RegexResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/package$$RegexResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/package$$RegexResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$RegexResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$RegexResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/package$$RegexResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/package$$RegexResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/package$$RegexResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/package$$RegexResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/package$$RegexResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/package$$RegexResult.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/package$$RegexResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/package$$RegexResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/package$$RegexResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/package$$RegexResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isRight", "tail" : "(): Boolean", "member" : "scala.util.Either.isRight", "link" : "kantan\/regex\/package$$RegexResult.html#isRight:Boolean", "kind" : "abstract def"}, {"label" : "isLeft", "tail" : "(): Boolean", "member" : "scala.util.Either.isLeft", "link" : "kantan\/regex\/package$$RegexResult.html#isLeft:Boolean", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/regex\/package$$RegexResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/regex\/package$$RegexResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/regex\/package$$RegexResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "kind" : "object", "type" : "kantan\/regex\/package$$RegexResult.html"}, {"name" : "kantan.regex.TupleDecoders", "trait" : "kantan\/regex\/TupleDecoders.html", "kind" : "trait", "members_trait" : [{"label" : "tuple22", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17], arg17: GroupDecoder[I18], arg18: GroupDecoder[I19], arg19: GroupDecoder[I20], arg20: GroupDecoder[I21], arg21: GroupDecoder[I22]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]", "member" : "kantan.regex.TupleDecoders.tuple22", "link" : "kantan\/regex\/TupleDecoders.html#tuple22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](implicitevidence$232:kantan.regex.GroupDecoder[I1],implicitevidence$233:kantan.regex.GroupDecoder[I2],implicitevidence$234:kantan.regex.GroupDecoder[I3],implicitevidence$235:kantan.regex.GroupDecoder[I4],implicitevidence$236:kantan.regex.GroupDecoder[I5],implicitevidence$237:kantan.regex.GroupDecoder[I6],implicitevidence$238:kantan.regex.GroupDecoder[I7],implicitevidence$239:kantan.regex.GroupDecoder[I8],implicitevidence$240:kantan.regex.GroupDecoder[I9],implicitevidence$241:kantan.regex.GroupDecoder[I10],implicitevidence$242:kantan.regex.GroupDecoder[I11],implicitevidence$243:kantan.regex.GroupDecoder[I12],implicitevidence$244:kantan.regex.GroupDecoder[I13],implicitevidence$245:kantan.regex.GroupDecoder[I14],implicitevidence$246:kantan.regex.GroupDecoder[I15],implicitevidence$247:kantan.regex.GroupDecoder[I16],implicitevidence$248:kantan.regex.GroupDecoder[I17],implicitevidence$249:kantan.regex.GroupDecoder[I18],implicitevidence$250:kantan.regex.GroupDecoder[I19],implicitevidence$251:kantan.regex.GroupDecoder[I20],implicitevidence$252:kantan.regex.GroupDecoder[I21],implicitevidence$253:kantan.regex.GroupDecoder[I22]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]", "kind" : "implicit def"}, {"label" : "tuple21", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17], arg17: GroupDecoder[I18], arg18: GroupDecoder[I19], arg19: GroupDecoder[I20], arg20: GroupDecoder[I21]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]", "member" : "kantan.regex.TupleDecoders.tuple21", "link" : "kantan\/regex\/TupleDecoders.html#tuple21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](implicitevidence$211:kantan.regex.GroupDecoder[I1],implicitevidence$212:kantan.regex.GroupDecoder[I2],implicitevidence$213:kantan.regex.GroupDecoder[I3],implicitevidence$214:kantan.regex.GroupDecoder[I4],implicitevidence$215:kantan.regex.GroupDecoder[I5],implicitevidence$216:kantan.regex.GroupDecoder[I6],implicitevidence$217:kantan.regex.GroupDecoder[I7],implicitevidence$218:kantan.regex.GroupDecoder[I8],implicitevidence$219:kantan.regex.GroupDecoder[I9],implicitevidence$220:kantan.regex.GroupDecoder[I10],implicitevidence$221:kantan.regex.GroupDecoder[I11],implicitevidence$222:kantan.regex.GroupDecoder[I12],implicitevidence$223:kantan.regex.GroupDecoder[I13],implicitevidence$224:kantan.regex.GroupDecoder[I14],implicitevidence$225:kantan.regex.GroupDecoder[I15],implicitevidence$226:kantan.regex.GroupDecoder[I16],implicitevidence$227:kantan.regex.GroupDecoder[I17],implicitevidence$228:kantan.regex.GroupDecoder[I18],implicitevidence$229:kantan.regex.GroupDecoder[I19],implicitevidence$230:kantan.regex.GroupDecoder[I20],implicitevidence$231:kantan.regex.GroupDecoder[I21]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]", "kind" : "implicit def"}, {"label" : "tuple20", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17], arg17: GroupDecoder[I18], arg18: GroupDecoder[I19], arg19: GroupDecoder[I20]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]", "member" : "kantan.regex.TupleDecoders.tuple20", "link" : "kantan\/regex\/TupleDecoders.html#tuple20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](implicitevidence$191:kantan.regex.GroupDecoder[I1],implicitevidence$192:kantan.regex.GroupDecoder[I2],implicitevidence$193:kantan.regex.GroupDecoder[I3],implicitevidence$194:kantan.regex.GroupDecoder[I4],implicitevidence$195:kantan.regex.GroupDecoder[I5],implicitevidence$196:kantan.regex.GroupDecoder[I6],implicitevidence$197:kantan.regex.GroupDecoder[I7],implicitevidence$198:kantan.regex.GroupDecoder[I8],implicitevidence$199:kantan.regex.GroupDecoder[I9],implicitevidence$200:kantan.regex.GroupDecoder[I10],implicitevidence$201:kantan.regex.GroupDecoder[I11],implicitevidence$202:kantan.regex.GroupDecoder[I12],implicitevidence$203:kantan.regex.GroupDecoder[I13],implicitevidence$204:kantan.regex.GroupDecoder[I14],implicitevidence$205:kantan.regex.GroupDecoder[I15],implicitevidence$206:kantan.regex.GroupDecoder[I16],implicitevidence$207:kantan.regex.GroupDecoder[I17],implicitevidence$208:kantan.regex.GroupDecoder[I18],implicitevidence$209:kantan.regex.GroupDecoder[I19],implicitevidence$210:kantan.regex.GroupDecoder[I20]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]", "kind" : "implicit def"}, {"label" : "tuple19", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17], arg17: GroupDecoder[I18], arg18: GroupDecoder[I19]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]", "member" : "kantan.regex.TupleDecoders.tuple19", "link" : "kantan\/regex\/TupleDecoders.html#tuple19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](implicitevidence$172:kantan.regex.GroupDecoder[I1],implicitevidence$173:kantan.regex.GroupDecoder[I2],implicitevidence$174:kantan.regex.GroupDecoder[I3],implicitevidence$175:kantan.regex.GroupDecoder[I4],implicitevidence$176:kantan.regex.GroupDecoder[I5],implicitevidence$177:kantan.regex.GroupDecoder[I6],implicitevidence$178:kantan.regex.GroupDecoder[I7],implicitevidence$179:kantan.regex.GroupDecoder[I8],implicitevidence$180:kantan.regex.GroupDecoder[I9],implicitevidence$181:kantan.regex.GroupDecoder[I10],implicitevidence$182:kantan.regex.GroupDecoder[I11],implicitevidence$183:kantan.regex.GroupDecoder[I12],implicitevidence$184:kantan.regex.GroupDecoder[I13],implicitevidence$185:kantan.regex.GroupDecoder[I14],implicitevidence$186:kantan.regex.GroupDecoder[I15],implicitevidence$187:kantan.regex.GroupDecoder[I16],implicitevidence$188:kantan.regex.GroupDecoder[I17],implicitevidence$189:kantan.regex.GroupDecoder[I18],implicitevidence$190:kantan.regex.GroupDecoder[I19]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]", "kind" : "implicit def"}, {"label" : "tuple18", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17], arg17: GroupDecoder[I18]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]", "member" : "kantan.regex.TupleDecoders.tuple18", "link" : "kantan\/regex\/TupleDecoders.html#tuple18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](implicitevidence$154:kantan.regex.GroupDecoder[I1],implicitevidence$155:kantan.regex.GroupDecoder[I2],implicitevidence$156:kantan.regex.GroupDecoder[I3],implicitevidence$157:kantan.regex.GroupDecoder[I4],implicitevidence$158:kantan.regex.GroupDecoder[I5],implicitevidence$159:kantan.regex.GroupDecoder[I6],implicitevidence$160:kantan.regex.GroupDecoder[I7],implicitevidence$161:kantan.regex.GroupDecoder[I8],implicitevidence$162:kantan.regex.GroupDecoder[I9],implicitevidence$163:kantan.regex.GroupDecoder[I10],implicitevidence$164:kantan.regex.GroupDecoder[I11],implicitevidence$165:kantan.regex.GroupDecoder[I12],implicitevidence$166:kantan.regex.GroupDecoder[I13],implicitevidence$167:kantan.regex.GroupDecoder[I14],implicitevidence$168:kantan.regex.GroupDecoder[I15],implicitevidence$169:kantan.regex.GroupDecoder[I16],implicitevidence$170:kantan.regex.GroupDecoder[I17],implicitevidence$171:kantan.regex.GroupDecoder[I18]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]", "kind" : "implicit def"}, {"label" : "tuple17", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16], arg16: GroupDecoder[I17]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]", "member" : "kantan.regex.TupleDecoders.tuple17", "link" : "kantan\/regex\/TupleDecoders.html#tuple17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](implicitevidence$137:kantan.regex.GroupDecoder[I1],implicitevidence$138:kantan.regex.GroupDecoder[I2],implicitevidence$139:kantan.regex.GroupDecoder[I3],implicitevidence$140:kantan.regex.GroupDecoder[I4],implicitevidence$141:kantan.regex.GroupDecoder[I5],implicitevidence$142:kantan.regex.GroupDecoder[I6],implicitevidence$143:kantan.regex.GroupDecoder[I7],implicitevidence$144:kantan.regex.GroupDecoder[I8],implicitevidence$145:kantan.regex.GroupDecoder[I9],implicitevidence$146:kantan.regex.GroupDecoder[I10],implicitevidence$147:kantan.regex.GroupDecoder[I11],implicitevidence$148:kantan.regex.GroupDecoder[I12],implicitevidence$149:kantan.regex.GroupDecoder[I13],implicitevidence$150:kantan.regex.GroupDecoder[I14],implicitevidence$151:kantan.regex.GroupDecoder[I15],implicitevidence$152:kantan.regex.GroupDecoder[I16],implicitevidence$153:kantan.regex.GroupDecoder[I17]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]", "kind" : "implicit def"}, {"label" : "tuple16", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15], arg15: GroupDecoder[I16]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]", "member" : "kantan.regex.TupleDecoders.tuple16", "link" : "kantan\/regex\/TupleDecoders.html#tuple16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](implicitevidence$121:kantan.regex.GroupDecoder[I1],implicitevidence$122:kantan.regex.GroupDecoder[I2],implicitevidence$123:kantan.regex.GroupDecoder[I3],implicitevidence$124:kantan.regex.GroupDecoder[I4],implicitevidence$125:kantan.regex.GroupDecoder[I5],implicitevidence$126:kantan.regex.GroupDecoder[I6],implicitevidence$127:kantan.regex.GroupDecoder[I7],implicitevidence$128:kantan.regex.GroupDecoder[I8],implicitevidence$129:kantan.regex.GroupDecoder[I9],implicitevidence$130:kantan.regex.GroupDecoder[I10],implicitevidence$131:kantan.regex.GroupDecoder[I11],implicitevidence$132:kantan.regex.GroupDecoder[I12],implicitevidence$133:kantan.regex.GroupDecoder[I13],implicitevidence$134:kantan.regex.GroupDecoder[I14],implicitevidence$135:kantan.regex.GroupDecoder[I15],implicitevidence$136:kantan.regex.GroupDecoder[I16]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]", "kind" : "implicit def"}, {"label" : "tuple15", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14], arg14: GroupDecoder[I15]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]", "member" : "kantan.regex.TupleDecoders.tuple15", "link" : "kantan\/regex\/TupleDecoders.html#tuple15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](implicitevidence$106:kantan.regex.GroupDecoder[I1],implicitevidence$107:kantan.regex.GroupDecoder[I2],implicitevidence$108:kantan.regex.GroupDecoder[I3],implicitevidence$109:kantan.regex.GroupDecoder[I4],implicitevidence$110:kantan.regex.GroupDecoder[I5],implicitevidence$111:kantan.regex.GroupDecoder[I6],implicitevidence$112:kantan.regex.GroupDecoder[I7],implicitevidence$113:kantan.regex.GroupDecoder[I8],implicitevidence$114:kantan.regex.GroupDecoder[I9],implicitevidence$115:kantan.regex.GroupDecoder[I10],implicitevidence$116:kantan.regex.GroupDecoder[I11],implicitevidence$117:kantan.regex.GroupDecoder[I12],implicitevidence$118:kantan.regex.GroupDecoder[I13],implicitevidence$119:kantan.regex.GroupDecoder[I14],implicitevidence$120:kantan.regex.GroupDecoder[I15]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]", "kind" : "implicit def"}, {"label" : "tuple14", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13], arg13: GroupDecoder[I14]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]", "member" : "kantan.regex.TupleDecoders.tuple14", "link" : "kantan\/regex\/TupleDecoders.html#tuple14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](implicitevidence$92:kantan.regex.GroupDecoder[I1],implicitevidence$93:kantan.regex.GroupDecoder[I2],implicitevidence$94:kantan.regex.GroupDecoder[I3],implicitevidence$95:kantan.regex.GroupDecoder[I4],implicitevidence$96:kantan.regex.GroupDecoder[I5],implicitevidence$97:kantan.regex.GroupDecoder[I6],implicitevidence$98:kantan.regex.GroupDecoder[I7],implicitevidence$99:kantan.regex.GroupDecoder[I8],implicitevidence$100:kantan.regex.GroupDecoder[I9],implicitevidence$101:kantan.regex.GroupDecoder[I10],implicitevidence$102:kantan.regex.GroupDecoder[I11],implicitevidence$103:kantan.regex.GroupDecoder[I12],implicitevidence$104:kantan.regex.GroupDecoder[I13],implicitevidence$105:kantan.regex.GroupDecoder[I14]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]", "kind" : "implicit def"}, {"label" : "tuple13", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12], arg12: GroupDecoder[I13]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]", "member" : "kantan.regex.TupleDecoders.tuple13", "link" : "kantan\/regex\/TupleDecoders.html#tuple13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](implicitevidence$79:kantan.regex.GroupDecoder[I1],implicitevidence$80:kantan.regex.GroupDecoder[I2],implicitevidence$81:kantan.regex.GroupDecoder[I3],implicitevidence$82:kantan.regex.GroupDecoder[I4],implicitevidence$83:kantan.regex.GroupDecoder[I5],implicitevidence$84:kantan.regex.GroupDecoder[I6],implicitevidence$85:kantan.regex.GroupDecoder[I7],implicitevidence$86:kantan.regex.GroupDecoder[I8],implicitevidence$87:kantan.regex.GroupDecoder[I9],implicitevidence$88:kantan.regex.GroupDecoder[I10],implicitevidence$89:kantan.regex.GroupDecoder[I11],implicitevidence$90:kantan.regex.GroupDecoder[I12],implicitevidence$91:kantan.regex.GroupDecoder[I13]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]", "kind" : "implicit def"}, {"label" : "tuple12", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11], arg11: GroupDecoder[I12]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]", "member" : "kantan.regex.TupleDecoders.tuple12", "link" : "kantan\/regex\/TupleDecoders.html#tuple12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](implicitevidence$67:kantan.regex.GroupDecoder[I1],implicitevidence$68:kantan.regex.GroupDecoder[I2],implicitevidence$69:kantan.regex.GroupDecoder[I3],implicitevidence$70:kantan.regex.GroupDecoder[I4],implicitevidence$71:kantan.regex.GroupDecoder[I5],implicitevidence$72:kantan.regex.GroupDecoder[I6],implicitevidence$73:kantan.regex.GroupDecoder[I7],implicitevidence$74:kantan.regex.GroupDecoder[I8],implicitevidence$75:kantan.regex.GroupDecoder[I9],implicitevidence$76:kantan.regex.GroupDecoder[I10],implicitevidence$77:kantan.regex.GroupDecoder[I11],implicitevidence$78:kantan.regex.GroupDecoder[I12]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]", "kind" : "implicit def"}, {"label" : "tuple11", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10], arg10: GroupDecoder[I11]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]", "member" : "kantan.regex.TupleDecoders.tuple11", "link" : "kantan\/regex\/TupleDecoders.html#tuple11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](implicitevidence$56:kantan.regex.GroupDecoder[I1],implicitevidence$57:kantan.regex.GroupDecoder[I2],implicitevidence$58:kantan.regex.GroupDecoder[I3],implicitevidence$59:kantan.regex.GroupDecoder[I4],implicitevidence$60:kantan.regex.GroupDecoder[I5],implicitevidence$61:kantan.regex.GroupDecoder[I6],implicitevidence$62:kantan.regex.GroupDecoder[I7],implicitevidence$63:kantan.regex.GroupDecoder[I8],implicitevidence$64:kantan.regex.GroupDecoder[I9],implicitevidence$65:kantan.regex.GroupDecoder[I10],implicitevidence$66:kantan.regex.GroupDecoder[I11]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]", "kind" : "implicit def"}, {"label" : "tuple10", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9], arg9: GroupDecoder[I10]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]", "member" : "kantan.regex.TupleDecoders.tuple10", "link" : "kantan\/regex\/TupleDecoders.html#tuple10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](implicitevidence$46:kantan.regex.GroupDecoder[I1],implicitevidence$47:kantan.regex.GroupDecoder[I2],implicitevidence$48:kantan.regex.GroupDecoder[I3],implicitevidence$49:kantan.regex.GroupDecoder[I4],implicitevidence$50:kantan.regex.GroupDecoder[I5],implicitevidence$51:kantan.regex.GroupDecoder[I6],implicitevidence$52:kantan.regex.GroupDecoder[I7],implicitevidence$53:kantan.regex.GroupDecoder[I8],implicitevidence$54:kantan.regex.GroupDecoder[I9],implicitevidence$55:kantan.regex.GroupDecoder[I10]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]", "kind" : "implicit def"}, {"label" : "tuple9", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8], arg8: GroupDecoder[I9]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]", "member" : "kantan.regex.TupleDecoders.tuple9", "link" : "kantan\/regex\/TupleDecoders.html#tuple9[I1,I2,I3,I4,I5,I6,I7,I8,I9](implicitevidence$37:kantan.regex.GroupDecoder[I1],implicitevidence$38:kantan.regex.GroupDecoder[I2],implicitevidence$39:kantan.regex.GroupDecoder[I3],implicitevidence$40:kantan.regex.GroupDecoder[I4],implicitevidence$41:kantan.regex.GroupDecoder[I5],implicitevidence$42:kantan.regex.GroupDecoder[I6],implicitevidence$43:kantan.regex.GroupDecoder[I7],implicitevidence$44:kantan.regex.GroupDecoder[I8],implicitevidence$45:kantan.regex.GroupDecoder[I9]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]", "kind" : "implicit def"}, {"label" : "tuple8", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7], arg7: GroupDecoder[I8]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7, I8)]", "member" : "kantan.regex.TupleDecoders.tuple8", "link" : "kantan\/regex\/TupleDecoders.html#tuple8[I1,I2,I3,I4,I5,I6,I7,I8](implicitevidence$29:kantan.regex.GroupDecoder[I1],implicitevidence$30:kantan.regex.GroupDecoder[I2],implicitevidence$31:kantan.regex.GroupDecoder[I3],implicitevidence$32:kantan.regex.GroupDecoder[I4],implicitevidence$33:kantan.regex.GroupDecoder[I5],implicitevidence$34:kantan.regex.GroupDecoder[I6],implicitevidence$35:kantan.regex.GroupDecoder[I7],implicitevidence$36:kantan.regex.GroupDecoder[I8]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7,I8)]", "kind" : "implicit def"}, {"label" : "tuple7", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6], arg6: GroupDecoder[I7]): MatchDecoder[(I1, I2, I3, I4, I5, I6, I7)]", "member" : "kantan.regex.TupleDecoders.tuple7", "link" : "kantan\/regex\/TupleDecoders.html#tuple7[I1,I2,I3,I4,I5,I6,I7](implicitevidence$22:kantan.regex.GroupDecoder[I1],implicitevidence$23:kantan.regex.GroupDecoder[I2],implicitevidence$24:kantan.regex.GroupDecoder[I3],implicitevidence$25:kantan.regex.GroupDecoder[I4],implicitevidence$26:kantan.regex.GroupDecoder[I5],implicitevidence$27:kantan.regex.GroupDecoder[I6],implicitevidence$28:kantan.regex.GroupDecoder[I7]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6,I7)]", "kind" : "implicit def"}, {"label" : "tuple6", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5], arg5: GroupDecoder[I6]): MatchDecoder[(I1, I2, I3, I4, I5, I6)]", "member" : "kantan.regex.TupleDecoders.tuple6", "link" : "kantan\/regex\/TupleDecoders.html#tuple6[I1,I2,I3,I4,I5,I6](implicitevidence$16:kantan.regex.GroupDecoder[I1],implicitevidence$17:kantan.regex.GroupDecoder[I2],implicitevidence$18:kantan.regex.GroupDecoder[I3],implicitevidence$19:kantan.regex.GroupDecoder[I4],implicitevidence$20:kantan.regex.GroupDecoder[I5],implicitevidence$21:kantan.regex.GroupDecoder[I6]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5,I6)]", "kind" : "implicit def"}, {"label" : "tuple5", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4], arg4: GroupDecoder[I5]): MatchDecoder[(I1, I2, I3, I4, I5)]", "member" : "kantan.regex.TupleDecoders.tuple5", "link" : "kantan\/regex\/TupleDecoders.html#tuple5[I1,I2,I3,I4,I5](implicitevidence$11:kantan.regex.GroupDecoder[I1],implicitevidence$12:kantan.regex.GroupDecoder[I2],implicitevidence$13:kantan.regex.GroupDecoder[I3],implicitevidence$14:kantan.regex.GroupDecoder[I4],implicitevidence$15:kantan.regex.GroupDecoder[I5]):kantan.regex.MatchDecoder[(I1,I2,I3,I4,I5)]", "kind" : "implicit def"}, {"label" : "tuple4", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3], arg3: GroupDecoder[I4]): MatchDecoder[(I1, I2, I3, I4)]", "member" : "kantan.regex.TupleDecoders.tuple4", "link" : "kantan\/regex\/TupleDecoders.html#tuple4[I1,I2,I3,I4](implicitevidence$7:kantan.regex.GroupDecoder[I1],implicitevidence$8:kantan.regex.GroupDecoder[I2],implicitevidence$9:kantan.regex.GroupDecoder[I3],implicitevidence$10:kantan.regex.GroupDecoder[I4]):kantan.regex.MatchDecoder[(I1,I2,I3,I4)]", "kind" : "implicit def"}, {"label" : "tuple3", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2], arg2: GroupDecoder[I3]): MatchDecoder[(I1, I2, I3)]", "member" : "kantan.regex.TupleDecoders.tuple3", "link" : "kantan\/regex\/TupleDecoders.html#tuple3[I1,I2,I3](implicitevidence$4:kantan.regex.GroupDecoder[I1],implicitevidence$5:kantan.regex.GroupDecoder[I2],implicitevidence$6:kantan.regex.GroupDecoder[I3]):kantan.regex.MatchDecoder[(I1,I2,I3)]", "kind" : "implicit def"}, {"label" : "tuple2", "tail" : "(arg0: GroupDecoder[I1], arg1: GroupDecoder[I2]): MatchDecoder[(I1, I2)]", "member" : "kantan.regex.TupleDecoders.tuple2", "link" : "kantan\/regex\/TupleDecoders.html#tuple2[I1,I2](implicitevidence$2:kantan.regex.GroupDecoder[I1],implicitevidence$3:kantan.regex.GroupDecoder[I2]):kantan.regex.MatchDecoder[(I1,I2)]", "kind" : "implicit def"}, {"label" : "tuple1", "tail" : "(arg0: GroupDecoder[I1]): MatchDecoder[(I1)]", "member" : "kantan.regex.TupleDecoders.tuple1", "link" : "kantan\/regex\/TupleDecoders.html#tuple1[I1](implicitevidence$1:kantan.regex.GroupDecoder[I1]):kantan.regex.MatchDecoder[(I1,)]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/TupleDecoders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/TupleDecoders.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/TupleDecoders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/TupleDecoders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/TupleDecoders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/TupleDecoders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/TupleDecoders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/TupleDecoders.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/TupleDecoders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/TupleDecoders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/TupleDecoders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/TupleDecoders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/TupleDecoders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/TupleDecoders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/TupleDecoders.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/TupleDecoders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/TupleDecoders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/TupleDecoders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/TupleDecoders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "kantan.regex.laws.discipline" : [{"name" : "kantan.regex.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/regex\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "arbIllegalMatch", "tail" : "(ia: Arbitrary[IllegalString[A]]): Arbitrary[IllegalMatch[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbIllegalMatch", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalMatch[A](implicitia:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[A]]", "kind" : "implicit def"}, {"label" : "arbLegalMatch", "tail" : "(la: Arbitrary[LegalString[A]]): Arbitrary[LegalMatch[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbLegalMatch", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalMatch[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[A]]", "kind" : "implicit def"}, {"label" : "toMatch", "tail" : "(str: String): Match", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.toMatch", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#toMatch(str:String):kantan.regex.Match", "kind" : "def"}, {"label" : "cogenMatch", "tail" : ": Cogen[Match]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenMatch", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenMatch:org.scalacheck.Cogen[kantan.regex.Match]", "kind" : "implicit val"}, {"label" : "arbIllegalGroupOpt", "tail" : "(la: Arbitrary[IllegalString[A]]): Arbitrary[IllegalGroup[Option[A]]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbIllegalGroupOpt", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalGroupOpt[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalGroup[Option[A]]]", "kind" : "implicit def"}, {"label" : "arbLegalGroupOpt", "tail" : "(la: Arbitrary[LegalString[A]]): Arbitrary[LegalGroup[Option[A]]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbLegalGroupOpt", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalGroupOpt[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalGroup[Option[A]]]", "kind" : "implicit def"}, {"label" : "arbIllegalGroup", "tail" : "(la: Arbitrary[IllegalString[A]]): Arbitrary[IllegalGroup[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbIllegalGroup", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalGroup[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalGroup[A]]", "kind" : "implicit def"}, {"label" : "arbLegalGroup", "tail" : "(la: Arbitrary[LegalString[A]]): Arbitrary[LegalGroup[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbLegalGroup", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalGroup[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalGroup[A]]", "kind" : "implicit def"}, {"label" : "arbDecodeResult", "tail" : "(arg0: Arbitrary[A]): Arbitrary[DecodeResult[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbDecodeResult", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbDecodeResult[A](implicitevidence$2:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.regex.DecodeResult[A]]", "kind" : "implicit def"}, {"label" : "cogenRegexError", "tail" : ": Cogen[RegexError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexError", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenRegexError:org.scalacheck.Cogen[kantan.regex.RegexError]", "kind" : "implicit val"}, {"label" : "cogenRegexDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexDecodeError", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenRegexDecodeError:org.scalacheck.Cogen[kantan.regex.DecodeError]", "kind" : "implicit val"}, {"label" : "cogenRegexEmptyGroup", "tail" : ": Cogen[EmptyGroup.type]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexEmptyGroup", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenRegexEmptyGroup:org.scalacheck.Cogen[kantan.regex.DecodeError.EmptyGroup.type]", "kind" : "implicit val"}, {"label" : "cogenRegexNoSuchGroupId", "tail" : ": Cogen[NoSuchGroupId]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexNoSuchGroupId", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenRegexNoSuchGroupId:org.scalacheck.Cogen[kantan.regex.DecodeError.NoSuchGroupId]", "kind" : "implicit val"}, {"label" : "cogenRegexTypeError", "tail" : ": Cogen[TypeError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexTypeError", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenRegexTypeError:org.scalacheck.Cogen[kantan.regex.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "cogenRegexCompileError", "tail" : ": Cogen[CompileError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexCompileError", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenRegexCompileError:org.scalacheck.Cogen[kantan.regex.CompileError]", "kind" : "implicit val"}, {"label" : "arbRegexError", "tail" : ": Arbitrary[RegexError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbRegexError", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbRegexError:org.scalacheck.Arbitrary[kantan.regex.RegexError]", "kind" : "implicit val"}, {"label" : "arbDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbDecodeError", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbDecodeError:org.scalacheck.Arbitrary[kantan.regex.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEmptyGroup", "tail" : ": Arbitrary[EmptyGroup.type]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbEmptyGroup", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbEmptyGroup:org.scalacheck.Arbitrary[kantan.regex.DecodeError.EmptyGroup.type]", "kind" : "implicit val"}, {"label" : "arbNoSuchGroupId", "tail" : ": Arbitrary[NoSuchGroupId]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbNoSuchGroupId", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbNoSuchGroupId:org.scalacheck.Arbitrary[kantan.regex.DecodeError.NoSuchGroupId]", "kind" : "implicit val"}, {"label" : "arbTypeError", "tail" : ": Arbitrary[TypeError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbTypeError", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbTypeError:org.scalacheck.Arbitrary[kantan.regex.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "arbCompileError", "tail" : ": Arbitrary[CompileError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbCompileError", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbCompileError:org.scalacheck.Arbitrary[kantan.regex.CompileError]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : "(arg0: Arbitrary[A]): Arbitrary[Regex[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbRegex", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbRegex[A](implicitevidence$1:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.regex.Regex[A]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple22", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]], ai22: Arbitrary[IllegalString[I22]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]],implicitai22:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple22", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]], al22: Arbitrary[LegalString[I22]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]],implicital22:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass22", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]], ai22: Arbitrary[IllegalString[I22]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass22", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]],implicitai22:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass22", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]], al22: Arbitrary[LegalString[I22]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass22", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]],implicital22:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern22", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern22", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern22:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple21", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple21", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass21", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass21", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass21", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass21", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern21", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern21", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern21:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple20", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple20", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass20", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass20", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass20", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass20", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern20", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern20", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern20:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple19", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple19", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass19", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass19", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass19", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass19", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern19", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern19", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern19:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple18", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple18", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass18", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass18", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass18", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass18", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern18", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern18", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern18:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple17", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple17", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass17", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass17", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass17", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass17", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern17", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern17", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern17:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple16", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple16", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass16", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass16", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass16", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass16", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern16", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern16", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern16:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple15", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple15", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass15", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass15", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass15", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass15", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern15", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern15", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern15:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple14", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple14", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass14", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass14", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass14", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass14", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern14", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern14", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern14:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple13", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple13", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass13", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass13", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass13", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass13", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern13", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern13", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern13:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple12", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple12", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass12", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass12", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass12", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass12", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern12", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern12", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern12:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple11", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple11", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass11", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass11", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass11", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass11", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern11", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern11", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern11:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple10", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple10", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass10", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass10", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass10", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass10", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern10", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern10", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern10:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple9", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple9[I1,I2,I3,I4,I5,I6,I7,I8,I9](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple9", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple9[I1,I2,I3,I4,I5,I6,I7,I8,I9](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass9", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass9", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass9[I1,I2,I3,I4,I5,I6,I7,I8,I9,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass9", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass9", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass9[I1,I2,I3,I4,I5,I6,I7,I8,I9,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern9", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern9", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern9:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple8", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple8[I1,I2,I3,I4,I5,I6,I7,I8](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple8", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple8[I1,I2,I3,I4,I5,I6,I7,I8](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass8", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass8", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass8[I1,I2,I3,I4,I5,I6,I7,I8,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass8", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass8", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass8[I1,I2,I3,I4,I5,I6,I7,I8,O](f:(I1,I2,I3,I4,I5,I6,I7,I8)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern8", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern8", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern8:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple7", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple7[I1,I2,I3,I4,I5,I6,I7](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple7", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple7[I1,I2,I3,I4,I5,I6,I7](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass7", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass7", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass7[I1,I2,I3,I4,I5,I6,I7,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass7", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass7", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass7[I1,I2,I3,I4,I5,I6,I7,O](f:(I1,I2,I3,I4,I5,I6,I7)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern7", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern7", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern7:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple6", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple6[I1,I2,I3,I4,I5,I6](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple6", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple6[I1,I2,I3,I4,I5,I6](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass6", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass6", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass6[I1,I2,I3,I4,I5,I6,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass6", "tail" : "(f: (I1, I2, I3, I4, I5, I6) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass6", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass6[I1,I2,I3,I4,I5,I6,O](f:(I1,I2,I3,I4,I5,I6)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern6", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern6", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern6:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple5", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple5[I1,I2,I3,I4,I5](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple5", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple5[I1,I2,I3,I4,I5](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass5", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass5", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass5[I1,I2,I3,I4,I5,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass5", "tail" : "(f: (I1, I2, I3, I4, I5) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass5", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass5[I1,I2,I3,I4,I5,O](f:(I1,I2,I3,I4,I5)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern5", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern5", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern5:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple4", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple4[I1,I2,I3,I4](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple4", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]]): Arbitrary[LegalMatch[(I1, I2, I3, I4)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple4[I1,I2,I3,I4](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass4", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass4", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass4[I1,I2,I3,I4,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass4", "tail" : "(f: (I1, I2, I3, I4) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass4", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass4[I1,I2,I3,I4,O](f:(I1,I2,I3,I4)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern4", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern4", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern4:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple3", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]]): Arbitrary[IllegalMatch[(I1, I2, I3)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple3[I1,I2,I3](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple3", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]]): Arbitrary[LegalMatch[(I1, I2, I3)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple3[I1,I2,I3](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass3", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass3", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass3[I1,I2,I3,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass3", "tail" : "(f: (I1, I2, I3) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass3", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass3[I1,I2,I3,O](f:(I1,I2,I3)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern3", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern3", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern3:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple2", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]]): Arbitrary[IllegalMatch[(I1, I2)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple2[I1,I2](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple2", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]]): Arbitrary[LegalMatch[(I1, I2)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple2[I1,I2](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass2", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass2", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass2[I1,I2,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass2", "tail" : "(f: (I1, I2) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass2", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass2[I1,I2,O](f:(I1,I2)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern2", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern2", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern2:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple1", "tail" : "(ai1: Arbitrary[IllegalString[I1]]): Arbitrary[IllegalMatch[(I1)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalTuple1[I1](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple1", "tail" : "(al1: Arbitrary[LegalString[I1]]): Arbitrary[LegalMatch[(I1)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalTuple1[I1](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass1", "tail" : "(ai1: Arbitrary[IllegalString[I1]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass1", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalCaseClass1[I1,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass1", "tail" : "(f: (I1) => O)(al1: Arbitrary[LegalString[I1]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass1", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalCaseClass1[I1,O](f:I1=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern1", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern1", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#pattern1:java.util.regex.Pattern", "kind" : "val"}, {"label" : "toMatch", "tail" : "(p: java.util.regex.Pattern, is: String*): Match", "member" : "kantan.regex.laws.discipline.ArbitraryArities.toMatch", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#toMatch(p:java.util.regex.Pattern,is:String*):kantan.regex.Match", "kind" : "def"}, {"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbEncoder[E,D,T](implicitevidence$7:org.scalacheck.Arbitrary[E],implicitevidence$8:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Cogen[E], arg1: Arbitrary[D], arg2: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Cogen[E],implicitevidence$5:org.scalacheck.Arbitrary[D],implicitevidence$6:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[scala.util.matching.Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[scala.util.matching.Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[java.util.regex.Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[java.util.regex.Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[java.util.regex.Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.regex.laws.discipline.ArbitraryArities", "trait" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html", "kind" : "trait", "members_trait" : [{"label" : "arbIllegalTuple22", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]], ai22: Arbitrary[IllegalString[I22]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]],implicitai22:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple22", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]], al22: Arbitrary[LegalString[I22]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]],implicital22:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass22", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]], ai22: Arbitrary[IllegalString[I22]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]],implicitai22:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass22", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]], al22: Arbitrary[LegalString[I22]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]],implicital22:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern22", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern22:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple21", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple21", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass21", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass21", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern21", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern21:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple20", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple20", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass20", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass20", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern20", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern20:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple19", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple19", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass19", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass19", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern19", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern19:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple18", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple18", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass18", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass18", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern18", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern18:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple17", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple17", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass17", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass17", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern17", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern17:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple16", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple16", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass16", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass16", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern16", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern16:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple15", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple15", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass15", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass15", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern15", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern15:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple14", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple14", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass14", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass14", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern14", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern14:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple13", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple13", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass13", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass13", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern13", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern13:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple12", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple12", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass12", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass12", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern12", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern12:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple11", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple11", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass11", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass11", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern11", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern11:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple10", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple10", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass10", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass10", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern10", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern10:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple9", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple9[I1,I2,I3,I4,I5,I6,I7,I8,I9](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple9", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple9[I1,I2,I3,I4,I5,I6,I7,I8,I9](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass9", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass9[I1,I2,I3,I4,I5,I6,I7,I8,I9,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass9", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass9[I1,I2,I3,I4,I5,I6,I7,I8,I9,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern9", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern9:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple8", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple8[I1,I2,I3,I4,I5,I6,I7,I8](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple8", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple8[I1,I2,I3,I4,I5,I6,I7,I8](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass8", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass8[I1,I2,I3,I4,I5,I6,I7,I8,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass8", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass8[I1,I2,I3,I4,I5,I6,I7,I8,O](f:(I1,I2,I3,I4,I5,I6,I7,I8)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern8", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern8:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple7", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple7[I1,I2,I3,I4,I5,I6,I7](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple7", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple7[I1,I2,I3,I4,I5,I6,I7](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass7", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass7[I1,I2,I3,I4,I5,I6,I7,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass7", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass7[I1,I2,I3,I4,I5,I6,I7,O](f:(I1,I2,I3,I4,I5,I6,I7)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern7", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern7:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple6", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple6[I1,I2,I3,I4,I5,I6](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple6", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple6[I1,I2,I3,I4,I5,I6](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass6", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass6[I1,I2,I3,I4,I5,I6,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass6", "tail" : "(f: (I1, I2, I3, I4, I5, I6) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass6[I1,I2,I3,I4,I5,I6,O](f:(I1,I2,I3,I4,I5,I6)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern6", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern6:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple5", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple5[I1,I2,I3,I4,I5](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple5", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple5[I1,I2,I3,I4,I5](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass5", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass5[I1,I2,I3,I4,I5,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass5", "tail" : "(f: (I1, I2, I3, I4, I5) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass5[I1,I2,I3,I4,I5,O](f:(I1,I2,I3,I4,I5)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern5", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern5:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple4", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple4[I1,I2,I3,I4](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple4", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]]): Arbitrary[LegalMatch[(I1, I2, I3, I4)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple4[I1,I2,I3,I4](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass4", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass4[I1,I2,I3,I4,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass4", "tail" : "(f: (I1, I2, I3, I4) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass4[I1,I2,I3,I4,O](f:(I1,I2,I3,I4)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern4", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern4:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple3", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]]): Arbitrary[IllegalMatch[(I1, I2, I3)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple3[I1,I2,I3](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple3", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]]): Arbitrary[LegalMatch[(I1, I2, I3)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple3[I1,I2,I3](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass3", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass3[I1,I2,I3,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass3", "tail" : "(f: (I1, I2, I3) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass3[I1,I2,I3,O](f:(I1,I2,I3)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern3", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern3:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple2", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]]): Arbitrary[IllegalMatch[(I1, I2)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple2[I1,I2](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple2", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]]): Arbitrary[LegalMatch[(I1, I2)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple2[I1,I2](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass2", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass2[I1,I2,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass2", "tail" : "(f: (I1, I2) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass2[I1,I2,O](f:(I1,I2)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern2", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern2:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple1", "tail" : "(ai1: Arbitrary[IllegalString[I1]]): Arbitrary[IllegalMatch[(I1)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalTuple1[I1](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple1", "tail" : "(al1: Arbitrary[LegalString[I1]]): Arbitrary[LegalMatch[(I1)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalTuple1[I1](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass1", "tail" : "(ai1: Arbitrary[IllegalString[I1]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalCaseClass1[I1,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass1", "tail" : "(f: (I1) => O)(al1: Arbitrary[LegalString[I1]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalCaseClass1[I1,O](f:I1=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern1", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#pattern1:java.util.regex.Pattern", "kind" : "val"}, {"label" : "toMatch", "tail" : "(p: java.util.regex.Pattern, is: String*): Match", "member" : "kantan.regex.laws.discipline.ArbitraryArities.toMatch", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#toMatch(p:java.util.regex.Pattern,is:String*):kantan.regex.Match", "kind" : "def"}, {"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbEncoder[E,D,T](implicitevidence$7:org.scalacheck.Arbitrary[E],implicitevidence$8:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Cogen[E], arg1: Arbitrary[D], arg2: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Cogen[E],implicitevidence$5:org.scalacheck.Arbitrary[D],implicitevidence$6:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[scala.util.matching.Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[scala.util.matching.Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[java.util.regex.Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[java.util.regex.Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[java.util.regex.Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryArities.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.regex.laws.discipline.ArbitraryInstances", "trait" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait", "members_trait" : [{"label" : "arbIllegalMatch", "tail" : "(ia: Arbitrary[IllegalString[A]]): Arbitrary[IllegalMatch[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbIllegalMatch", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalMatch[A](implicitia:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[A]]", "kind" : "implicit def"}, {"label" : "arbLegalMatch", "tail" : "(la: Arbitrary[LegalString[A]]): Arbitrary[LegalMatch[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbLegalMatch", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalMatch[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[A]]", "kind" : "implicit def"}, {"label" : "toMatch", "tail" : "(str: String): Match", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.toMatch", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#toMatch(str:String):kantan.regex.Match", "kind" : "def"}, {"label" : "cogenMatch", "tail" : ": Cogen[Match]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenMatch", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenMatch:org.scalacheck.Cogen[kantan.regex.Match]", "kind" : "implicit val"}, {"label" : "arbIllegalGroupOpt", "tail" : "(la: Arbitrary[IllegalString[A]]): Arbitrary[IllegalGroup[Option[A]]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbIllegalGroupOpt", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalGroupOpt[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalGroup[Option[A]]]", "kind" : "implicit def"}, {"label" : "arbLegalGroupOpt", "tail" : "(la: Arbitrary[LegalString[A]]): Arbitrary[LegalGroup[Option[A]]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbLegalGroupOpt", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalGroupOpt[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalGroup[Option[A]]]", "kind" : "implicit def"}, {"label" : "arbIllegalGroup", "tail" : "(la: Arbitrary[IllegalString[A]]): Arbitrary[IllegalGroup[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbIllegalGroup", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalGroup[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalGroup[A]]", "kind" : "implicit def"}, {"label" : "arbLegalGroup", "tail" : "(la: Arbitrary[LegalString[A]]): Arbitrary[LegalGroup[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbLegalGroup", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalGroup[A](implicitla:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[A]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalGroup[A]]", "kind" : "implicit def"}, {"label" : "arbDecodeResult", "tail" : "(arg0: Arbitrary[A]): Arbitrary[DecodeResult[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbDecodeResult", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbDecodeResult[A](implicitevidence$2:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.regex.DecodeResult[A]]", "kind" : "implicit def"}, {"label" : "cogenRegexError", "tail" : ": Cogen[RegexError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenRegexError:org.scalacheck.Cogen[kantan.regex.RegexError]", "kind" : "implicit val"}, {"label" : "cogenRegexDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexDecodeError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenRegexDecodeError:org.scalacheck.Cogen[kantan.regex.DecodeError]", "kind" : "implicit val"}, {"label" : "cogenRegexEmptyGroup", "tail" : ": Cogen[EmptyGroup.type]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexEmptyGroup", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenRegexEmptyGroup:org.scalacheck.Cogen[kantan.regex.DecodeError.EmptyGroup.type]", "kind" : "implicit val"}, {"label" : "cogenRegexNoSuchGroupId", "tail" : ": Cogen[NoSuchGroupId]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexNoSuchGroupId", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenRegexNoSuchGroupId:org.scalacheck.Cogen[kantan.regex.DecodeError.NoSuchGroupId]", "kind" : "implicit val"}, {"label" : "cogenRegexTypeError", "tail" : ": Cogen[TypeError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexTypeError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenRegexTypeError:org.scalacheck.Cogen[kantan.regex.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "cogenRegexCompileError", "tail" : ": Cogen[CompileError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.cogenRegexCompileError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenRegexCompileError:org.scalacheck.Cogen[kantan.regex.CompileError]", "kind" : "implicit val"}, {"label" : "arbRegexError", "tail" : ": Arbitrary[RegexError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbRegexError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbRegexError:org.scalacheck.Arbitrary[kantan.regex.RegexError]", "kind" : "implicit val"}, {"label" : "arbDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbDecodeError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbDecodeError:org.scalacheck.Arbitrary[kantan.regex.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEmptyGroup", "tail" : ": Arbitrary[EmptyGroup.type]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbEmptyGroup", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbEmptyGroup:org.scalacheck.Arbitrary[kantan.regex.DecodeError.EmptyGroup.type]", "kind" : "implicit val"}, {"label" : "arbNoSuchGroupId", "tail" : ": Arbitrary[NoSuchGroupId]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbNoSuchGroupId", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbNoSuchGroupId:org.scalacheck.Arbitrary[kantan.regex.DecodeError.NoSuchGroupId]", "kind" : "implicit val"}, {"label" : "arbTypeError", "tail" : ": Arbitrary[TypeError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbTypeError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbTypeError:org.scalacheck.Arbitrary[kantan.regex.DecodeError.TypeError]", "kind" : "implicit val"}, {"label" : "arbCompileError", "tail" : ": Arbitrary[CompileError]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbCompileError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbCompileError:org.scalacheck.Arbitrary[kantan.regex.CompileError]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : "(arg0: Arbitrary[A]): Arbitrary[Regex[A]]", "member" : "kantan.regex.laws.discipline.ArbitraryInstances.arbRegex", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbRegex[A](implicitevidence$1:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.regex.Regex[A]]", "kind" : "implicit def"}, {"label" : "arbIllegalTuple22", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]], ai22: Arbitrary[IllegalString[I22]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]],implicitai22:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple22", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]], al22: Arbitrary[LegalString[I22]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]],implicital22:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass22", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]], ai22: Arbitrary[IllegalString[I22]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]],implicitai22:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass22", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21, I22) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]], al22: Arbitrary[LegalString[I22]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass22[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,I22)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]],implicital22:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I22]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern22", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern22:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple21", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple21", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass21", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]], ai21: Arbitrary[IllegalString[I21]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]],implicitai21:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass21", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20, I21) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]], al21: Arbitrary[LegalString[I21]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass21[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,I21)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]],implicital21:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I21]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern21", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern21:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple20", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple20", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass20", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]], ai20: Arbitrary[IllegalString[I20]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]],implicitai20:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass20", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19, I20) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]], al20: Arbitrary[LegalString[I20]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass20[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,I20)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]],implicital20:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I20]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern20", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern20:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple19", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple19", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass19", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]], ai19: Arbitrary[IllegalString[I19]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]],implicitai19:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass19", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18, I19) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]], al19: Arbitrary[LegalString[I19]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass19[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,I19)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]],implicital19:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I19]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern19", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern19:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple18", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple18", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass18", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]], ai18: Arbitrary[IllegalString[I18]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]],implicitai18:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass18", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17, I18) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]], al18: Arbitrary[LegalString[I18]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass18[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,I18)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]],implicital18:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I18]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern18", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern18:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple17", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple17", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass17", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]], ai17: Arbitrary[IllegalString[I17]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]],implicitai17:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass17", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16, I17) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]], al17: Arbitrary[LegalString[I17]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass17[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,I17)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]],implicital17:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I17]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern17", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern17:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple16", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple16", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass16", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]], ai16: Arbitrary[IllegalString[I16]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]],implicitai16:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass16", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15, I16) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]], al16: Arbitrary[LegalString[I16]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass16[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,I16)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]],implicital16:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I16]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern16", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern16:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple15", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple15", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass15", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]], ai15: Arbitrary[IllegalString[I15]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]],implicitai15:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass15", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14, I15) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]], al15: Arbitrary[LegalString[I15]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass15[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,I15)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]],implicital15:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I15]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern15", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern15:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple14", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple14", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass14", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]], ai14: Arbitrary[IllegalString[I14]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]],implicitai14:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass14", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13, I14) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]], al14: Arbitrary[LegalString[I14]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass14[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,I14)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]],implicital14:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I14]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern14", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern14:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple13", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple13", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass13", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]], ai13: Arbitrary[IllegalString[I13]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]],implicitai13:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass13", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12, I13) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]], al13: Arbitrary[LegalString[I13]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass13[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,I13)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]],implicital13:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I13]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern13", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern13:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple12", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple12", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass12", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]], ai12: Arbitrary[IllegalString[I12]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]],implicitai12:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass12", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11, I12) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]], al12: Arbitrary[LegalString[I12]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass12[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,I12)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]],implicital12:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I12]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern12", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern12:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple11", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple11", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass11", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]], ai11: Arbitrary[IllegalString[I11]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]],implicitai11:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass11", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10, I11) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]], al11: Arbitrary[LegalString[I11]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass11[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,I11)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]],implicital11:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I11]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern11", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern11:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple10", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple10", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9, I10)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass10", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]], ai10: Arbitrary[IllegalString[I10]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]],implicitai10:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass10", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9, I10) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]], al10: Arbitrary[LegalString[I10]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass10[I1,I2,I3,I4,I5,I6,I7,I8,I9,I10,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9,I10)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]],implicital10:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I10]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern10", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern10:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple9", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple9[I1,I2,I3,I4,I5,I6,I7,I8,I9](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple9", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8, I9)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple9[I1,I2,I3,I4,I5,I6,I7,I8,I9](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8,I9)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass9", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]], ai9: Arbitrary[IllegalString[I9]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass9[I1,I2,I3,I4,I5,I6,I7,I8,I9,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]],implicitai9:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass9", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8, I9) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]], al9: Arbitrary[LegalString[I9]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass9[I1,I2,I3,I4,I5,I6,I7,I8,I9,O](f:(I1,I2,I3,I4,I5,I6,I7,I8,I9)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]],implicital9:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I9]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern9", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern9:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple8", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple8[I1,I2,I3,I4,I5,I6,I7,I8](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple8", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7, I8)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple8[I1,I2,I3,I4,I5,I6,I7,I8](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7,I8)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass8", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]], ai8: Arbitrary[IllegalString[I8]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass8[I1,I2,I3,I4,I5,I6,I7,I8,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]],implicitai8:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass8", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7, I8) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]], al8: Arbitrary[LegalString[I8]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass8[I1,I2,I3,I4,I5,I6,I7,I8,O](f:(I1,I2,I3,I4,I5,I6,I7,I8)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]],implicital8:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I8]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern8", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern8:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple7", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6, I7)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple7[I1,I2,I3,I4,I5,I6,I7](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6,I7)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple7", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6, I7)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple7[I1,I2,I3,I4,I5,I6,I7](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6,I7)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass7", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]], ai7: Arbitrary[IllegalString[I7]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass7[I1,I2,I3,I4,I5,I6,I7,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]],implicitai7:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass7", "tail" : "(f: (I1, I2, I3, I4, I5, I6, I7) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]], al7: Arbitrary[LegalString[I7]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass7[I1,I2,I3,I4,I5,I6,I7,O](f:(I1,I2,I3,I4,I5,I6,I7)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]],implicital7:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I7]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern7", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern7:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple6", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5, I6)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple6[I1,I2,I3,I4,I5,I6](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5,I6)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple6", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5, I6)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple6[I1,I2,I3,I4,I5,I6](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5,I6)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass6", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]], ai6: Arbitrary[IllegalString[I6]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass6[I1,I2,I3,I4,I5,I6,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]],implicitai6:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass6", "tail" : "(f: (I1, I2, I3, I4, I5, I6) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]], al6: Arbitrary[LegalString[I6]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass6[I1,I2,I3,I4,I5,I6,O](f:(I1,I2,I3,I4,I5,I6)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]],implicital6:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I6]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern6", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern6:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple5", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4, I5)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple5[I1,I2,I3,I4,I5](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4,I5)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple5", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]]): Arbitrary[LegalMatch[(I1, I2, I3, I4, I5)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple5[I1,I2,I3,I4,I5](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4,I5)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass5", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]], ai5: Arbitrary[IllegalString[I5]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass5[I1,I2,I3,I4,I5,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]],implicitai5:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass5", "tail" : "(f: (I1, I2, I3, I4, I5) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]], al5: Arbitrary[LegalString[I5]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass5[I1,I2,I3,I4,I5,O](f:(I1,I2,I3,I4,I5)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]],implicital5:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I5]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern5", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern5:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple4", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]]): Arbitrary[IllegalMatch[(I1, I2, I3, I4)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple4[I1,I2,I3,I4](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3,I4)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple4", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]]): Arbitrary[LegalMatch[(I1, I2, I3, I4)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple4[I1,I2,I3,I4](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3,I4)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass4", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]], ai4: Arbitrary[IllegalString[I4]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass4[I1,I2,I3,I4,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]],implicitai4:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass4", "tail" : "(f: (I1, I2, I3, I4) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]], al4: Arbitrary[LegalString[I4]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass4[I1,I2,I3,I4,O](f:(I1,I2,I3,I4)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]],implicital4:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I4]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern4", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern4:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple3", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]]): Arbitrary[IllegalMatch[(I1, I2, I3)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple3[I1,I2,I3](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2,I3)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple3", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]]): Arbitrary[LegalMatch[(I1, I2, I3)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple3[I1,I2,I3](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2,I3)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass3", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]], ai3: Arbitrary[IllegalString[I3]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass3[I1,I2,I3,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]],implicitai3:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass3", "tail" : "(f: (I1, I2, I3) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]], al3: Arbitrary[LegalString[I3]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass3[I1,I2,I3,O](f:(I1,I2,I3)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]],implicital3:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I3]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern3", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern3:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple2", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]]): Arbitrary[IllegalMatch[(I1, I2)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple2[I1,I2](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,I2)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple2", "tail" : "(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]]): Arbitrary[LegalMatch[(I1, I2)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple2[I1,I2](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,I2)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass2", "tail" : "(ai1: Arbitrary[IllegalString[I1]], ai2: Arbitrary[IllegalString[I2]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass2[I1,I2,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]],implicitai2:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass2", "tail" : "(f: (I1, I2) => O)(al1: Arbitrary[LegalString[I1]], al2: Arbitrary[LegalString[I2]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass2[I1,I2,O](f:(I1,I2)=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]],implicital2:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I2]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern2", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern2:java.util.regex.Pattern", "kind" : "val"}, {"label" : "arbIllegalTuple1", "tail" : "(ai1: Arbitrary[IllegalString[I1]]): Arbitrary[IllegalMatch[(I1)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalTuple1[I1](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[(I1,)]]", "kind" : "implicit def"}, {"label" : "arbLegalTuple1", "tail" : "(al1: Arbitrary[LegalString[I1]]): Arbitrary[LegalMatch[(I1)]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalTuple1[I1](implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[(I1,)]]", "kind" : "implicit def"}, {"label" : "arbIllegalCaseClass1", "tail" : "(ai1: Arbitrary[IllegalString[I1]]): Arbitrary[IllegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbIllegalCaseClass1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalCaseClass1[I1,O](implicitai1:org.scalacheck.Arbitrary[kantan.codecs.laws.IllegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.IllegalMatch[O]]", "kind" : "def"}, {"label" : "arbLegalCaseClass1", "tail" : "(f: (I1) => O)(al1: Arbitrary[LegalString[I1]]): Arbitrary[LegalMatch[O]]", "member" : "kantan.regex.laws.discipline.ArbitraryArities.arbLegalCaseClass1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalCaseClass1[I1,O](f:I1=>O)(implicital1:org.scalacheck.Arbitrary[kantan.codecs.laws.LegalString[I1]]):org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[O]]", "kind" : "def"}, {"label" : "pattern1", "tail" : ": java.util.regex.Pattern", "member" : "kantan.regex.laws.discipline.ArbitraryArities.pattern1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#pattern1:java.util.regex.Pattern", "kind" : "val"}, {"label" : "toMatch", "tail" : "(p: java.util.regex.Pattern, is: String*): Match", "member" : "kantan.regex.laws.discipline.ArbitraryArities.toMatch", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#toMatch(p:java.util.regex.Pattern,is:String*):kantan.regex.Match", "kind" : "def"}, {"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbTry", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : "(): Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbException", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit def"}, {"label" : "genException", "tail" : "(): Gen[Exception]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genException", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit def"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIoException", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genIllegalArgument", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenDate", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenUUID", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbUuid", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDate", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbBigDecimal", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[codecs.strings.DecodeError]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbStringDecodeError", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbEncoder", "tail" : "(arg0: Arbitrary[E], arg1: Cogen[D]): Arbitrary[Encoder[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbEncoder", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbEncoder[E,D,T](implicitevidence$7:org.scalacheck.Arbitrary[E],implicitevidence$8:org.scalacheck.Cogen[D]):org.scalacheck.Arbitrary[kantan.codecs.Encoder[E,D,T]]", "kind" : "implicit def"}, {"label" : "arbDecoder", "tail" : "(arg0: Cogen[E], arg1: Arbitrary[D], arg2: Arbitrary[F]): Arbitrary[Decoder[E, D, F, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbDecoder", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbDecoder[E,D,F,T](implicitevidence$4:org.scalacheck.Cogen[E],implicitevidence$5:org.scalacheck.Arbitrary[D],implicitevidence$6:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Decoder[E,D,F,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) => Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValue", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$3:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) => E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValue", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValueFromDec[E,A,T](implicitevidence$2:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbLegalValueFromEnc[E,A,T](implicitevidence$1:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbValue", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[scala.util.matching.Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenRegex", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[scala.util.matching.Regex]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbRegex", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[java.util.regex.Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.cogenPattern", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[java.util.regex.Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.arbPattern", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[java.util.regex.Pattern]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genPattern", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegularExpression", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.CommonArbitraryInstances.genRegexOptions", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) => DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) => DD)(encoded: (E1, E2, E3, E4, E5, E6) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) => DD)(encoded: (E1, E2, E3, E4, E5) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) => DD)(encoded: (E1, E2, E3, E4) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) => DD)(encoded: (E1, E2, E3) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) => DD)(encoded: (E1, E2) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) => EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) => DD)(encoded: (E1) => EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.regex.laws.discipline.GroupDecoderTests", "shortDescription" : "", "object" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: GroupDecoderLaws[A], arg1: Arbitrary[A], arg2: Cogen[A], al: Arbitrary[LegalGroup[A]]): GroupDecoderTests[A]", "member" : "kantan.regex.laws.discipline.GroupDecoderTests.apply", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#apply[A](implicitevidence$1:kantan.regex.laws.GroupDecoderLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicital:org.scalacheck.Arbitrary[kantan.regex.laws.LegalGroup[A]]):kantan.regex.laws.discipline.GroupDecoderTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/laws\/discipline\/GroupDecoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.regex.laws.discipline.MatchDecoderTests", "shortDescription" : "", "object" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: MatchDecoderLaws[A], arg1: Arbitrary[A], arg2: Cogen[A], al: Arbitrary[LegalMatch[A]]): MatchDecoderTests[A]", "member" : "kantan.regex.laws.discipline.MatchDecoderTests.apply", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#apply[A](implicitevidence$1:kantan.regex.laws.MatchDecoderLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicital:org.scalacheck.Arbitrary[kantan.regex.laws.LegalMatch[A]]):kantan.regex.laws.discipline.MatchDecoderTests[A]", "kind" : "def"}, {"label" : "arbMatch", "tail" : ": Arbitrary[Match]", "member" : "kantan.regex.laws.discipline.MatchDecoderTests.arbMatch", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#arbMatch:org.scalacheck.Arbitrary[kantan.regex.Match]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/laws\/discipline\/MatchDecoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "kantan.regex.ops" : [{"name" : "kantan.regex.ops.AllOps", "trait" : "kantan\/regex\/ops\/AllOps.html", "kind" : "trait", "members_trait" : [{"label" : "toRegexCompilerOps", "tail" : "(a: A)(arg0: Compiler[A]): CompilerOps[A]", "member" : "kantan.regex.ops.ToCompilerOps.toRegexCompilerOps", "link" : "kantan\/regex\/ops\/AllOps.html#toRegexCompilerOps[A](a:A)(implicitevidence$6:kantan.regex.Compiler[A]):kantan.regex.ops.CompilerOps[A]", "kind" : "implicit def"}, {"label" : "toRegexStringOps", "tail" : "(str: String): StringOps", "member" : "kantan.regex.ops.ToStringOps.toRegexStringOps", "link" : "kantan\/regex\/ops\/AllOps.html#toRegexStringOps(str:String):kantan.regex.ops.StringOps", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/ops\/AllOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/ops\/AllOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/ops\/AllOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/ops\/AllOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/ops\/AllOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/ops\/AllOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/ops\/AllOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/AllOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/AllOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/AllOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/ops\/AllOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/ops\/AllOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/ops\/AllOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/ops\/AllOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/ops\/AllOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/ops\/AllOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/ops\/AllOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/ops\/AllOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/ops\/AllOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.regex.ops.compiler", "shortDescription" : "", "object" : "kantan\/regex\/ops\/compiler$.html", "members_object" : [{"label" : "toRegexCompilerOps", "tail" : "(a: A)(arg0: Compiler[A]): CompilerOps[A]", "member" : "kantan.regex.ops.ToCompilerOps.toRegexCompilerOps", "link" : "kantan\/regex\/ops\/compiler$.html#toRegexCompilerOps[A](a:A)(implicitevidence$6:kantan.regex.Compiler[A]):kantan.regex.ops.CompilerOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/ops\/compiler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/ops\/compiler$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/ops\/compiler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/ops\/compiler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/ops\/compiler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/ops\/compiler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/ops\/compiler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/compiler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/compiler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/compiler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/ops\/compiler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/ops\/compiler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/ops\/compiler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/ops\/compiler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/ops\/compiler$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/ops\/compiler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/ops\/compiler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/ops\/compiler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/ops\/compiler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.regex.ops.CompilerOps", "shortDescription" : "Provides useful syntax for types that have a Compiler instance.", "members_class" : [{"label" : "asUnsafeRegex", "tail" : "(group: Int)(arg0: GroupDecoder[A]): Regex[DecodeResult[A]]", "member" : "kantan.regex.ops.CompilerOps.asUnsafeRegex", "link" : "kantan\/regex\/ops\/CompilerOps.html#asUnsafeRegex[A](group:Int)(implicitevidence$5:kantan.regex.GroupDecoder[A]):kantan.regex.Regex[kantan.regex.DecodeResult[A]]", "kind" : "def"}, {"label" : "asUnsafeRegex", "tail" : "(arg0: MatchDecoder[A]): Regex[DecodeResult[A]]", "member" : "kantan.regex.ops.CompilerOps.asUnsafeRegex", "link" : "kantan\/regex\/ops\/CompilerOps.html#asUnsafeRegex[A](implicitevidence$4:kantan.regex.MatchDecoder[A]):kantan.regex.Regex[kantan.regex.DecodeResult[A]]", "kind" : "def"}, {"label" : "asRegex", "tail" : "(group: Int)(arg0: GroupDecoder[A]): CompileResult[Regex[DecodeResult[A]]]", "member" : "kantan.regex.ops.CompilerOps.asRegex", "link" : "kantan\/regex\/ops\/CompilerOps.html#asRegex[A](group:Int)(implicitevidence$3:kantan.regex.GroupDecoder[A]):kantan.regex.CompileResult[kantan.regex.Regex[kantan.regex.DecodeResult[A]]]", "kind" : "def"}, {"label" : "asRegex", "tail" : "(arg0: MatchDecoder[A]): CompileResult[Regex[DecodeResult[A]]]", "member" : "kantan.regex.ops.CompilerOps.asRegex", "link" : "kantan\/regex\/ops\/CompilerOps.html#asRegex[A](implicitevidence$2:kantan.regex.MatchDecoder[A]):kantan.regex.CompileResult[kantan.regex.Regex[kantan.regex.DecodeResult[A]]]", "kind" : "def"}, {"member" : "kantan.regex.ops.CompilerOps#<init>", "error" : "unsupported entity"}, {"label" : "expr", "tail" : ": S", "member" : "kantan.regex.ops.CompilerOps.expr", "link" : "kantan\/regex\/ops\/CompilerOps.html#expr:S", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/ops\/CompilerOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/ops\/CompilerOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/ops\/CompilerOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/ops\/CompilerOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/ops\/CompilerOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/ops\/CompilerOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/ops\/CompilerOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/CompilerOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/CompilerOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/CompilerOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/ops\/CompilerOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/ops\/CompilerOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/ops\/CompilerOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/ops\/CompilerOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/ops\/CompilerOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/ops\/CompilerOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/ops\/CompilerOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/ops\/CompilerOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/ops\/CompilerOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/regex\/ops\/CompilerOps.html", "kind" : "class"}, {"name" : "kantan.regex.ops.string", "shortDescription" : "", "object" : "kantan\/regex\/ops\/string$.html", "members_object" : [{"label" : "toRegexStringOps", "tail" : "(str: String): StringOps", "member" : "kantan.regex.ops.ToStringOps.toRegexStringOps", "link" : "kantan\/regex\/ops\/string$.html#toRegexStringOps(str:String):kantan.regex.ops.StringOps", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/ops\/string$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/ops\/string$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/ops\/string$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/ops\/string$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/ops\/string$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/ops\/string$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/ops\/string$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/string$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/string$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/string$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/ops\/string$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/ops\/string$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/ops\/string$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/ops\/string$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/ops\/string$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/ops\/string$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/ops\/string$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/ops\/string$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/ops\/string$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.regex.ops.StringOps", "shortDescription" : "Enriches String with useful regex-related syntax.", "members_class" : [{"label" : "unsafeEvalRegex", "tail" : "(p: Pattern, group: Int)(arg0: GroupDecoder[A]): Iterator[A]", "member" : "kantan.regex.ops.StringOps.unsafeEvalRegex", "link" : "kantan\/regex\/ops\/StringOps.html#unsafeEvalRegex[A](p:kantan.regex.Pattern,group:Int)(implicitevidence$4:kantan.regex.GroupDecoder[A]):Iterator[A]", "kind" : "def"}, {"label" : "unsafeEvalRegex", "tail" : "(p: Pattern)(arg0: MatchDecoder[A]): Iterator[A]", "member" : "kantan.regex.ops.StringOps.unsafeEvalRegex", "link" : "kantan\/regex\/ops\/StringOps.html#unsafeEvalRegex[A](p:kantan.regex.Pattern)(implicitevidence$3:kantan.regex.MatchDecoder[A]):Iterator[A]", "kind" : "def"}, {"label" : "evalRegex", "tail" : "(p: Pattern, group: Int)(arg0: GroupDecoder[A]): Iterator[DecodeResult[A]]", "member" : "kantan.regex.ops.StringOps.evalRegex", "link" : "kantan\/regex\/ops\/StringOps.html#evalRegex[A](p:kantan.regex.Pattern,group:Int)(implicitevidence$2:kantan.regex.GroupDecoder[A]):Iterator[kantan.regex.DecodeResult[A]]", "kind" : "def"}, {"label" : "evalRegex", "tail" : "(p: Pattern)(arg0: MatchDecoder[A]): Iterator[DecodeResult[A]]", "member" : "kantan.regex.ops.StringOps.evalRegex", "link" : "kantan\/regex\/ops\/StringOps.html#evalRegex[A](p:kantan.regex.Pattern)(implicitevidence$1:kantan.regex.MatchDecoder[A]):Iterator[kantan.regex.DecodeResult[A]]", "kind" : "def"}, {"label" : "evalRegex", "tail" : "(r: Regex[A]): Iterator[A]", "member" : "kantan.regex.ops.StringOps.evalRegex", "link" : "kantan\/regex\/ops\/StringOps.html#evalRegex[A](r:kantan.regex.Regex[A]):Iterator[A]", "kind" : "def"}, {"member" : "kantan.regex.ops.StringOps#<init>", "error" : "unsupported entity"}, {"label" : "str", "tail" : ": String", "member" : "kantan.regex.ops.StringOps.str", "link" : "kantan\/regex\/ops\/StringOps.html#str:String", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "kantan\/regex\/ops\/StringOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "kantan\/regex\/ops\/StringOps.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/ops\/StringOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/ops\/StringOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "kantan\/regex\/ops\/StringOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "kantan\/regex\/ops\/StringOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "kantan\/regex\/ops\/StringOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "kantan\/regex\/ops\/StringOps.html", "kind" : "class"}, {"name" : "kantan.regex.ops.ToCompilerOps", "trait" : "kantan\/regex\/ops\/ToCompilerOps.html", "kind" : "trait", "members_trait" : [{"label" : "toRegexCompilerOps", "tail" : "(a: A)(arg0: Compiler[A]): CompilerOps[A]", "member" : "kantan.regex.ops.ToCompilerOps.toRegexCompilerOps", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#toRegexCompilerOps[A](a:A)(implicitevidence$6:kantan.regex.Compiler[A]):kantan.regex.ops.CompilerOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/ops\/ToCompilerOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/ops\/ToCompilerOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "kantan.regex.ops.ToStringOps", "trait" : "kantan\/regex\/ops\/ToStringOps.html", "kind" : "trait", "members_trait" : [{"label" : "toRegexStringOps", "tail" : "(str: String): StringOps", "member" : "kantan.regex.ops.ToStringOps.toRegexStringOps", "link" : "kantan\/regex\/ops\/ToStringOps.html#toRegexStringOps(str:String):kantan.regex.ops.StringOps", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/regex\/ops\/ToStringOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/regex\/ops\/ToStringOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/regex\/ops\/ToStringOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/regex\/ops\/ToStringOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/regex\/ops\/ToStringOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/regex\/ops\/ToStringOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/regex\/ops\/ToStringOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/ToStringOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/ToStringOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/regex\/ops\/ToStringOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/regex\/ops\/ToStringOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/regex\/ops\/ToStringOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/regex\/ops\/ToStringOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/regex\/ops\/ToStringOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/regex\/ops\/ToStringOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/regex\/ops\/ToStringOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/regex\/ops\/ToStringOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/regex\/ops\/ToStringOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/regex\/ops\/ToStringOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}]};